/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_EXAMPLES_Hello_World_PROXY_HPP_
#define V0_COMMONAPI_EXAMPLES_Hello_World_PROXY_HPP_

#include <v0/commonapi/examples/HelloWorldProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace commonapi {
namespace examples {

template <typename ... _AttributeExtensions>
class HelloWorldProxy
    : virtual public HelloWorld,
      virtual public HelloWorldProxyBase,
      virtual public _AttributeExtensions... {
public:
    HelloWorldProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~HelloWorldProxy();

    typedef HelloWorld InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute x.
     */
    virtual XAttribute& getXAttribute() {
        return delegate_->getXAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute a1.
     */
    virtual A1Attribute& getA1Attribute() {
        return delegate_->getA1Attribute();
    }


    /**
     * Calls sayHello with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void sayHello(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_message, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls sayHello with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> sayHelloAsync(const std::string &_name, SayHelloAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< HelloWorldProxyBase> delegate_;
};

typedef HelloWorldProxy<> HelloWorldProxyDefault;

namespace HelloWorldExtensions {
    template <template <typename > class _ExtensionType>
    class XAttributeExtension {
     public:
        typedef _ExtensionType< HelloWorldProxyBase::XAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< HelloWorldProxyBase::XAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        XAttributeExtension(HelloWorldProxyBase& proxy): attributeExtension_(proxy.getXAttribute()) {
        }
    
        inline extension_type& getXAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class A1AttributeExtension {
     public:
        typedef _ExtensionType< HelloWorldProxyBase::A1Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< HelloWorldProxyBase::A1Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        A1AttributeExtension(HelloWorldProxyBase& proxy): attributeExtension_(proxy.getA1Attribute()) {
        }
    
        inline extension_type& getA1AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace HelloWorldExtensions

//
// HelloWorldProxy Implementation
//
template <typename ... _AttributeExtensions>
HelloWorldProxy<_AttributeExtensions...>::HelloWorldProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< HelloWorldProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< HelloWorldProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
HelloWorldProxy<_AttributeExtensions...>::~HelloWorldProxy() {
}

template <typename ... _AttributeExtensions>
void HelloWorldProxy<_AttributeExtensions...>::sayHello(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_message, const CommonAPI::CallInfo *_info) {
    delegate_->sayHello(_name, _internalCallStatus, _message, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> HelloWorldProxy<_AttributeExtensions...>::sayHelloAsync(const std::string &_name, SayHelloAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->sayHelloAsync(_name, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &HelloWorldProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool HelloWorldProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool HelloWorldProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& HelloWorldProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& HelloWorldProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace examples
} // namespace commonapi
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v0::commonapi::examples::HelloWorldProxy,
    _AttributeExtension> {
    typedef typename ::v0::commonapi::examples::HelloWorldProxy<
            ::v0::commonapi::examples::HelloWorldExtensions::XAttributeExtension<_AttributeExtension>, 
            ::v0::commonapi::examples::HelloWorldExtensions::A1AttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COMMONAPI_EXAMPLES_Hello_World_PROXY_HPP_
