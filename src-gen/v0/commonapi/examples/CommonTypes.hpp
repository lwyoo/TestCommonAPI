/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_EXAMPLES_Common_Types_HPP_
#define V0_COMMONAPI_EXAMPLES_Common_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace commonapi {
namespace examples {

struct CommonTypes {
    struct a2Struct : CommonAPI::Struct< int32_t, bool, double> {
    
        a2Struct()
        {
            std::get< 0>(values_) = 0;
            std::get< 1>(values_) = false;
            std::get< 2>(values_) = 0.0;
        }
        a2Struct(const int32_t &_a, const bool &_b, const double &_d)
        {
            std::get< 0>(values_) = _a;
            std::get< 1>(values_) = _b;
            std::get< 2>(values_) = _d;
        }
        inline const int32_t &getA() const { return std::get< 0>(values_); }
        inline void setA(const int32_t &_value) { std::get< 0>(values_) = _value; }
        inline const bool &getB() const { return std::get< 1>(values_); }
        inline void setB(const bool _value) { std::get< 1>(values_) = _value; }
        inline const double &getD() const { return std::get< 2>(values_); }
        inline void setD(const double &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const a2Struct& _other) const {
        return (getA() == _other.getA() && getB() == _other.getB() && getD() == _other.getD());
        }
        inline bool operator!=(const a2Struct &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct a1Struct : CommonAPI::Struct< std::string, a2Struct> {
    
        a1Struct()
        {
            std::get< 0>(values_) = "";
            std::get< 1>(values_) = a2Struct();
        }
        a1Struct(const std::string &_s, const a2Struct &_a2)
        {
            std::get< 0>(values_) = _s;
            std::get< 1>(values_) = _a2;
        }
        inline const std::string &getS() const { return std::get< 0>(values_); }
        inline void setS(const std::string &_value) { std::get< 0>(values_) = _value; }
        inline const a2Struct &getA2() const { return std::get< 1>(values_); }
        inline void setA2(const a2Struct &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const a1Struct& _other) const {
        return (getS() == _other.getS() && getA2() == _other.getA2());
        }
        inline bool operator!=(const a1Struct &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct EnumMyStatus : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            ENUM_STATUS_OK = 0,
            ENUM_STATUS_FAIL = 1,
            ENUM_STATUS_UNKNWON = 2,
            ENUM_STATUS_MAX = 3
        };
    
        EnumMyStatus()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::ENUM_STATUS_OK)) {}
        EnumMyStatus(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::ENUM_STATUS_OK):
                case static_cast< int32_t>(Literal::ENUM_STATUS_FAIL):
                case static_cast< int32_t>(Literal::ENUM_STATUS_UNKNWON):
                case static_cast< int32_t>(Literal::ENUM_STATUS_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnumMyStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnumMyStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnumMyStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnumMyStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnumMyStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnumMyStatus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "commonapi.examples.CommonTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct CommonTypes

} // namespace examples
} // namespace commonapi
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for EnumMyStatus
    template<>
    struct hash< ::v0::commonapi::examples::CommonTypes::EnumMyStatus> {
        inline size_t operator()(const ::v0::commonapi::examples::CommonTypes::EnumMyStatus& enumMyStatus) const {
            return static_cast< int32_t>(enumMyStatus);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COMMONAPI_EXAMPLES_Common_Types_HPP_
