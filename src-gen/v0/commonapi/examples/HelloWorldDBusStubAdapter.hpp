/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201907221221.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_EXAMPLES_Hello_World_DBUS_STUB_ADAPTER_HPP_
#define V0_COMMONAPI_EXAMPLES_Hello_World_DBUS_STUB_ADAPTER_HPP_

#include <v0/commonapi/examples/HelloWorldStub.hpp>
#include "v0/commonapi/examples/HelloWorldDBusDeployment.hpp"
#include <v0/commonapi/examples/CommonTypesDBusDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace commonapi {
namespace examples {

template <typename _Stub = ::v0::commonapi::examples::HelloWorldStub, typename... _Stubs>
class HelloWorldDBusStubAdapterInternal
    : public virtual HelloWorldStubAdapter,
      public CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...>
     {
public:
    typedef CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...> HelloWorldDBusStubAdapterHelper;

    ~HelloWorldDBusStubAdapterInternal() {
        deactivateManagedInstances();
        HelloWorldDBusStubAdapterHelper::deinit();
    }

    virtual bool hasFreedesktopProperties() {
        return false;
    }

    inline static const char* getInterface() {
        return HelloWorld::getInterface();
    }

    void fireXAttributeChanged(const int32_t& value);

    void fireA1AttributeChanged(const ::v0::commonapi::examples::CommonTypes::a1Struct& value);

    void fireMyStatusEvent(const ::v0::commonapi::examples::CommonTypes::EnumMyStatus& status);

    void deactivateManagedInstances() {
    }

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::commonapi::examples::HelloWorldStub,
        CommonAPI::Version
        > getHelloWorldInterfaceVersionStubDispatcher;

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
            ::v0::commonapi::examples::HelloWorldStub,
            int32_t,
            CommonAPI::DBus::IntegerDeployment
            > getXAttributeStubDispatcher;
    static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
            ::v0::commonapi::examples::HelloWorldStub,
            int32_t,
            CommonAPI::DBus::IntegerDeployment
            > setXAttributeStubDispatcher;

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
            ::v0::commonapi::examples::HelloWorldStub,
            ::v0::commonapi::examples::CommonTypes::a1Struct,
            ::v0::commonapi::examples::CommonTypes_::a1StructDeployment_t
            > getA1AttributeStubDispatcher;
    static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
            ::v0::commonapi::examples::HelloWorldStub,
            ::v0::commonapi::examples::CommonTypes::a1Struct,
            ::v0::commonapi::examples::CommonTypes_::a1StructDeployment_t
            > setA1AttributeStubDispatcher;

    
    static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
        ::v0::commonapi::examples::HelloWorldStub,
        std::tuple< std::string>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::DBus::StringDeployment>,
        std::tuple< CommonAPI::DBus::StringDeployment>
    
        > sayHelloStubDispatcher;


    HelloWorldDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
    : CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      HelloWorldDBusStubAdapterHelper(_address, _connection, false, _stub) {
        HelloWorldDBusStubAdapterHelper::addStubDispatcher({ "getXAttribute", "" }, &getXAttributeStubDispatcher);
        HelloWorldDBusStubAdapterHelper::addStubDispatcher({ "setXAttribute", "i" }, &setXAttributeStubDispatcher);
        HelloWorldDBusStubAdapterHelper::addStubDispatcher({ "getA1Attribute", "" }, &getA1AttributeStubDispatcher);
        HelloWorldDBusStubAdapterHelper::addStubDispatcher({ "setA1Attribute", "(s(ibd))" }, &setA1AttributeStubDispatcher);
        HelloWorldDBusStubAdapterHelper::addStubDispatcher({ "sayHello", "s" }, &sayHelloStubDispatcher);
        HelloWorldDBusStubAdapterHelper::addStubDispatcher({ "getInterfaceVersion", "" }, &getHelloWorldInterfaceVersionStubDispatcher);
    }

protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const {
        static const std::string introspectionData =
            "<method name=\"getInterfaceVersion\">\n"
                "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
            "</method>\n"
            "<method name=\"getXAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
            "</method>\n"
            "<method name=\"setXAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"i\" direction=\"out\" />\n"
            "</method>\n"
            "<signal name=\"onXAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
            "</signal>\n"
            "<method name=\"getA1Attribute\">\n"
            "<arg name=\"value\" type=\"(s(ibd))\" direction=\"out\" />"
            "</method>\n"
            "<method name=\"setA1Attribute\">\n"
            "<arg name=\"requestedValue\" type=\"(s(ibd))\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"(s(ibd))\" direction=\"out\" />\n"
            "</method>\n"
            "<signal name=\"onA1AttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(s(ibd))\" />\n"
            "</signal>\n"
            "<signal name=\"myStatus\">\n"
            "<arg name=\"status\" type=\"i\" />\n"
            "</signal>\n"
            "<method name=\"sayHello\">\n"
            "<arg name=\"_name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_message\" type=\"s\" direction=\"out\" />\n"
            "</method>\n"
            ;
        return introspectionData.c_str();
    }

private:
};


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
    ::v0::commonapi::examples::HelloWorldStub,
    CommonAPI::Version
    > HelloWorldDBusStubAdapterInternal<_Stub, _Stubs...>::getHelloWorldInterfaceVersionStubDispatcher(&HelloWorldStub::lockInterfaceVersionAttribute, &HelloWorldStub::getInterfaceVersion, "uu");

template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::commonapi::examples::HelloWorldStub,
        int32_t,
        CommonAPI::DBus::IntegerDeployment
        > HelloWorldDBusStubAdapterInternal<_Stub, _Stubs...>::getXAttributeStubDispatcher(
            &::v0::commonapi::examples::HelloWorldStub::lockXAttribute,
            &::v0::commonapi::examples::HelloWorldStub::getXAttribute
            , "i"
            );
template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v0::commonapi::examples::HelloWorldStub,
        int32_t,
        CommonAPI::DBus::IntegerDeployment
        > HelloWorldDBusStubAdapterInternal<_Stub, _Stubs...>::setXAttributeStubDispatcher(
                &::v0::commonapi::examples::HelloWorldStub::lockXAttribute,
                &::v0::commonapi::examples::HelloWorldStub::getXAttribute,
                &HelloWorldStubRemoteEvent::onRemoteSetXAttribute,
                &HelloWorldStubRemoteEvent::onRemoteXAttributeChanged
                ,&HelloWorldStubAdapter::fireXAttributeChanged
                ,"i"
                );

template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::commonapi::examples::HelloWorldStub,
        ::v0::commonapi::examples::CommonTypes::a1Struct,
        ::v0::commonapi::examples::CommonTypes_::a1StructDeployment_t
        > HelloWorldDBusStubAdapterInternal<_Stub, _Stubs...>::getA1AttributeStubDispatcher(
            &::v0::commonapi::examples::HelloWorldStub::lockA1Attribute,
            &::v0::commonapi::examples::HelloWorldStub::getA1Attribute
            , "(s(ibd))"
            );
template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v0::commonapi::examples::HelloWorldStub,
        ::v0::commonapi::examples::CommonTypes::a1Struct,
        ::v0::commonapi::examples::CommonTypes_::a1StructDeployment_t
        > HelloWorldDBusStubAdapterInternal<_Stub, _Stubs...>::setA1AttributeStubDispatcher(
                &::v0::commonapi::examples::HelloWorldStub::lockA1Attribute,
                &::v0::commonapi::examples::HelloWorldStub::getA1Attribute,
                &HelloWorldStubRemoteEvent::onRemoteSetA1Attribute,
                &HelloWorldStubRemoteEvent::onRemoteA1AttributeChanged
                ,&HelloWorldStubAdapter::fireA1AttributeChanged
                ,"(s(ibd))"
                );


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::commonapi::examples::HelloWorldStub,
    std::tuple< std::string>,
    std::tuple< std::string>,
    std::tuple< CommonAPI::DBus::StringDeployment>,
    std::tuple< CommonAPI::DBus::StringDeployment>

    > HelloWorldDBusStubAdapterInternal<_Stub, _Stubs...>::sayHelloStubDispatcher(
    &HelloWorldStub::sayHello, "s",
    std::make_tuple(static_cast< CommonAPI::DBus::StringDeployment* >(nullptr)),
    std::make_tuple(static_cast< CommonAPI::DBus::StringDeployment* >(nullptr)));

template <typename _Stub, typename... _Stubs>
void HelloWorldDBusStubAdapterInternal<_Stub, _Stubs...>::fireXAttributeChanged(const int32_t& value) {
    CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deployedValue(value, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        int32_t,
        CommonAPI::DBus::IntegerDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onXAttributeChanged",
            "i",
            deployedValue
    
    );
}

template <typename _Stub, typename... _Stubs>
void HelloWorldDBusStubAdapterInternal<_Stub, _Stubs...>::fireA1AttributeChanged(const ::v0::commonapi::examples::CommonTypes::a1Struct& value) {
    CommonAPI::Deployable< ::v0::commonapi::examples::CommonTypes::a1Struct, ::v0::commonapi::examples::CommonTypes_::a1StructDeployment_t> deployedValue(value, static_cast< ::v0::commonapi::examples::CommonTypes_::a1StructDeployment_t* >(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v0::commonapi::examples::CommonTypes::a1Struct,
        ::v0::commonapi::examples::CommonTypes_::a1StructDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onA1AttributeChanged",
            "(s(ibd))",
            deployedValue
    
    );
}

template <typename _Stub, typename... _Stubs>
void HelloWorldDBusStubAdapterInternal<_Stub, _Stubs...>::fireMyStatusEvent(const ::v0::commonapi::examples::CommonTypes::EnumMyStatus& status) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v0::commonapi::examples::CommonTypes::EnumMyStatus
    >>::sendSignal(
            *this,
            "myStatus",
            "i",
    status
    );
}


template <typename _Stub = ::v0::commonapi::examples::HelloWorldStub, typename... _Stubs>
class HelloWorldDBusStubAdapter
    : public HelloWorldDBusStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< HelloWorldDBusStubAdapter<_Stub, _Stubs...>> {
public:
    HelloWorldDBusStubAdapter(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
        : CommonAPI::DBus::DBusStubAdapter(
            _address,
            _connection,
            false),
          HelloWorldDBusStubAdapterInternal<_Stub, _Stubs...>(
            _address,
            _connection,
            _stub) {
    }
};

} // namespace examples
} // namespace commonapi
} // namespace v0

#endif // V0_COMMONAPI_EXAMPLES_Hello_World_DBUS_STUB_ADAPTER_HPP_
