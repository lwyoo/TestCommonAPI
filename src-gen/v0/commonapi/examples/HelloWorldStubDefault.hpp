/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202001100728.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_EXAMPLES_Hello_World_STUB_DEFAULT_HPP_
#define V0_COMMONAPI_EXAMPLES_Hello_World_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v0/commonapi/examples/HelloWorldStub.hpp>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v0 {
namespace commonapi {
namespace examples {

/**
 * Provides a default implementation for HelloWorldStubRemoteEvent and
 * HelloWorldStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT HelloWorldStubDefault
    : public virtual HelloWorldStub {
public:
    COMMONAPI_EXPORT HelloWorldStubDefault();

    COMMONAPI_EXPORT HelloWorldStubRemoteEvent* initStubAdapter(const std::shared_ptr< HelloWorldStubAdapter> &_adapter);

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    COMMONAPI_EXPORT virtual const int32_t& getXAttribute();
    COMMONAPI_EXPORT virtual const int32_t& getXAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setXAttribute(int32_t _value);
    COMMONAPI_EXPORT virtual void setXAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value);
    COMMONAPI_EXPORT virtual const ::v0::commonapi::examples::CommonTypes::a1Struct& getA1Attribute();
    COMMONAPI_EXPORT virtual const ::v0::commonapi::examples::CommonTypes::a1Struct& getA1Attribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setA1Attribute(::v0::commonapi::examples::CommonTypes::a1Struct _value);
    COMMONAPI_EXPORT virtual void setA1Attribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::commonapi::examples::CommonTypes::a1Struct _value);

    COMMONAPI_EXPORT virtual void sayHello(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name, sayHelloReply_t _reply);

    COMMONAPI_EXPORT virtual void fireMyStatusEvent(const ::v0::commonapi::examples::CommonTypes::EnumMyStatus &_status);
    COMMONAPI_EXPORT virtual void fireMyEventEvent(const int32_t &_myValue);

    
protected:
    COMMONAPI_EXPORT virtual bool trySetXAttribute(int32_t _value);
    COMMONAPI_EXPORT virtual bool validateXAttributeRequestedValue(const int32_t &_value);
    COMMONAPI_EXPORT virtual void onRemoteXAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetA1Attribute(::v0::commonapi::examples::CommonTypes::a1Struct _value);
    COMMONAPI_EXPORT virtual bool validateA1AttributeRequestedValue(const ::v0::commonapi::examples::CommonTypes::a1Struct &_value);
    COMMONAPI_EXPORT virtual void onRemoteA1AttributeChanged();
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual HelloWorldStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(HelloWorldStubDefault *_defaultStub);

        COMMONAPI_EXPORT virtual bool onRemoteSetXAttribute(int32_t _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetXAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value);
        COMMONAPI_EXPORT virtual void onRemoteXAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetA1Attribute(::v0::commonapi::examples::CommonTypes::a1Struct _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetA1Attribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::commonapi::examples::CommonTypes::a1Struct _value);
        COMMONAPI_EXPORT virtual void onRemoteA1AttributeChanged();


    private:
        HelloWorldStubDefault *defaultStub_;
    };
protected:
    HelloWorldStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    int32_t xAttributeValue_ {};
    ::v0::commonapi::examples::CommonTypes::a1Struct a1AttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace examples
} // namespace commonapi
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COMMONAPI_EXAMPLES_Hello_World_STUB_DEFAULT
