/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202001100728.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_PROJ_DCLUSTER_MCUMANAGER_Mcu_Manager_PROXY_HPP_
#define V1_PROJ_DCLUSTER_MCUMANAGER_Mcu_Manager_PROXY_HPP_

#include <v1/proj/dcluster/McuManager/McuManagerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace proj {
namespace dcluster {
namespace McuManager {

template <typename ... _AttributeExtensions>
class McuManagerProxy
    : virtual public McuManager,
      virtual public McuManagerProxyBase,
      virtual public _AttributeExtensions... {
public:
    McuManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~McuManagerProxy();

    typedef McuManager InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute MainContentsDisplayControl.
     */
    virtual MainContentsDisplayControlAttribute& getMainContentsDisplayControlAttribute() {
        return delegate_->getMainContentsDisplayControlAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute DrivingState.
     */
    virtual DrivingStateAttribute& getDrivingStateAttribute() {
        return delegate_->getDrivingStateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute DriveMode.
     */
    virtual DriveModeAttribute& getDriveModeAttribute() {
        return delegate_->getDriveModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute Variant.
     */
    virtual VariantAttribute& getVariantAttribute() {
        return delegate_->getVariantAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute EOL.
     */
    virtual EOLAttribute& getEOLAttribute() {
        return delegate_->getEOLAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute SWVariant.
     */
    virtual SWVariantAttribute& getSWVariantAttribute() {
        return delegate_->getSWVariantAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute IGN1State.
     */
    virtual IGN1StateAttribute& getIGN1StateAttribute() {
        return delegate_->getIGN1StateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute IGN3State.
     */
    virtual IGN3StateAttribute& getIGN3StateAttribute() {
        return delegate_->getIGN3StateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute SpeedoUnit.
     */
    virtual SpeedoUnitAttribute& getSpeedoUnitAttribute() {
        return delegate_->getSpeedoUnitAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TripDriveMode.
     */
    virtual TripDriveModeAttribute& getTripDriveModeAttribute() {
        return delegate_->getTripDriveModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TripDTE.
     */
    virtual TripDTEAttribute& getTripDTEAttribute() {
        return delegate_->getTripDTEAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TripFuelEconomy.
     */
    virtual TripFuelEconomyAttribute& getTripFuelEconomyAttribute() {
        return delegate_->getTripFuelEconomyAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TripAccumulated.
     */
    virtual TripAccumulatedAttribute& getTripAccumulatedAttribute() {
        return delegate_->getTripAccumulatedAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TripDriveInfo.
     */
    virtual TripDriveInfoAttribute& getTripDriveInfoAttribute() {
        return delegate_->getTripDriveInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TripDigitalSpeedMeter.
     */
    virtual TripDigitalSpeedMeterAttribute& getTripDigitalSpeedMeterAttribute() {
        return delegate_->getTripDigitalSpeedMeterAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TripPowerFlowDiagram.
     */
    virtual TripPowerFlowDiagramAttribute& getTripPowerFlowDiagramAttribute() {
        return delegate_->getTripPowerFlowDiagramAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TripUREALevel.
     */
    virtual TripUREALevelAttribute& getTripUREALevelAttribute() {
        return delegate_->getTripUREALevelAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TripTransmissionTemp.
     */
    virtual TripTransmissionTempAttribute& getTripTransmissionTempAttribute() {
        return delegate_->getTripTransmissionTempAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TripEngineCoolantTemp.
     */
    virtual TripEngineCoolantTempAttribute& getTripEngineCoolantTempAttribute() {
        return delegate_->getTripEngineCoolantTempAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute EnergyFlow.
     */
    virtual EnergyFlowAttribute& getEnergyFlowAttribute() {
        return delegate_->getEnergyFlowAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute MyDrivingMode.
     */
    virtual MyDrivingModeAttribute& getMyDrivingModeAttribute() {
        return delegate_->getMyDrivingModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTDisplayType.
     */
    virtual TBTDisplayTypeAttribute& getTBTDisplayTypeAttribute() {
        return delegate_->getTBTDisplayTypeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTDisplayTollgate.
     */
    virtual TBTDisplayTollgateAttribute& getTBTDisplayTollgateAttribute() {
        return delegate_->getTBTDisplayTollgateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTPreliminaryInfo.
     */
    virtual TBTPreliminaryInfoAttribute& getTBTPreliminaryInfoAttribute() {
        return delegate_->getTBTPreliminaryInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTDestInfoPageState.
     */
    virtual TBTDestInfoPageStateAttribute& getTBTDestInfoPageStateAttribute() {
        return delegate_->getTBTDestInfoPageStateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTPointType.
     */
    virtual TBTPointTypeAttribute& getTBTPointTypeAttribute() {
        return delegate_->getTBTPointTypeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTDirection.
     */
    virtual TBTDirectionAttribute& getTBTDirectionAttribute() {
        return delegate_->getTBTDirectionAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTRoadDisplay.
     */
    virtual TBTRoadDisplayAttribute& getTBTRoadDisplayAttribute() {
        return delegate_->getTBTRoadDisplayAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTSideRoadDisplay.
     */
    virtual TBTSideRoadDisplayAttribute& getTBTSideRoadDisplayAttribute() {
        return delegate_->getTBTSideRoadDisplayAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTDistanceToDestination.
     */
    virtual TBTDistanceToDestinationAttribute& getTBTDistanceToDestinationAttribute() {
        return delegate_->getTBTDistanceToDestinationAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTDistanceUntilTurn.
     */
    virtual TBTDistanceUntilTurnAttribute& getTBTDistanceUntilTurnAttribute() {
        return delegate_->getTBTDistanceUntilTurnAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTExpectedDestTime.
     */
    virtual TBTExpectedDestTimeAttribute& getTBTExpectedDestTimeAttribute() {
        return delegate_->getTBTExpectedDestTimeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTExpectedRemainTime.
     */
    virtual TBTExpectedRemainTimeAttribute& getTBTExpectedRemainTimeAttribute() {
        return delegate_->getTBTExpectedRemainTimeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTGuideTPInfo.
     */
    virtual TBTGuideTPInfoAttribute& getTBTGuideTPInfoAttribute() {
        return delegate_->getTBTGuideTPInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTDestTPInfo.
     */
    virtual TBTDestTPInfoAttribute& getTBTDestTPInfoAttribute() {
        return delegate_->getTBTDestTPInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTViaPoint1TPInfo.
     */
    virtual TBTViaPoint1TPInfoAttribute& getTBTViaPoint1TPInfoAttribute() {
        return delegate_->getTBTViaPoint1TPInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTViaPoint2TPInfo.
     */
    virtual TBTViaPoint2TPInfoAttribute& getTBTViaPoint2TPInfoAttribute() {
        return delegate_->getTBTViaPoint2TPInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTViaPoint3TPInfo.
     */
    virtual TBTViaPoint3TPInfoAttribute& getTBTViaPoint3TPInfoAttribute() {
        return delegate_->getTBTViaPoint3TPInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBTViaPoint4TPInfo.
     */
    virtual TBTViaPoint4TPInfoAttribute& getTBTViaPoint4TPInfoAttribute() {
        return delegate_->getTBTViaPoint4TPInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute DriveAssistCruiseControlTTC.
     */
    virtual DriveAssistCruiseControlTTCAttribute& getDriveAssistCruiseControlTTCAttribute() {
        return delegate_->getDriveAssistCruiseControlTTCAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute DriveAssistCruiseControlReal.
     */
    virtual DriveAssistCruiseControlRealAttribute& getDriveAssistCruiseControlRealAttribute() {
        return delegate_->getDriveAssistCruiseControlRealAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute DriveAssistLane.
     */
    virtual DriveAssistLaneAttribute& getDriveAssistLaneAttribute() {
        return delegate_->getDriveAssistLaneAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute DriveAssistDAW.
     */
    virtual DriveAssistDAWAttribute& getDriveAssistDAWAttribute() {
        return delegate_->getDriveAssistDAWAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute DriveAssistISLW.
     */
    virtual DriveAssistISLWAttribute& getDriveAssistISLWAttribute() {
        return delegate_->getDriveAssistISLWAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute DriveAssistAWD.
     */
    virtual DriveAssistAWDAttribute& getDriveAssistAWDAttribute() {
        return delegate_->getDriveAssistAWDAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute DriveAssistTPMS.
     */
    virtual DriveAssistTPMSAttribute& getDriveAssistTPMSAttribute() {
        return delegate_->getDriveAssistTPMSAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AdasInfo.
     */
    virtual AdasInfoAttribute& getAdasInfoAttribute() {
        return delegate_->getAdasInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ContentsGear.
     */
    virtual ContentsGearAttribute& getContentsGearAttribute() {
        return delegate_->getContentsGearAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ContentsCC.
     */
    virtual ContentsCCAttribute& getContentsCCAttribute() {
        return delegate_->getContentsCCAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ContentsSCC.
     */
    virtual ContentsSCCAttribute& getContentsSCCAttribute() {
        return delegate_->getContentsSCCAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ContentsCoasting.
     */
    virtual ContentsCoastingAttribute& getContentsCoastingAttribute() {
        return delegate_->getContentsCoastingAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ContentsDIS.
     */
    virtual ContentsDISAttribute& getContentsDISAttribute() {
        return delegate_->getContentsDISAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ContentsDTEInfo.
     */
    virtual ContentsDTEInfoAttribute& getContentsDTEInfoAttribute() {
        return delegate_->getContentsDTEInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ContentsISLW.
     */
    virtual ContentsISLWAttribute& getContentsISLWAttribute() {
        return delegate_->getContentsISLWAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ContentsOAT.
     */
    virtual ContentsOATAttribute& getContentsOATAttribute() {
        return delegate_->getContentsOATAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ContentsODOMeter.
     */
    virtual ContentsODOMeterAttribute& getContentsODOMeterAttribute() {
        return delegate_->getContentsODOMeterAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute EcoPowerDisplayInfo.
     */
    virtual EcoPowerDisplayInfoAttribute& getEcoPowerDisplayInfoAttribute() {
        return delegate_->getEcoPowerDisplayInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ContentsRSBR.
     */
    virtual ContentsRSBRAttribute& getContentsRSBRAttribute() {
        return delegate_->getContentsRSBRAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ContentsSpeedLimit.
     */
    virtual ContentsSpeedLimitAttribute& getContentsSpeedLimitAttribute() {
        return delegate_->getContentsSpeedLimitAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute MasterWarnCmd.
     */
    virtual MasterWarnCmdAttribute& getMasterWarnCmdAttribute() {
        return delegate_->getMasterWarnCmdAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AvTpAMFMInfo.
     */
    virtual AvTpAMFMInfoAttribute& getAvTpAMFMInfoAttribute() {
        return delegate_->getAvTpAMFMInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AvTpXMInfo.
     */
    virtual AvTpXMInfoAttribute& getAvTpXMInfoAttribute() {
        return delegate_->getAvTpXMInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AvTpDABInfo.
     */
    virtual AvTpDABInfoAttribute& getAvTpDABInfoAttribute() {
        return delegate_->getAvTpDABInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AvTpDMBInfo.
     */
    virtual AvTpDMBInfoAttribute& getAvTpDMBInfoAttribute() {
        return delegate_->getAvTpDMBInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AvTpJukeBoxInfo.
     */
    virtual AvTpJukeBoxInfoAttribute& getAvTpJukeBoxInfoAttribute() {
        return delegate_->getAvTpJukeBoxInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AvTpIpodInfo.
     */
    virtual AvTpIpodInfoAttribute& getAvTpIpodInfoAttribute() {
        return delegate_->getAvTpIpodInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AvTpUSBInfo.
     */
    virtual AvTpUSBInfoAttribute& getAvTpUSBInfoAttribute() {
        return delegate_->getAvTpUSBInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AvTpBlueToothInfo.
     */
    virtual AvTpBlueToothInfoAttribute& getAvTpBlueToothInfoAttribute() {
        return delegate_->getAvTpBlueToothInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AvTpAppleCarPlayInfo.
     */
    virtual AvTpAppleCarPlayInfoAttribute& getAvTpAppleCarPlayInfoAttribute() {
        return delegate_->getAvTpAppleCarPlayInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AvTpAndroidAutoInfo.
     */
    virtual AvTpAndroidAutoInfoAttribute& getAvTpAndroidAutoInfoAttribute() {
        return delegate_->getAvTpAndroidAutoInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AvTpIboxInfo.
     */
    virtual AvTpIboxInfoAttribute& getAvTpIboxInfoAttribute() {
        return delegate_->getAvTpIboxInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AvTpCDInfo.
     */
    virtual AvTpCDInfoAttribute& getAvTpCDInfoAttribute() {
        return delegate_->getAvTpCDInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute AvTpBaiduMInfo.
     */
    virtual AvTpBaiduMInfoAttribute& getAvTpBaiduMInfoAttribute() {
        return delegate_->getAvTpBaiduMInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute EventContentsFull.
     */
    virtual EventContentsFullAttribute& getEventContentsFullAttribute() {
        return delegate_->getEventContentsFullAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute EventContentsMini.
     */
    virtual EventContentsMiniAttribute& getEventContentsMiniAttribute() {
        return delegate_->getEventContentsMiniAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute EventAccessory.
     */
    virtual EventAccessoryAttribute& getEventAccessoryAttribute() {
        return delegate_->getEventAccessoryAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute PowerTailGateWarnState.
     */
    virtual PowerTailGateWarnStateAttribute& getPowerTailGateWarnStateAttribute() {
        return delegate_->getPowerTailGateWarnStateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute DisplayLanguage.
     */
    virtual DisplayLanguageAttribute& getDisplayLanguageAttribute() {
        return delegate_->getDisplayLanguageAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_SccReaction.
     */
    virtual UsmDriverAssist_SccReactionAttribute& getUsmDriverAssist_SccReactionAttribute() {
        return delegate_->getUsmDriverAssist_SccReactionAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlert.
     */
    virtual UsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute& getUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute() {
        return delegate_->getUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_DrivingAssist_LaneFollowingAssist.
     */
    virtual UsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute& getUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute() {
        return delegate_->getUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_DrivingAssist_HighwayDrivingAssist.
     */
    virtual UsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute& getUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute() {
        return delegate_->getUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDown.
     */
    virtual UsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute& getUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute() {
        return delegate_->getUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDown.
     */
    virtual UsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute& getUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute() {
        return delegate_->getUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_DrivingAssist_SpeedLimitWarning.
     */
    virtual UsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute& getUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute() {
        return delegate_->getUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_DriverAttentionWarning.
     */
    virtual UsmDriverAssist_DriverAttentionWarningAttribute& getUsmDriverAssist_DriverAttentionWarningAttribute() {
        return delegate_->getUsmDriverAssist_DriverAttentionWarningAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_WarningTiming.
     */
    virtual UsmDriverAssist_WarningTimingAttribute& getUsmDriverAssist_WarningTimingAttribute() {
        return delegate_->getUsmDriverAssist_WarningTimingAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_WarningVolume.
     */
    virtual UsmDriverAssist_WarningVolumeAttribute& getUsmDriverAssist_WarningVolumeAttribute() {
        return delegate_->getUsmDriverAssist_WarningVolumeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_LaneSafety.
     */
    virtual UsmDriverAssist_LaneSafetyAttribute& getUsmDriverAssist_LaneSafetyAttribute() {
        return delegate_->getUsmDriverAssist_LaneSafetyAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_LaneSafety_Mode.
     */
    virtual UsmDriverAssist_LaneSafety_ModeAttribute& getUsmDriverAssist_LaneSafety_ModeAttribute() {
        return delegate_->getUsmDriverAssist_LaneSafety_ModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_ForwardSafety.
     */
    virtual UsmDriverAssist_ForwardSafetyAttribute& getUsmDriverAssist_ForwardSafetyAttribute() {
        return delegate_->getUsmDriverAssist_ForwardSafetyAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_BlindSpotSafety_SpotView.
     */
    virtual UsmDriverAssist_BlindSpotSafety_SpotViewAttribute& getUsmDriverAssist_BlindSpotSafety_SpotViewAttribute() {
        return delegate_->getUsmDriverAssist_BlindSpotSafety_SpotViewAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_BlindSpotSafety_SafetyExitAssist.
     */
    virtual UsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute& getUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute() {
        return delegate_->getUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_BlindSpotSafety_WarningOnly.
     */
    virtual UsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute& getUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute() {
        return delegate_->getUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafety.
     */
    virtual UsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute& getUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute() {
        return delegate_->getUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDoor_AutoLock.
     */
    virtual UsmDoor_AutoLockAttribute& getUsmDoor_AutoLockAttribute() {
        return delegate_->getUsmDoor_AutoLockAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDoor_AutoUnlock_KeyOrPower.
     */
    virtual UsmDoor_AutoUnlock_KeyOrPowerAttribute& getUsmDoor_AutoUnlock_KeyOrPowerAttribute() {
        return delegate_->getUsmDoor_AutoUnlock_KeyOrPowerAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDoor_AutoUnlock.
     */
    virtual UsmDoor_AutoUnlockAttribute& getUsmDoor_AutoUnlockAttribute() {
        return delegate_->getUsmDoor_AutoUnlockAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDoor_HornFeedback.
     */
    virtual UsmDoor_HornFeedbackAttribute& getUsmDoor_HornFeedbackAttribute() {
        return delegate_->getUsmDoor_HornFeedbackAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDoor_PowerTailgate.
     */
    virtual UsmDoor_PowerTailgateAttribute& getUsmDoor_PowerTailgateAttribute() {
        return delegate_->getUsmDoor_PowerTailgateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDoor_PowerTailgateSpeed.
     */
    virtual UsmDoor_PowerTailgateSpeedAttribute& getUsmDoor_PowerTailgateSpeedAttribute() {
        return delegate_->getUsmDoor_PowerTailgateSpeedAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmDoor_SmartTailgate.
     */
    virtual UsmDoor_SmartTailgateAttribute& getUsmDoor_SmartTailgateAttribute() {
        return delegate_->getUsmDoor_SmartTailgateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmLights_OneTouchTurnSignal.
     */
    virtual UsmLights_OneTouchTurnSignalAttribute& getUsmLights_OneTouchTurnSignalAttribute() {
        return delegate_->getUsmLights_OneTouchTurnSignalAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmLights_AmbientLight.
     */
    virtual UsmLights_AmbientLightAttribute& getUsmLights_AmbientLightAttribute() {
        return delegate_->getUsmLights_AmbientLightAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmLights_HeadlightDelay.
     */
    virtual UsmLights_HeadlightDelayAttribute& getUsmLights_HeadlightDelayAttribute() {
        return delegate_->getUsmLights_HeadlightDelayAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmLights_HighBeamAssist.
     */
    virtual UsmLights_HighBeamAssistAttribute& getUsmLights_HighBeamAssistAttribute() {
        return delegate_->getUsmLights_HighBeamAssistAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmSound_ClusterVoiceGuidanceVolume.
     */
    virtual UsmSound_ClusterVoiceGuidanceVolumeAttribute& getUsmSound_ClusterVoiceGuidanceVolumeAttribute() {
        return delegate_->getUsmSound_ClusterVoiceGuidanceVolumeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmSound_ParkAssistVolume.
     */
    virtual UsmSound_ParkAssistVolumeAttribute& getUsmSound_ParkAssistVolumeAttribute() {
        return delegate_->getUsmSound_ParkAssistVolumeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmSound_WelcomeSound.
     */
    virtual UsmSound_WelcomeSoundAttribute& getUsmSound_WelcomeSoundAttribute() {
        return delegate_->getUsmSound_WelcomeSoundAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmConvenience_SeatEasyAccess.
     */
    virtual UsmConvenience_SeatEasyAccessAttribute& getUsmConvenience_SeatEasyAccessAttribute() {
        return delegate_->getUsmConvenience_SeatEasyAccessAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmConvenience_WelcomeMirrorLight_Title.
     */
    virtual UsmConvenience_WelcomeMirrorLight_TitleAttribute& getUsmConvenience_WelcomeMirrorLight_TitleAttribute() {
        return delegate_->getUsmConvenience_WelcomeMirrorLight_TitleAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmConvenience_WelcomeMirrorLight_OnDoorUnlock.
     */
    virtual UsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute& getUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute() {
        return delegate_->getUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmConvenience_WelcomeMirrorLight_OnDriverApproach.
     */
    virtual UsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute& getUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute() {
        return delegate_->getUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmConvenience_MirrorAutoFolding.
     */
    virtual UsmConvenience_MirrorAutoFoldingAttribute& getUsmConvenience_MirrorAutoFoldingAttribute() {
        return delegate_->getUsmConvenience_MirrorAutoFoldingAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmConvenience_WirelessChargingSystem.
     */
    virtual UsmConvenience_WirelessChargingSystemAttribute& getUsmConvenience_WirelessChargingSystemAttribute() {
        return delegate_->getUsmConvenience_WirelessChargingSystemAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmConvenience_TrafficInformation.
     */
    virtual UsmConvenience_TrafficInformationAttribute& getUsmConvenience_TrafficInformationAttribute() {
        return delegate_->getUsmConvenience_TrafficInformationAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmConvenience_WipreLightsDisplay.
     */
    virtual UsmConvenience_WipreLightsDisplayAttribute& getUsmConvenience_WipreLightsDisplayAttribute() {
        return delegate_->getUsmConvenience_WipreLightsDisplayAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmConvenience_AutoRearWiperInR.
     */
    virtual UsmConvenience_AutoRearWiperInRAttribute& getUsmConvenience_AutoRearWiperInRAttribute() {
        return delegate_->getUsmConvenience_AutoRearWiperInRAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmConvenience_GearPositionPopup.
     */
    virtual UsmConvenience_GearPositionPopupAttribute& getUsmConvenience_GearPositionPopupAttribute() {
        return delegate_->getUsmConvenience_GearPositionPopupAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmConvenience_IcyRoadWarning.
     */
    virtual UsmConvenience_IcyRoadWarningAttribute& getUsmConvenience_IcyRoadWarningAttribute() {
        return delegate_->getUsmConvenience_IcyRoadWarningAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmServiceInterval_Mode.
     */
    virtual UsmServiceInterval_ModeAttribute& getUsmServiceInterval_ModeAttribute() {
        return delegate_->getUsmServiceInterval_ModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmServiceInterval_EnableServiceInterval.
     */
    virtual UsmServiceInterval_EnableServiceIntervalAttribute& getUsmServiceInterval_EnableServiceIntervalAttribute() {
        return delegate_->getUsmServiceInterval_EnableServiceIntervalAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmServiceInterval_Reset.
     */
    virtual UsmServiceInterval_ResetAttribute& getUsmServiceInterval_ResetAttribute() {
        return delegate_->getUsmServiceInterval_ResetAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmOther_FuelEconomyReset.
     */
    virtual UsmOther_FuelEconomyResetAttribute& getUsmOther_FuelEconomyResetAttribute() {
        return delegate_->getUsmOther_FuelEconomyResetAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmOther_FuelEconomyUnit.
     */
    virtual UsmOther_FuelEconomyUnitAttribute& getUsmOther_FuelEconomyUnitAttribute() {
        return delegate_->getUsmOther_FuelEconomyUnitAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmOther_TemperatureUnit.
     */
    virtual UsmOther_TemperatureUnitAttribute& getUsmOther_TemperatureUnitAttribute() {
        return delegate_->getUsmOther_TemperatureUnitAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmOther_TirePressureUnit.
     */
    virtual UsmOther_TirePressureUnitAttribute& getUsmOther_TirePressureUnitAttribute() {
        return delegate_->getUsmOther_TirePressureUnitAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmOther_SpeedUnit.
     */
    virtual UsmOther_SpeedUnitAttribute& getUsmOther_SpeedUnitAttribute() {
        return delegate_->getUsmOther_SpeedUnitAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmOther_TorqueUnit.
     */
    virtual UsmOther_TorqueUnitAttribute& getUsmOther_TorqueUnitAttribute() {
        return delegate_->getUsmOther_TorqueUnitAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmOther_TurboBoostPressureUnit.
     */
    virtual UsmOther_TurboBoostPressureUnitAttribute& getUsmOther_TurboBoostPressureUnitAttribute() {
        return delegate_->getUsmOther_TurboBoostPressureUnitAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmEcoVehicle_GreenZoneEVDrive.
     */
    virtual UsmEcoVehicle_GreenZoneEVDriveAttribute& getUsmEcoVehicle_GreenZoneEVDriveAttribute() {
        return delegate_->getUsmEcoVehicle_GreenZoneEVDriveAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmEcoVehicle_CoastingGuideEnable.
     */
    virtual UsmEcoVehicle_CoastingGuideEnableAttribute& getUsmEcoVehicle_CoastingGuideEnableAttribute() {
        return delegate_->getUsmEcoVehicle_CoastingGuideEnableAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmEcoVehicle_CoastingGuideSound.
     */
    virtual UsmEcoVehicle_CoastingGuideSoundAttribute& getUsmEcoVehicle_CoastingGuideSoundAttribute() {
        return delegate_->getUsmEcoVehicle_CoastingGuideSoundAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmEcoVehicle_StartCoasting.
     */
    virtual UsmEcoVehicle_StartCoastingAttribute& getUsmEcoVehicle_StartCoastingAttribute() {
        return delegate_->getUsmEcoVehicle_StartCoastingAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmEcoVehicle_ChargingConnectorLockingMode.
     */
    virtual UsmEcoVehicle_ChargingConnectorLockingModeAttribute& getUsmEcoVehicle_ChargingConnectorLockingModeAttribute() {
        return delegate_->getUsmEcoVehicle_ChargingConnectorLockingModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmEcoVehicle_ChargingConnectorCondition.
     */
    virtual UsmEcoVehicle_ChargingConnectorConditionAttribute& getUsmEcoVehicle_ChargingConnectorConditionAttribute() {
        return delegate_->getUsmEcoVehicle_ChargingConnectorConditionAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmEcoVehicle_AuxiliaryBatterySaverPlus.
     */
    virtual UsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute& getUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute() {
        return delegate_->getUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmLanguage.
     */
    virtual UsmLanguageAttribute& getUsmLanguageAttribute() {
        return delegate_->getUsmLanguageAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmService_Reminder.
     */
    virtual UsmService_ReminderAttribute& getUsmService_ReminderAttribute() {
        return delegate_->getUsmService_ReminderAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute UsmEcoVehicle_VolumeControlFunctionForVESS.
     */
    virtual UsmEcoVehicle_VolumeControlFunctionForVESSAttribute& getUsmEcoVehicle_VolumeControlFunctionForVESSAttribute() {
        return delegate_->getUsmEcoVehicle_VolumeControlFunctionForVESSAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute lastTabInfo.
     */
    virtual LastTabInfoAttribute& getLastTabInfoAttribute() {
        return delegate_->getLastTabInfoAttribute();
    }

    /**
     * Returns the wrapper class that provides access to the broadcast NotifySteerWheelKey.
     */
    virtual NotifySteerWheelKeyEvent& getNotifySteerWheelKeyEvent() {
        return delegate_->getNotifySteerWheelKeyEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast NotifyIGNState.
     */
    virtual NotifyIGNStateEvent& getNotifyIGNStateEvent() {
        return delegate_->getNotifyIGNStateEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast NotifyContentsGearState.
     */
    virtual NotifyContentsGearStateEvent& getNotifyContentsGearStateEvent() {
        return delegate_->getNotifyContentsGearStateEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast NotifyEventContents.
     */
    virtual NotifyEventContentsEvent& getNotifyEventContentsEvent() {
        return delegate_->getNotifyEventContentsEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast NotifyMasterWarnInfo.
     */
    virtual NotifyMasterWarnInfoEvent& getNotifyMasterWarnInfoEvent() {
        return delegate_->getNotifyMasterWarnInfoEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast NotifyMasterWarnCmd.
     */
    virtual NotifyMasterWarnCmdEvent& getNotifyMasterWarnCmdEvent() {
        return delegate_->getNotifyMasterWarnCmdEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast NotifySound.
     */
    virtual NotifySoundEvent& getNotifySoundEvent() {
        return delegate_->getNotifySoundEvent();
    }

    /**
     * Calls Command with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Command(const uint8_t &_id, const ::v1::proj::dcluster::McuManager::McuManagerTypes::CmdData &_data, CommonAPI::CallStatus &_internalCallStatus, bool &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Command with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> CommandAsync(const uint8_t &_id, const ::v1::proj::dcluster::McuManager::McuManagerTypes::CmdData &_data, CommandAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< McuManagerProxyBase> delegate_;
};

typedef McuManagerProxy<> McuManagerProxyDefault;

namespace McuManagerExtensions {
    template <template <typename > class _ExtensionType>
    class MainContentsDisplayControlAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::MainContentsDisplayControlAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::MainContentsDisplayControlAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        MainContentsDisplayControlAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getMainContentsDisplayControlAttribute()) {
        }
    
        inline extension_type& getMainContentsDisplayControlAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DrivingStateAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::DrivingStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::DrivingStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DrivingStateAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getDrivingStateAttribute()) {
        }
    
        inline extension_type& getDrivingStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DriveModeAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::DriveModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::DriveModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DriveModeAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getDriveModeAttribute()) {
        }
    
        inline extension_type& getDriveModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class VariantAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::VariantAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::VariantAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        VariantAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getVariantAttribute()) {
        }
    
        inline extension_type& getVariantAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class EOLAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::EOLAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::EOLAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        EOLAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getEOLAttribute()) {
        }
    
        inline extension_type& getEOLAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class SWVariantAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::SWVariantAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::SWVariantAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        SWVariantAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getSWVariantAttribute()) {
        }
    
        inline extension_type& getSWVariantAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class IGN1StateAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::IGN1StateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::IGN1StateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        IGN1StateAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getIGN1StateAttribute()) {
        }
    
        inline extension_type& getIGN1StateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class IGN3StateAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::IGN3StateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::IGN3StateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        IGN3StateAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getIGN3StateAttribute()) {
        }
    
        inline extension_type& getIGN3StateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class SpeedoUnitAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::SpeedoUnitAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::SpeedoUnitAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        SpeedoUnitAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getSpeedoUnitAttribute()) {
        }
    
        inline extension_type& getSpeedoUnitAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TripDriveModeAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TripDriveModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TripDriveModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TripDriveModeAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTripDriveModeAttribute()) {
        }
    
        inline extension_type& getTripDriveModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TripDTEAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TripDTEAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TripDTEAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TripDTEAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTripDTEAttribute()) {
        }
    
        inline extension_type& getTripDTEAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TripFuelEconomyAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TripFuelEconomyAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TripFuelEconomyAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TripFuelEconomyAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTripFuelEconomyAttribute()) {
        }
    
        inline extension_type& getTripFuelEconomyAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TripAccumulatedAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TripAccumulatedAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TripAccumulatedAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TripAccumulatedAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTripAccumulatedAttribute()) {
        }
    
        inline extension_type& getTripAccumulatedAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TripDriveInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TripDriveInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TripDriveInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TripDriveInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTripDriveInfoAttribute()) {
        }
    
        inline extension_type& getTripDriveInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TripDigitalSpeedMeterAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TripDigitalSpeedMeterAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TripDigitalSpeedMeterAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TripDigitalSpeedMeterAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTripDigitalSpeedMeterAttribute()) {
        }
    
        inline extension_type& getTripDigitalSpeedMeterAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TripPowerFlowDiagramAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TripPowerFlowDiagramAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TripPowerFlowDiagramAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TripPowerFlowDiagramAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTripPowerFlowDiagramAttribute()) {
        }
    
        inline extension_type& getTripPowerFlowDiagramAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TripUREALevelAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TripUREALevelAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TripUREALevelAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TripUREALevelAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTripUREALevelAttribute()) {
        }
    
        inline extension_type& getTripUREALevelAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TripTransmissionTempAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TripTransmissionTempAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TripTransmissionTempAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TripTransmissionTempAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTripTransmissionTempAttribute()) {
        }
    
        inline extension_type& getTripTransmissionTempAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TripEngineCoolantTempAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TripEngineCoolantTempAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TripEngineCoolantTempAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TripEngineCoolantTempAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTripEngineCoolantTempAttribute()) {
        }
    
        inline extension_type& getTripEngineCoolantTempAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class EnergyFlowAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::EnergyFlowAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::EnergyFlowAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        EnergyFlowAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getEnergyFlowAttribute()) {
        }
    
        inline extension_type& getEnergyFlowAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class MyDrivingModeAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::MyDrivingModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::MyDrivingModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        MyDrivingModeAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getMyDrivingModeAttribute()) {
        }
    
        inline extension_type& getMyDrivingModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTDisplayTypeAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTDisplayTypeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTDisplayTypeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTDisplayTypeAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTDisplayTypeAttribute()) {
        }
    
        inline extension_type& getTBTDisplayTypeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTDisplayTollgateAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTDisplayTollgateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTDisplayTollgateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTDisplayTollgateAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTDisplayTollgateAttribute()) {
        }
    
        inline extension_type& getTBTDisplayTollgateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTPreliminaryInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTPreliminaryInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTPreliminaryInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTPreliminaryInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTPreliminaryInfoAttribute()) {
        }
    
        inline extension_type& getTBTPreliminaryInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTDestInfoPageStateAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTDestInfoPageStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTDestInfoPageStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTDestInfoPageStateAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTDestInfoPageStateAttribute()) {
        }
    
        inline extension_type& getTBTDestInfoPageStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTPointTypeAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTPointTypeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTPointTypeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTPointTypeAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTPointTypeAttribute()) {
        }
    
        inline extension_type& getTBTPointTypeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTDirectionAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTDirectionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTDirectionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTDirectionAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTDirectionAttribute()) {
        }
    
        inline extension_type& getTBTDirectionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTRoadDisplayAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTRoadDisplayAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTRoadDisplayAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTRoadDisplayAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTRoadDisplayAttribute()) {
        }
    
        inline extension_type& getTBTRoadDisplayAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTSideRoadDisplayAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTSideRoadDisplayAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTSideRoadDisplayAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTSideRoadDisplayAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTSideRoadDisplayAttribute()) {
        }
    
        inline extension_type& getTBTSideRoadDisplayAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTDistanceToDestinationAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTDistanceToDestinationAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTDistanceToDestinationAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTDistanceToDestinationAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTDistanceToDestinationAttribute()) {
        }
    
        inline extension_type& getTBTDistanceToDestinationAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTDistanceUntilTurnAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTDistanceUntilTurnAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTDistanceUntilTurnAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTDistanceUntilTurnAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTDistanceUntilTurnAttribute()) {
        }
    
        inline extension_type& getTBTDistanceUntilTurnAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTExpectedDestTimeAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTExpectedDestTimeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTExpectedDestTimeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTExpectedDestTimeAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTExpectedDestTimeAttribute()) {
        }
    
        inline extension_type& getTBTExpectedDestTimeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTExpectedRemainTimeAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTExpectedRemainTimeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTExpectedRemainTimeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTExpectedRemainTimeAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTExpectedRemainTimeAttribute()) {
        }
    
        inline extension_type& getTBTExpectedRemainTimeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTGuideTPInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTGuideTPInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTGuideTPInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTGuideTPInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTGuideTPInfoAttribute()) {
        }
    
        inline extension_type& getTBTGuideTPInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTDestTPInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTDestTPInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTDestTPInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTDestTPInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTDestTPInfoAttribute()) {
        }
    
        inline extension_type& getTBTDestTPInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTViaPoint1TPInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTViaPoint1TPInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTViaPoint1TPInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTViaPoint1TPInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTViaPoint1TPInfoAttribute()) {
        }
    
        inline extension_type& getTBTViaPoint1TPInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTViaPoint2TPInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTViaPoint2TPInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTViaPoint2TPInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTViaPoint2TPInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTViaPoint2TPInfoAttribute()) {
        }
    
        inline extension_type& getTBTViaPoint2TPInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTViaPoint3TPInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTViaPoint3TPInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTViaPoint3TPInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTViaPoint3TPInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTViaPoint3TPInfoAttribute()) {
        }
    
        inline extension_type& getTBTViaPoint3TPInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBTViaPoint4TPInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::TBTViaPoint4TPInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::TBTViaPoint4TPInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBTViaPoint4TPInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getTBTViaPoint4TPInfoAttribute()) {
        }
    
        inline extension_type& getTBTViaPoint4TPInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DriveAssistCruiseControlTTCAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::DriveAssistCruiseControlTTCAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::DriveAssistCruiseControlTTCAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DriveAssistCruiseControlTTCAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getDriveAssistCruiseControlTTCAttribute()) {
        }
    
        inline extension_type& getDriveAssistCruiseControlTTCAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DriveAssistCruiseControlRealAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::DriveAssistCruiseControlRealAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::DriveAssistCruiseControlRealAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DriveAssistCruiseControlRealAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getDriveAssistCruiseControlRealAttribute()) {
        }
    
        inline extension_type& getDriveAssistCruiseControlRealAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DriveAssistLaneAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::DriveAssistLaneAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::DriveAssistLaneAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DriveAssistLaneAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getDriveAssistLaneAttribute()) {
        }
    
        inline extension_type& getDriveAssistLaneAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DriveAssistDAWAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::DriveAssistDAWAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::DriveAssistDAWAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DriveAssistDAWAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getDriveAssistDAWAttribute()) {
        }
    
        inline extension_type& getDriveAssistDAWAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DriveAssistISLWAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::DriveAssistISLWAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::DriveAssistISLWAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DriveAssistISLWAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getDriveAssistISLWAttribute()) {
        }
    
        inline extension_type& getDriveAssistISLWAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DriveAssistAWDAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::DriveAssistAWDAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::DriveAssistAWDAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DriveAssistAWDAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getDriveAssistAWDAttribute()) {
        }
    
        inline extension_type& getDriveAssistAWDAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DriveAssistTPMSAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::DriveAssistTPMSAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::DriveAssistTPMSAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DriveAssistTPMSAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getDriveAssistTPMSAttribute()) {
        }
    
        inline extension_type& getDriveAssistTPMSAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AdasInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AdasInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AdasInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AdasInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAdasInfoAttribute()) {
        }
    
        inline extension_type& getAdasInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ContentsGearAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::ContentsGearAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::ContentsGearAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ContentsGearAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getContentsGearAttribute()) {
        }
    
        inline extension_type& getContentsGearAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ContentsCCAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::ContentsCCAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::ContentsCCAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ContentsCCAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getContentsCCAttribute()) {
        }
    
        inline extension_type& getContentsCCAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ContentsSCCAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::ContentsSCCAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::ContentsSCCAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ContentsSCCAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getContentsSCCAttribute()) {
        }
    
        inline extension_type& getContentsSCCAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ContentsCoastingAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::ContentsCoastingAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::ContentsCoastingAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ContentsCoastingAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getContentsCoastingAttribute()) {
        }
    
        inline extension_type& getContentsCoastingAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ContentsDISAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::ContentsDISAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::ContentsDISAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ContentsDISAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getContentsDISAttribute()) {
        }
    
        inline extension_type& getContentsDISAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ContentsDTEInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::ContentsDTEInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::ContentsDTEInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ContentsDTEInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getContentsDTEInfoAttribute()) {
        }
    
        inline extension_type& getContentsDTEInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ContentsISLWAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::ContentsISLWAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::ContentsISLWAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ContentsISLWAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getContentsISLWAttribute()) {
        }
    
        inline extension_type& getContentsISLWAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ContentsOATAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::ContentsOATAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::ContentsOATAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ContentsOATAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getContentsOATAttribute()) {
        }
    
        inline extension_type& getContentsOATAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ContentsODOMeterAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::ContentsODOMeterAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::ContentsODOMeterAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ContentsODOMeterAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getContentsODOMeterAttribute()) {
        }
    
        inline extension_type& getContentsODOMeterAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class EcoPowerDisplayInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::EcoPowerDisplayInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::EcoPowerDisplayInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        EcoPowerDisplayInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getEcoPowerDisplayInfoAttribute()) {
        }
    
        inline extension_type& getEcoPowerDisplayInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ContentsRSBRAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::ContentsRSBRAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::ContentsRSBRAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ContentsRSBRAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getContentsRSBRAttribute()) {
        }
    
        inline extension_type& getContentsRSBRAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ContentsSpeedLimitAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::ContentsSpeedLimitAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::ContentsSpeedLimitAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ContentsSpeedLimitAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getContentsSpeedLimitAttribute()) {
        }
    
        inline extension_type& getContentsSpeedLimitAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class MasterWarnCmdAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::MasterWarnCmdAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::MasterWarnCmdAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        MasterWarnCmdAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getMasterWarnCmdAttribute()) {
        }
    
        inline extension_type& getMasterWarnCmdAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AvTpAMFMInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AvTpAMFMInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AvTpAMFMInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AvTpAMFMInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAvTpAMFMInfoAttribute()) {
        }
    
        inline extension_type& getAvTpAMFMInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AvTpXMInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AvTpXMInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AvTpXMInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AvTpXMInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAvTpXMInfoAttribute()) {
        }
    
        inline extension_type& getAvTpXMInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AvTpDABInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AvTpDABInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AvTpDABInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AvTpDABInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAvTpDABInfoAttribute()) {
        }
    
        inline extension_type& getAvTpDABInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AvTpDMBInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AvTpDMBInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AvTpDMBInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AvTpDMBInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAvTpDMBInfoAttribute()) {
        }
    
        inline extension_type& getAvTpDMBInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AvTpJukeBoxInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AvTpJukeBoxInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AvTpJukeBoxInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AvTpJukeBoxInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAvTpJukeBoxInfoAttribute()) {
        }
    
        inline extension_type& getAvTpJukeBoxInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AvTpIpodInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AvTpIpodInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AvTpIpodInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AvTpIpodInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAvTpIpodInfoAttribute()) {
        }
    
        inline extension_type& getAvTpIpodInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AvTpUSBInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AvTpUSBInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AvTpUSBInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AvTpUSBInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAvTpUSBInfoAttribute()) {
        }
    
        inline extension_type& getAvTpUSBInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AvTpBlueToothInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AvTpBlueToothInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AvTpBlueToothInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AvTpBlueToothInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAvTpBlueToothInfoAttribute()) {
        }
    
        inline extension_type& getAvTpBlueToothInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AvTpAppleCarPlayInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AvTpAppleCarPlayInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AvTpAppleCarPlayInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AvTpAppleCarPlayInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAvTpAppleCarPlayInfoAttribute()) {
        }
    
        inline extension_type& getAvTpAppleCarPlayInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AvTpAndroidAutoInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AvTpAndroidAutoInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AvTpAndroidAutoInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AvTpAndroidAutoInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAvTpAndroidAutoInfoAttribute()) {
        }
    
        inline extension_type& getAvTpAndroidAutoInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AvTpIboxInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AvTpIboxInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AvTpIboxInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AvTpIboxInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAvTpIboxInfoAttribute()) {
        }
    
        inline extension_type& getAvTpIboxInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AvTpCDInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AvTpCDInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AvTpCDInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AvTpCDInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAvTpCDInfoAttribute()) {
        }
    
        inline extension_type& getAvTpCDInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AvTpBaiduMInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::AvTpBaiduMInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::AvTpBaiduMInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AvTpBaiduMInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getAvTpBaiduMInfoAttribute()) {
        }
    
        inline extension_type& getAvTpBaiduMInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class EventContentsFullAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::EventContentsFullAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::EventContentsFullAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        EventContentsFullAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getEventContentsFullAttribute()) {
        }
    
        inline extension_type& getEventContentsFullAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class EventContentsMiniAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::EventContentsMiniAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::EventContentsMiniAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        EventContentsMiniAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getEventContentsMiniAttribute()) {
        }
    
        inline extension_type& getEventContentsMiniAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class EventAccessoryAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::EventAccessoryAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::EventAccessoryAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        EventAccessoryAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getEventAccessoryAttribute()) {
        }
    
        inline extension_type& getEventAccessoryAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PowerTailGateWarnStateAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::PowerTailGateWarnStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::PowerTailGateWarnStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        PowerTailGateWarnStateAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getPowerTailGateWarnStateAttribute()) {
        }
    
        inline extension_type& getPowerTailGateWarnStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DisplayLanguageAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::DisplayLanguageAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::DisplayLanguageAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DisplayLanguageAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getDisplayLanguageAttribute()) {
        }
    
        inline extension_type& getDisplayLanguageAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_SccReactionAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_SccReactionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_SccReactionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_SccReactionAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_SccReactionAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_SccReactionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_DriverAttentionWarningAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_DriverAttentionWarningAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_DriverAttentionWarningAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_DriverAttentionWarningAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_DriverAttentionWarningAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_DriverAttentionWarningAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_WarningTimingAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_WarningTimingAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_WarningTimingAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_WarningTimingAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_WarningTimingAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_WarningTimingAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_WarningVolumeAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_WarningVolumeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_WarningVolumeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_WarningVolumeAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_WarningVolumeAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_WarningVolumeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_LaneSafetyAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_LaneSafetyAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_LaneSafetyAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_LaneSafetyAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_LaneSafetyAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_LaneSafetyAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_LaneSafety_ModeAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_LaneSafety_ModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_LaneSafety_ModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_LaneSafety_ModeAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_LaneSafety_ModeAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_LaneSafety_ModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_ForwardSafetyAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_ForwardSafetyAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_ForwardSafetyAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_ForwardSafetyAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_ForwardSafetyAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_ForwardSafetyAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_BlindSpotSafety_SpotViewAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_BlindSpotSafety_SpotViewAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_BlindSpotSafety_SpotViewAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_BlindSpotSafety_SpotViewAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_BlindSpotSafety_SpotViewAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_BlindSpotSafety_SpotViewAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_BlindSpotSafety_WarningOnlyAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_BlindSpotSafety_WarningOnlyAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_BlindSpotSafety_WarningOnlyAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute()) {
        }
    
        inline extension_type& getUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDoor_AutoLockAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDoor_AutoLockAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDoor_AutoLockAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDoor_AutoLockAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDoor_AutoLockAttribute()) {
        }
    
        inline extension_type& getUsmDoor_AutoLockAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDoor_AutoUnlock_KeyOrPowerAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDoor_AutoUnlock_KeyOrPowerAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDoor_AutoUnlock_KeyOrPowerAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDoor_AutoUnlock_KeyOrPowerAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDoor_AutoUnlock_KeyOrPowerAttribute()) {
        }
    
        inline extension_type& getUsmDoor_AutoUnlock_KeyOrPowerAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDoor_AutoUnlockAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDoor_AutoUnlockAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDoor_AutoUnlockAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDoor_AutoUnlockAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDoor_AutoUnlockAttribute()) {
        }
    
        inline extension_type& getUsmDoor_AutoUnlockAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDoor_HornFeedbackAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDoor_HornFeedbackAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDoor_HornFeedbackAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDoor_HornFeedbackAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDoor_HornFeedbackAttribute()) {
        }
    
        inline extension_type& getUsmDoor_HornFeedbackAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDoor_PowerTailgateAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDoor_PowerTailgateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDoor_PowerTailgateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDoor_PowerTailgateAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDoor_PowerTailgateAttribute()) {
        }
    
        inline extension_type& getUsmDoor_PowerTailgateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDoor_PowerTailgateSpeedAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDoor_PowerTailgateSpeedAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDoor_PowerTailgateSpeedAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDoor_PowerTailgateSpeedAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDoor_PowerTailgateSpeedAttribute()) {
        }
    
        inline extension_type& getUsmDoor_PowerTailgateSpeedAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmDoor_SmartTailgateAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmDoor_SmartTailgateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmDoor_SmartTailgateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmDoor_SmartTailgateAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmDoor_SmartTailgateAttribute()) {
        }
    
        inline extension_type& getUsmDoor_SmartTailgateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmLights_OneTouchTurnSignalAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmLights_OneTouchTurnSignalAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmLights_OneTouchTurnSignalAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmLights_OneTouchTurnSignalAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmLights_OneTouchTurnSignalAttribute()) {
        }
    
        inline extension_type& getUsmLights_OneTouchTurnSignalAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmLights_AmbientLightAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmLights_AmbientLightAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmLights_AmbientLightAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmLights_AmbientLightAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmLights_AmbientLightAttribute()) {
        }
    
        inline extension_type& getUsmLights_AmbientLightAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmLights_HeadlightDelayAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmLights_HeadlightDelayAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmLights_HeadlightDelayAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmLights_HeadlightDelayAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmLights_HeadlightDelayAttribute()) {
        }
    
        inline extension_type& getUsmLights_HeadlightDelayAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmLights_HighBeamAssistAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmLights_HighBeamAssistAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmLights_HighBeamAssistAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmLights_HighBeamAssistAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmLights_HighBeamAssistAttribute()) {
        }
    
        inline extension_type& getUsmLights_HighBeamAssistAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmSound_ClusterVoiceGuidanceVolumeAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmSound_ClusterVoiceGuidanceVolumeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmSound_ClusterVoiceGuidanceVolumeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmSound_ClusterVoiceGuidanceVolumeAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmSound_ClusterVoiceGuidanceVolumeAttribute()) {
        }
    
        inline extension_type& getUsmSound_ClusterVoiceGuidanceVolumeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmSound_ParkAssistVolumeAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmSound_ParkAssistVolumeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmSound_ParkAssistVolumeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmSound_ParkAssistVolumeAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmSound_ParkAssistVolumeAttribute()) {
        }
    
        inline extension_type& getUsmSound_ParkAssistVolumeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmSound_WelcomeSoundAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmSound_WelcomeSoundAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmSound_WelcomeSoundAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmSound_WelcomeSoundAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmSound_WelcomeSoundAttribute()) {
        }
    
        inline extension_type& getUsmSound_WelcomeSoundAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmConvenience_SeatEasyAccessAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmConvenience_SeatEasyAccessAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmConvenience_SeatEasyAccessAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmConvenience_SeatEasyAccessAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmConvenience_SeatEasyAccessAttribute()) {
        }
    
        inline extension_type& getUsmConvenience_SeatEasyAccessAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmConvenience_WelcomeMirrorLight_TitleAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmConvenience_WelcomeMirrorLight_TitleAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmConvenience_WelcomeMirrorLight_TitleAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmConvenience_WelcomeMirrorLight_TitleAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmConvenience_WelcomeMirrorLight_TitleAttribute()) {
        }
    
        inline extension_type& getUsmConvenience_WelcomeMirrorLight_TitleAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute()) {
        }
    
        inline extension_type& getUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute()) {
        }
    
        inline extension_type& getUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmConvenience_MirrorAutoFoldingAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmConvenience_MirrorAutoFoldingAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmConvenience_MirrorAutoFoldingAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmConvenience_MirrorAutoFoldingAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmConvenience_MirrorAutoFoldingAttribute()) {
        }
    
        inline extension_type& getUsmConvenience_MirrorAutoFoldingAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmConvenience_WirelessChargingSystemAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmConvenience_WirelessChargingSystemAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmConvenience_WirelessChargingSystemAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmConvenience_WirelessChargingSystemAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmConvenience_WirelessChargingSystemAttribute()) {
        }
    
        inline extension_type& getUsmConvenience_WirelessChargingSystemAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmConvenience_TrafficInformationAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmConvenience_TrafficInformationAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmConvenience_TrafficInformationAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmConvenience_TrafficInformationAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmConvenience_TrafficInformationAttribute()) {
        }
    
        inline extension_type& getUsmConvenience_TrafficInformationAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmConvenience_WipreLightsDisplayAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmConvenience_WipreLightsDisplayAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmConvenience_WipreLightsDisplayAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmConvenience_WipreLightsDisplayAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmConvenience_WipreLightsDisplayAttribute()) {
        }
    
        inline extension_type& getUsmConvenience_WipreLightsDisplayAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmConvenience_AutoRearWiperInRAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmConvenience_AutoRearWiperInRAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmConvenience_AutoRearWiperInRAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmConvenience_AutoRearWiperInRAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmConvenience_AutoRearWiperInRAttribute()) {
        }
    
        inline extension_type& getUsmConvenience_AutoRearWiperInRAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmConvenience_GearPositionPopupAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmConvenience_GearPositionPopupAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmConvenience_GearPositionPopupAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmConvenience_GearPositionPopupAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmConvenience_GearPositionPopupAttribute()) {
        }
    
        inline extension_type& getUsmConvenience_GearPositionPopupAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmConvenience_IcyRoadWarningAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmConvenience_IcyRoadWarningAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmConvenience_IcyRoadWarningAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmConvenience_IcyRoadWarningAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmConvenience_IcyRoadWarningAttribute()) {
        }
    
        inline extension_type& getUsmConvenience_IcyRoadWarningAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmServiceInterval_ModeAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmServiceInterval_ModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmServiceInterval_ModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmServiceInterval_ModeAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmServiceInterval_ModeAttribute()) {
        }
    
        inline extension_type& getUsmServiceInterval_ModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmServiceInterval_EnableServiceIntervalAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmServiceInterval_EnableServiceIntervalAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmServiceInterval_EnableServiceIntervalAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmServiceInterval_EnableServiceIntervalAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmServiceInterval_EnableServiceIntervalAttribute()) {
        }
    
        inline extension_type& getUsmServiceInterval_EnableServiceIntervalAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmServiceInterval_ResetAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmServiceInterval_ResetAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmServiceInterval_ResetAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmServiceInterval_ResetAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmServiceInterval_ResetAttribute()) {
        }
    
        inline extension_type& getUsmServiceInterval_ResetAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmOther_FuelEconomyResetAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmOther_FuelEconomyResetAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmOther_FuelEconomyResetAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmOther_FuelEconomyResetAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmOther_FuelEconomyResetAttribute()) {
        }
    
        inline extension_type& getUsmOther_FuelEconomyResetAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmOther_FuelEconomyUnitAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmOther_FuelEconomyUnitAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmOther_FuelEconomyUnitAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmOther_FuelEconomyUnitAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmOther_FuelEconomyUnitAttribute()) {
        }
    
        inline extension_type& getUsmOther_FuelEconomyUnitAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmOther_TemperatureUnitAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmOther_TemperatureUnitAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmOther_TemperatureUnitAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmOther_TemperatureUnitAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmOther_TemperatureUnitAttribute()) {
        }
    
        inline extension_type& getUsmOther_TemperatureUnitAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmOther_TirePressureUnitAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmOther_TirePressureUnitAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmOther_TirePressureUnitAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmOther_TirePressureUnitAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmOther_TirePressureUnitAttribute()) {
        }
    
        inline extension_type& getUsmOther_TirePressureUnitAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmOther_SpeedUnitAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmOther_SpeedUnitAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmOther_SpeedUnitAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmOther_SpeedUnitAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmOther_SpeedUnitAttribute()) {
        }
    
        inline extension_type& getUsmOther_SpeedUnitAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmOther_TorqueUnitAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmOther_TorqueUnitAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmOther_TorqueUnitAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmOther_TorqueUnitAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmOther_TorqueUnitAttribute()) {
        }
    
        inline extension_type& getUsmOther_TorqueUnitAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmOther_TurboBoostPressureUnitAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmOther_TurboBoostPressureUnitAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmOther_TurboBoostPressureUnitAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmOther_TurboBoostPressureUnitAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmOther_TurboBoostPressureUnitAttribute()) {
        }
    
        inline extension_type& getUsmOther_TurboBoostPressureUnitAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmEcoVehicle_GreenZoneEVDriveAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmEcoVehicle_GreenZoneEVDriveAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmEcoVehicle_GreenZoneEVDriveAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmEcoVehicle_GreenZoneEVDriveAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmEcoVehicle_GreenZoneEVDriveAttribute()) {
        }
    
        inline extension_type& getUsmEcoVehicle_GreenZoneEVDriveAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmEcoVehicle_CoastingGuideEnableAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmEcoVehicle_CoastingGuideEnableAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmEcoVehicle_CoastingGuideEnableAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmEcoVehicle_CoastingGuideEnableAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmEcoVehicle_CoastingGuideEnableAttribute()) {
        }
    
        inline extension_type& getUsmEcoVehicle_CoastingGuideEnableAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmEcoVehicle_CoastingGuideSoundAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmEcoVehicle_CoastingGuideSoundAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmEcoVehicle_CoastingGuideSoundAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmEcoVehicle_CoastingGuideSoundAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmEcoVehicle_CoastingGuideSoundAttribute()) {
        }
    
        inline extension_type& getUsmEcoVehicle_CoastingGuideSoundAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmEcoVehicle_StartCoastingAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmEcoVehicle_StartCoastingAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmEcoVehicle_StartCoastingAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmEcoVehicle_StartCoastingAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmEcoVehicle_StartCoastingAttribute()) {
        }
    
        inline extension_type& getUsmEcoVehicle_StartCoastingAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmEcoVehicle_ChargingConnectorLockingModeAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmEcoVehicle_ChargingConnectorLockingModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmEcoVehicle_ChargingConnectorLockingModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmEcoVehicle_ChargingConnectorLockingModeAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmEcoVehicle_ChargingConnectorLockingModeAttribute()) {
        }
    
        inline extension_type& getUsmEcoVehicle_ChargingConnectorLockingModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmEcoVehicle_ChargingConnectorConditionAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmEcoVehicle_ChargingConnectorConditionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmEcoVehicle_ChargingConnectorConditionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmEcoVehicle_ChargingConnectorConditionAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmEcoVehicle_ChargingConnectorConditionAttribute()) {
        }
    
        inline extension_type& getUsmEcoVehicle_ChargingConnectorConditionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmEcoVehicle_AuxiliaryBatterySaverPlusAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmEcoVehicle_AuxiliaryBatterySaverPlusAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute()) {
        }
    
        inline extension_type& getUsmEcoVehicle_AuxiliaryBatterySaverPlusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmLanguageAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmLanguageAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmLanguageAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmLanguageAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmLanguageAttribute()) {
        }
    
        inline extension_type& getUsmLanguageAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmService_ReminderAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmService_ReminderAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmService_ReminderAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmService_ReminderAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmService_ReminderAttribute()) {
        }
    
        inline extension_type& getUsmService_ReminderAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class UsmEcoVehicle_VolumeControlFunctionForVESSAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::UsmEcoVehicle_VolumeControlFunctionForVESSAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::UsmEcoVehicle_VolumeControlFunctionForVESSAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        UsmEcoVehicle_VolumeControlFunctionForVESSAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getUsmEcoVehicle_VolumeControlFunctionForVESSAttribute()) {
        }
    
        inline extension_type& getUsmEcoVehicle_VolumeControlFunctionForVESSAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class LastTabInfoAttributeExtension {
     public:
        typedef _ExtensionType< McuManagerProxyBase::LastTabInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< McuManagerProxyBase::LastTabInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        LastTabInfoAttributeExtension(McuManagerProxyBase& proxy): attributeExtension_(proxy.getLastTabInfoAttribute()) {
        }
    
        inline extension_type& getLastTabInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace McuManagerExtensions

//
// McuManagerProxy Implementation
//
template <typename ... _AttributeExtensions>
McuManagerProxy<_AttributeExtensions...>::McuManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< McuManagerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< McuManagerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
McuManagerProxy<_AttributeExtensions...>::~McuManagerProxy() {
}

template <typename ... _AttributeExtensions>
void McuManagerProxy<_AttributeExtensions...>::Command(const uint8_t &_id, const ::v1::proj::dcluster::McuManager::McuManagerTypes::CmdData &_data, CommonAPI::CallStatus &_internalCallStatus, bool &_result, const CommonAPI::CallInfo *_info) {
    delegate_->Command(_id, _data, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> McuManagerProxy<_AttributeExtensions...>::CommandAsync(const uint8_t &_id, const ::v1::proj::dcluster::McuManager::McuManagerTypes::CmdData &_data, CommandAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->CommandAsync(_id, _data, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &McuManagerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool McuManagerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool McuManagerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& McuManagerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& McuManagerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace McuManager
} // namespace dcluster
} // namespace proj
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::proj::dcluster::McuManager::McuManagerProxy,
    _AttributeExtension> {
    typedef typename ::v1::proj::dcluster::McuManager::McuManagerProxy<
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::MainContentsDisplayControlAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::DrivingStateAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::DriveModeAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::VariantAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::EOLAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::SWVariantAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::IGN1StateAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::IGN3StateAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::SpeedoUnitAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TripDriveModeAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TripDTEAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TripFuelEconomyAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TripAccumulatedAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TripDriveInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TripDigitalSpeedMeterAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TripPowerFlowDiagramAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TripUREALevelAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TripTransmissionTempAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TripEngineCoolantTempAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::EnergyFlowAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::MyDrivingModeAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTDisplayTypeAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTDisplayTollgateAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTPreliminaryInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTDestInfoPageStateAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTPointTypeAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTDirectionAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTRoadDisplayAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTSideRoadDisplayAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTDistanceToDestinationAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTDistanceUntilTurnAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTExpectedDestTimeAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTExpectedRemainTimeAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTGuideTPInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTDestTPInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTViaPoint1TPInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTViaPoint2TPInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTViaPoint3TPInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::TBTViaPoint4TPInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::DriveAssistCruiseControlTTCAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::DriveAssistCruiseControlRealAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::DriveAssistLaneAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::DriveAssistDAWAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::DriveAssistISLWAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::DriveAssistAWDAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::DriveAssistTPMSAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AdasInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::ContentsGearAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::ContentsCCAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::ContentsSCCAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::ContentsCoastingAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::ContentsDISAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::ContentsDTEInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::ContentsISLWAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::ContentsOATAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::ContentsODOMeterAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::EcoPowerDisplayInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::ContentsRSBRAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::ContentsSpeedLimitAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::MasterWarnCmdAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AvTpAMFMInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AvTpXMInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AvTpDABInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AvTpDMBInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AvTpJukeBoxInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AvTpIpodInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AvTpUSBInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AvTpBlueToothInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AvTpAppleCarPlayInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AvTpAndroidAutoInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AvTpIboxInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AvTpCDInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::AvTpBaiduMInfoAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::EventContentsFullAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::EventContentsMiniAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::EventAccessoryAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::PowerTailGateWarnStateAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::DisplayLanguageAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_SccReactionAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_DriverAttentionWarningAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_WarningTimingAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_WarningVolumeAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_LaneSafetyAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_LaneSafety_ModeAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_ForwardSafetyAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_BlindSpotSafety_SpotViewAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_BlindSpotSafety_WarningOnlyAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDoor_AutoLockAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDoor_AutoUnlock_KeyOrPowerAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDoor_AutoUnlockAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDoor_HornFeedbackAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDoor_PowerTailgateAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDoor_PowerTailgateSpeedAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmDoor_SmartTailgateAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmLights_OneTouchTurnSignalAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmLights_AmbientLightAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmLights_HeadlightDelayAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmLights_HighBeamAssistAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmSound_ClusterVoiceGuidanceVolumeAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmSound_ParkAssistVolumeAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmSound_WelcomeSoundAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmConvenience_SeatEasyAccessAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmConvenience_WelcomeMirrorLight_TitleAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmConvenience_MirrorAutoFoldingAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmConvenience_WirelessChargingSystemAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmConvenience_TrafficInformationAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmConvenience_WipreLightsDisplayAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmConvenience_AutoRearWiperInRAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmConvenience_GearPositionPopupAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmConvenience_IcyRoadWarningAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmServiceInterval_ModeAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmServiceInterval_EnableServiceIntervalAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmServiceInterval_ResetAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmOther_FuelEconomyResetAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmOther_FuelEconomyUnitAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmOther_TemperatureUnitAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmOther_TirePressureUnitAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmOther_SpeedUnitAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmOther_TorqueUnitAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmOther_TurboBoostPressureUnitAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmEcoVehicle_GreenZoneEVDriveAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmEcoVehicle_CoastingGuideEnableAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmEcoVehicle_CoastingGuideSoundAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmEcoVehicle_StartCoastingAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmEcoVehicle_ChargingConnectorLockingModeAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmEcoVehicle_ChargingConnectorConditionAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmEcoVehicle_AuxiliaryBatterySaverPlusAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmLanguageAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmService_ReminderAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::UsmEcoVehicle_VolumeControlFunctionForVESSAttributeExtension<_AttributeExtension>, 
            ::v1::proj::dcluster::McuManager::McuManagerExtensions::LastTabInfoAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_PROJ_DCLUSTER_MCUMANAGER_Mcu_Manager_PROXY_HPP_
