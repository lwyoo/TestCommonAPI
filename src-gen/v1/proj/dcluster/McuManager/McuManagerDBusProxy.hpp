/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201907221221.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_PROJ_DCLUSTER_MCUMANAGER_Mcu_Manager_DBUS_PROXY_HPP_
#define V1_PROJ_DCLUSTER_MCUMANAGER_Mcu_Manager_DBUS_PROXY_HPP_

#include <v1/proj/dcluster/McuManager/McuManagerProxyBase.hpp>
#include "v1/proj/dcluster/McuManager/McuManagerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace proj {
namespace dcluster {
namespace McuManager {

class McuManagerDBusProxy
    : virtual public McuManagerProxyBase,
      virtual public CommonAPI::DBus::DBusProxy {
public:
    McuManagerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~McuManagerDBusProxy() { }

    virtual MainContentsDisplayControlAttribute& getMainContentsDisplayControlAttribute();
    virtual DrivingStateAttribute& getDrivingStateAttribute();
    virtual DriveModeAttribute& getDriveModeAttribute();
    virtual VariantAttribute& getVariantAttribute();
    virtual EOLAttribute& getEOLAttribute();
    virtual SWVariantAttribute& getSWVariantAttribute();
    virtual IGN1StateAttribute& getIGN1StateAttribute();
    virtual IGN3StateAttribute& getIGN3StateAttribute();
    virtual SpeedoUnitAttribute& getSpeedoUnitAttribute();
    virtual TripDriveModeAttribute& getTripDriveModeAttribute();
    virtual TripDTEAttribute& getTripDTEAttribute();
    virtual TripFuelEconomyAttribute& getTripFuelEconomyAttribute();
    virtual TripAccumulatedAttribute& getTripAccumulatedAttribute();
    virtual TripDriveInfoAttribute& getTripDriveInfoAttribute();
    virtual TripDigitalSpeedMeterAttribute& getTripDigitalSpeedMeterAttribute();
    virtual TripPowerFlowDiagramAttribute& getTripPowerFlowDiagramAttribute();
    virtual TripUREALevelAttribute& getTripUREALevelAttribute();
    virtual TripTransmissionTempAttribute& getTripTransmissionTempAttribute();
    virtual TripEngineCoolantTempAttribute& getTripEngineCoolantTempAttribute();
    virtual EnergyFlowAttribute& getEnergyFlowAttribute();
    virtual MyDrivingModeAttribute& getMyDrivingModeAttribute();
    virtual TBTDisplayTypeAttribute& getTBTDisplayTypeAttribute();
    virtual TBTDisplayTollgateAttribute& getTBTDisplayTollgateAttribute();
    virtual TBTPreliminaryInfoAttribute& getTBTPreliminaryInfoAttribute();
    virtual TBTDestInfoPageStateAttribute& getTBTDestInfoPageStateAttribute();
    virtual TBTPointTypeAttribute& getTBTPointTypeAttribute();
    virtual TBTDirectionAttribute& getTBTDirectionAttribute();
    virtual TBTRoadDisplayAttribute& getTBTRoadDisplayAttribute();
    virtual TBTSideRoadDisplayAttribute& getTBTSideRoadDisplayAttribute();
    virtual TBTDistanceToDestinationAttribute& getTBTDistanceToDestinationAttribute();
    virtual TBTDistanceUntilTurnAttribute& getTBTDistanceUntilTurnAttribute();
    virtual TBTExpectedDestTimeAttribute& getTBTExpectedDestTimeAttribute();
    virtual TBTExpectedRemainTimeAttribute& getTBTExpectedRemainTimeAttribute();
    virtual TBTGuideTPInfoAttribute& getTBTGuideTPInfoAttribute();
    virtual TBTDestTPInfoAttribute& getTBTDestTPInfoAttribute();
    virtual TBTViaPoint1TPInfoAttribute& getTBTViaPoint1TPInfoAttribute();
    virtual TBTViaPoint2TPInfoAttribute& getTBTViaPoint2TPInfoAttribute();
    virtual TBTViaPoint3TPInfoAttribute& getTBTViaPoint3TPInfoAttribute();
    virtual TBTViaPoint4TPInfoAttribute& getTBTViaPoint4TPInfoAttribute();
    virtual DriveAssistCruiseControlTTCAttribute& getDriveAssistCruiseControlTTCAttribute();
    virtual DriveAssistCruiseControlRealAttribute& getDriveAssistCruiseControlRealAttribute();
    virtual DriveAssistLaneAttribute& getDriveAssistLaneAttribute();
    virtual DriveAssistDAWAttribute& getDriveAssistDAWAttribute();
    virtual DriveAssistISLWAttribute& getDriveAssistISLWAttribute();
    virtual DriveAssistAWDAttribute& getDriveAssistAWDAttribute();
    virtual DriveAssistTPMSAttribute& getDriveAssistTPMSAttribute();
    virtual AdasInfoAttribute& getAdasInfoAttribute();
    virtual ContentsGearAttribute& getContentsGearAttribute();
    virtual ContentsCCAttribute& getContentsCCAttribute();
    virtual ContentsSCCAttribute& getContentsSCCAttribute();
    virtual ContentsCoastingAttribute& getContentsCoastingAttribute();
    virtual ContentsDISAttribute& getContentsDISAttribute();
    virtual ContentsDTEInfoAttribute& getContentsDTEInfoAttribute();
    virtual ContentsISLWAttribute& getContentsISLWAttribute();
    virtual ContentsOATAttribute& getContentsOATAttribute();
    virtual ContentsODOMeterAttribute& getContentsODOMeterAttribute();
    virtual EcoPowerDisplayInfoAttribute& getEcoPowerDisplayInfoAttribute();
    virtual ContentsRSBRAttribute& getContentsRSBRAttribute();
    virtual ContentsSpeedLimitAttribute& getContentsSpeedLimitAttribute();
    virtual MasterWarnCmdAttribute& getMasterWarnCmdAttribute();
    virtual AvTpAMFMInfoAttribute& getAvTpAMFMInfoAttribute();
    virtual AvTpXMInfoAttribute& getAvTpXMInfoAttribute();
    virtual AvTpDABInfoAttribute& getAvTpDABInfoAttribute();
    virtual AvTpDMBInfoAttribute& getAvTpDMBInfoAttribute();
    virtual AvTpJukeBoxInfoAttribute& getAvTpJukeBoxInfoAttribute();
    virtual AvTpIpodInfoAttribute& getAvTpIpodInfoAttribute();
    virtual AvTpUSBInfoAttribute& getAvTpUSBInfoAttribute();
    virtual AvTpBlueToothInfoAttribute& getAvTpBlueToothInfoAttribute();
    virtual AvTpAppleCarPlayInfoAttribute& getAvTpAppleCarPlayInfoAttribute();
    virtual AvTpAndroidAutoInfoAttribute& getAvTpAndroidAutoInfoAttribute();
    virtual AvTpIboxInfoAttribute& getAvTpIboxInfoAttribute();
    virtual AvTpCDInfoAttribute& getAvTpCDInfoAttribute();
    virtual AvTpBaiduMInfoAttribute& getAvTpBaiduMInfoAttribute();
    virtual EventContentsFullAttribute& getEventContentsFullAttribute();
    virtual EventContentsMiniAttribute& getEventContentsMiniAttribute();
    virtual EventAccessoryAttribute& getEventAccessoryAttribute();
    virtual PowerTailGateWarnStateAttribute& getPowerTailGateWarnStateAttribute();
    virtual DisplayLanguageAttribute& getDisplayLanguageAttribute();
    virtual UsmDriverAssist_SccReactionAttribute& getUsmDriverAssist_SccReactionAttribute();
    virtual UsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute& getUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute();
    virtual UsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute& getUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute();
    virtual UsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute& getUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute();
    virtual UsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute& getUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute();
    virtual UsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute& getUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute();
    virtual UsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute& getUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute();
    virtual UsmDriverAssist_DriverAttentionWarningAttribute& getUsmDriverAssist_DriverAttentionWarningAttribute();
    virtual UsmDriverAssist_WarningTimingAttribute& getUsmDriverAssist_WarningTimingAttribute();
    virtual UsmDriverAssist_WarningVolumeAttribute& getUsmDriverAssist_WarningVolumeAttribute();
    virtual UsmDriverAssist_LaneSafetyAttribute& getUsmDriverAssist_LaneSafetyAttribute();
    virtual UsmDriverAssist_LaneSafety_ModeAttribute& getUsmDriverAssist_LaneSafety_ModeAttribute();
    virtual UsmDriverAssist_ForwardSafetyAttribute& getUsmDriverAssist_ForwardSafetyAttribute();
    virtual UsmDriverAssist_BlindSpotSafety_SpotViewAttribute& getUsmDriverAssist_BlindSpotSafety_SpotViewAttribute();
    virtual UsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute& getUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute();
    virtual UsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute& getUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute();
    virtual UsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute& getUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute();
    virtual UsmDoor_AutoLockAttribute& getUsmDoor_AutoLockAttribute();
    virtual UsmDoor_AutoUnlock_KeyOrPowerAttribute& getUsmDoor_AutoUnlock_KeyOrPowerAttribute();
    virtual UsmDoor_AutoUnlockAttribute& getUsmDoor_AutoUnlockAttribute();
    virtual UsmDoor_HornFeedbackAttribute& getUsmDoor_HornFeedbackAttribute();
    virtual UsmDoor_PowerTailgateAttribute& getUsmDoor_PowerTailgateAttribute();
    virtual UsmDoor_PowerTailgateSpeedAttribute& getUsmDoor_PowerTailgateSpeedAttribute();
    virtual UsmDoor_SmartTailgateAttribute& getUsmDoor_SmartTailgateAttribute();
    virtual UsmLights_OneTouchTurnSignalAttribute& getUsmLights_OneTouchTurnSignalAttribute();
    virtual UsmLights_AmbientLightAttribute& getUsmLights_AmbientLightAttribute();
    virtual UsmLights_HeadlightDelayAttribute& getUsmLights_HeadlightDelayAttribute();
    virtual UsmLights_HighBeamAssistAttribute& getUsmLights_HighBeamAssistAttribute();
    virtual UsmSound_ClusterVoiceGuidanceVolumeAttribute& getUsmSound_ClusterVoiceGuidanceVolumeAttribute();
    virtual UsmSound_ParkAssistVolumeAttribute& getUsmSound_ParkAssistVolumeAttribute();
    virtual UsmSound_WelcomeSoundAttribute& getUsmSound_WelcomeSoundAttribute();
    virtual UsmConvenience_SeatEasyAccessAttribute& getUsmConvenience_SeatEasyAccessAttribute();
    virtual UsmConvenience_WelcomeMirrorLight_TitleAttribute& getUsmConvenience_WelcomeMirrorLight_TitleAttribute();
    virtual UsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute& getUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute();
    virtual UsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute& getUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute();
    virtual UsmConvenience_MirrorAutoFoldingAttribute& getUsmConvenience_MirrorAutoFoldingAttribute();
    virtual UsmConvenience_WirelessChargingSystemAttribute& getUsmConvenience_WirelessChargingSystemAttribute();
    virtual UsmConvenience_TrafficInformationAttribute& getUsmConvenience_TrafficInformationAttribute();
    virtual UsmConvenience_WipreLightsDisplayAttribute& getUsmConvenience_WipreLightsDisplayAttribute();
    virtual UsmConvenience_AutoRearWiperInRAttribute& getUsmConvenience_AutoRearWiperInRAttribute();
    virtual UsmConvenience_GearPositionPopupAttribute& getUsmConvenience_GearPositionPopupAttribute();
    virtual UsmConvenience_IcyRoadWarningAttribute& getUsmConvenience_IcyRoadWarningAttribute();
    virtual UsmServiceInterval_ModeAttribute& getUsmServiceInterval_ModeAttribute();
    virtual UsmServiceInterval_EnableServiceIntervalAttribute& getUsmServiceInterval_EnableServiceIntervalAttribute();
    virtual UsmServiceInterval_ResetAttribute& getUsmServiceInterval_ResetAttribute();
    virtual UsmOther_FuelEconomyResetAttribute& getUsmOther_FuelEconomyResetAttribute();
    virtual UsmOther_FuelEconomyUnitAttribute& getUsmOther_FuelEconomyUnitAttribute();
    virtual UsmOther_TemperatureUnitAttribute& getUsmOther_TemperatureUnitAttribute();
    virtual UsmOther_TirePressureUnitAttribute& getUsmOther_TirePressureUnitAttribute();
    virtual UsmOther_SpeedUnitAttribute& getUsmOther_SpeedUnitAttribute();
    virtual UsmOther_TorqueUnitAttribute& getUsmOther_TorqueUnitAttribute();
    virtual UsmOther_TurboBoostPressureUnitAttribute& getUsmOther_TurboBoostPressureUnitAttribute();
    virtual UsmEcoVehicle_GreenZoneEVDriveAttribute& getUsmEcoVehicle_GreenZoneEVDriveAttribute();
    virtual UsmEcoVehicle_CoastingGuideEnableAttribute& getUsmEcoVehicle_CoastingGuideEnableAttribute();
    virtual UsmEcoVehicle_CoastingGuideSoundAttribute& getUsmEcoVehicle_CoastingGuideSoundAttribute();
    virtual UsmEcoVehicle_StartCoastingAttribute& getUsmEcoVehicle_StartCoastingAttribute();
    virtual UsmEcoVehicle_ChargingConnectorLockingModeAttribute& getUsmEcoVehicle_ChargingConnectorLockingModeAttribute();
    virtual UsmEcoVehicle_ChargingConnectorConditionAttribute& getUsmEcoVehicle_ChargingConnectorConditionAttribute();
    virtual UsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute& getUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute();
    virtual UsmLanguageAttribute& getUsmLanguageAttribute();
    virtual UsmService_ReminderAttribute& getUsmService_ReminderAttribute();
    virtual UsmEcoVehicle_VolumeControlFunctionForVESSAttribute& getUsmEcoVehicle_VolumeControlFunctionForVESSAttribute();
    virtual LastTabInfoAttribute& getLastTabInfoAttribute();

    virtual NotifySteerWheelKeyEvent& getNotifySteerWheelKeyEvent();
    virtual NotifyIGNStateEvent& getNotifyIGNStateEvent();
    virtual NotifyContentsGearStateEvent& getNotifyContentsGearStateEvent();
    virtual NotifyEventContentsEvent& getNotifyEventContentsEvent();
    virtual NotifyMasterWarnInfoEvent& getNotifyMasterWarnInfoEvent();
    virtual NotifyMasterWarnCmdEvent& getNotifyMasterWarnCmdEvent();
    virtual NotifySoundEvent& getNotifySoundEvent();

    virtual void Command(const uint8_t &_id, const ::v1::proj::dcluster::McuManager::McuManagerTypes::CmdData &_data, CommonAPI::CallStatus &_internalCallStatus, bool &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> CommandAsync(const uint8_t &_id, const ::v1::proj::dcluster::McuManager::McuManagerTypes::CmdData &_data, CommandAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:

    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<MainContentsDisplayControlAttribute>> mainContentsDisplayControl_;
    class DBusdrivingState_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DrivingStateAttribute>> {
    public:
    template <typename... _A>
        DBusdrivingState_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DrivingStateAttribute>>(
                _proxy, arguments...) {}
    void setValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState& requestValue,
        CommonAPI::CallStatus& callStatus,
        ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState& responseValue,
        const CommonAPI::CallInfo *_info = nullptr) {
            // validate input parameters
            if (!requestValue.validate()) {
                callStatus = CommonAPI::CallStatus::INVALID_VALUE;
                return;
            }
            // call parent function if ok
            CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DrivingStateAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
        }
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState& requestValue,
        std::function<void(const CommonAPI::CallStatus &, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState)> _callback,
        const CommonAPI::CallInfo *_info) {
            // validate input parameters
            if (!requestValue.validate()) {
                ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState _returnvalue;
                _callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
                std::promise<CommonAPI::CallStatus> promise;
                promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
                return promise.get_future();
            }
            // call parent function if ok
            return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DrivingStateAttribute>>::setValueAsync(requestValue, _callback, _info);
        }
    };
    DBusdrivingState_Attribute drivingState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DriveModeAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StDriveModeInfoDeployment_t>> driveMode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<VariantAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StVariantInfoDeployment_t>> variant_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<EOLAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StEOLInfoDeployment_t>> eOL_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SWVariantAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StSWVariantInfoDeployment_t>> sWVariant_;
    class DBusiGN1State_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<IGN1StateAttribute>> {
    public:
    template <typename... _A>
        DBusiGN1State_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<IGN1StateAttribute>>(
                _proxy, arguments...) {}
    void setValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState& requestValue,
        CommonAPI::CallStatus& callStatus,
        ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState& responseValue,
        const CommonAPI::CallInfo *_info = nullptr) {
            // validate input parameters
            if (!requestValue.validate()) {
                callStatus = CommonAPI::CallStatus::INVALID_VALUE;
                return;
            }
            // call parent function if ok
            CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<IGN1StateAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
        }
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState& requestValue,
        std::function<void(const CommonAPI::CallStatus &, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState)> _callback,
        const CommonAPI::CallInfo *_info) {
            // validate input parameters
            if (!requestValue.validate()) {
                ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _returnvalue;
                _callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
                std::promise<CommonAPI::CallStatus> promise;
                promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
                return promise.get_future();
            }
            // call parent function if ok
            return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<IGN1StateAttribute>>::setValueAsync(requestValue, _callback, _info);
        }
    };
    DBusiGN1State_Attribute iGN1State_;
    class DBusiGN3State_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<IGN3StateAttribute>> {
    public:
    template <typename... _A>
        DBusiGN3State_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<IGN3StateAttribute>>(
                _proxy, arguments...) {}
    void setValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState& requestValue,
        CommonAPI::CallStatus& callStatus,
        ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState& responseValue,
        const CommonAPI::CallInfo *_info = nullptr) {
            // validate input parameters
            if (!requestValue.validate()) {
                callStatus = CommonAPI::CallStatus::INVALID_VALUE;
                return;
            }
            // call parent function if ok
            CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<IGN3StateAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
        }
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState& requestValue,
        std::function<void(const CommonAPI::CallStatus &, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState)> _callback,
        const CommonAPI::CallInfo *_info) {
            // validate input parameters
            if (!requestValue.validate()) {
                ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _returnvalue;
                _callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
                std::promise<CommonAPI::CallStatus> promise;
                promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
                return promise.get_future();
            }
            // call parent function if ok
            return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<IGN3StateAttribute>>::setValueAsync(requestValue, _callback, _info);
        }
    };
    DBusiGN3State_Attribute iGN3State_;
    class DBusspeedoUnit_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SpeedoUnitAttribute>> {
    public:
    template <typename... _A>
        DBusspeedoUnit_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SpeedoUnitAttribute>>(
                _proxy, arguments...) {}
    void setValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit& requestValue,
        CommonAPI::CallStatus& callStatus,
        ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit& responseValue,
        const CommonAPI::CallInfo *_info = nullptr) {
            // validate input parameters
            if (!requestValue.validate()) {
                callStatus = CommonAPI::CallStatus::INVALID_VALUE;
                return;
            }
            // call parent function if ok
            CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SpeedoUnitAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
        }
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit& requestValue,
        std::function<void(const CommonAPI::CallStatus &, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit)> _callback,
        const CommonAPI::CallInfo *_info) {
            // validate input parameters
            if (!requestValue.validate()) {
                ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit _returnvalue;
                _callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
                std::promise<CommonAPI::CallStatus> promise;
                promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
                return promise.get_future();
            }
            // call parent function if ok
            return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SpeedoUnitAttribute>>::setValueAsync(requestValue, _callback, _info);
        }
    };
    DBusspeedoUnit_Attribute speedoUnit_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripDriveModeAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StTripDriveModeInfoDeployment_t>> tripDriveMode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripDTEAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StTripDTEInfoDeployment_t>> tripDTE_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripFuelEconomyAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StTripFuelEconomyInfoDeployment_t>> tripFuelEconomy_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripAccumulatedAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StTripAccumulatedInfoDeployment_t>> tripAccumulated_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripDriveInfoAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StTripDriveInfoDeployment_t>> tripDriveInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripDigitalSpeedMeterAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StTripSpeedMeterDeployment_t>> tripDigitalSpeedMeter_;
    class DBustripPowerFlowDiagram_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripPowerFlowDiagramAttribute>> {
    public:
    template <typename... _A>
        DBustripPowerFlowDiagram_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripPowerFlowDiagramAttribute>>(
                _proxy, arguments...) {}
    void setValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow& requestValue,
        CommonAPI::CallStatus& callStatus,
        ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow& responseValue,
        const CommonAPI::CallInfo *_info = nullptr) {
            // validate input parameters
            if (!requestValue.validate()) {
                callStatus = CommonAPI::CallStatus::INVALID_VALUE;
                return;
            }
            // call parent function if ok
            CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripPowerFlowDiagramAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
        }
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow& requestValue,
        std::function<void(const CommonAPI::CallStatus &, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow)> _callback,
        const CommonAPI::CallInfo *_info) {
            // validate input parameters
            if (!requestValue.validate()) {
                ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow _returnvalue;
                _callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
                std::promise<CommonAPI::CallStatus> promise;
                promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
                return promise.get_future();
            }
            // call parent function if ok
            return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripPowerFlowDiagramAttribute>>::setValueAsync(requestValue, _callback, _info);
        }
    };
    DBustripPowerFlowDiagram_Attribute tripPowerFlowDiagram_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripUREALevelAttribute>> tripUREALevel_;
    class DBustripTransmissionTemp_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripTransmissionTempAttribute>> {
    public:
    template <typename... _A>
        DBustripTransmissionTemp_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripTransmissionTempAttribute>>(
                _proxy, arguments...) {}
    void setValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel& requestValue,
        CommonAPI::CallStatus& callStatus,
        ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel& responseValue,
        const CommonAPI::CallInfo *_info = nullptr) {
            // validate input parameters
            if (!requestValue.validate()) {
                callStatus = CommonAPI::CallStatus::INVALID_VALUE;
                return;
            }
            // call parent function if ok
            CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripTransmissionTempAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
        }
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel& requestValue,
        std::function<void(const CommonAPI::CallStatus &, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel)> _callback,
        const CommonAPI::CallInfo *_info) {
            // validate input parameters
            if (!requestValue.validate()) {
                ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel _returnvalue;
                _callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
                std::promise<CommonAPI::CallStatus> promise;
                promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
                return promise.get_future();
            }
            // call parent function if ok
            return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripTransmissionTempAttribute>>::setValueAsync(requestValue, _callback, _info);
        }
    };
    DBustripTransmissionTemp_Attribute tripTransmissionTemp_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TripEngineCoolantTempAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StEngineCoolantTempDeployment_t>> tripEngineCoolantTemp_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<EnergyFlowAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StEnergyFlowInfoDeployment_t>> energyFlow_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<MyDrivingModeAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StMyDrvModeInfoDeployment_t>> myDrivingMode_;
    class DBustBTDisplayType_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTDisplayTypeAttribute>> {
    public:
    template <typename... _A>
        DBustBTDisplayType_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTDisplayTypeAttribute>>(
                _proxy, arguments...) {}
    void setValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType& requestValue,
        CommonAPI::CallStatus& callStatus,
        ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType& responseValue,
        const CommonAPI::CallInfo *_info = nullptr) {
            // validate input parameters
            if (!requestValue.validate()) {
                callStatus = CommonAPI::CallStatus::INVALID_VALUE;
                return;
            }
            // call parent function if ok
            CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTDisplayTypeAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
        }
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType& requestValue,
        std::function<void(const CommonAPI::CallStatus &, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType)> _callback,
        const CommonAPI::CallInfo *_info) {
            // validate input parameters
            if (!requestValue.validate()) {
                ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType _returnvalue;
                _callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
                std::promise<CommonAPI::CallStatus> promise;
                promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
                return promise.get_future();
            }
            // call parent function if ok
            return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTDisplayTypeAttribute>>::setValueAsync(requestValue, _callback, _info);
        }
    };
    DBustBTDisplayType_Attribute tBTDisplayType_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTDisplayTollgateAttribute>> tBTDisplayTollgate_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTPreliminaryInfoAttribute>> tBTPreliminaryInfo_;
    class DBustBTDestInfoPageState_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTDestInfoPageStateAttribute>> {
    public:
    template <typename... _A>
        DBustBTDestInfoPageState_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTDestInfoPageStateAttribute>>(
                _proxy, arguments...) {}
    void setValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState& requestValue,
        CommonAPI::CallStatus& callStatus,
        ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState& responseValue,
        const CommonAPI::CallInfo *_info = nullptr) {
            // validate input parameters
            if (!requestValue.validate()) {
                callStatus = CommonAPI::CallStatus::INVALID_VALUE;
                return;
            }
            // call parent function if ok
            CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTDestInfoPageStateAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
        }
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState& requestValue,
        std::function<void(const CommonAPI::CallStatus &, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState)> _callback,
        const CommonAPI::CallInfo *_info) {
            // validate input parameters
            if (!requestValue.validate()) {
                ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState _returnvalue;
                _callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
                std::promise<CommonAPI::CallStatus> promise;
                promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
                return promise.get_future();
            }
            // call parent function if ok
            return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTDestInfoPageStateAttribute>>::setValueAsync(requestValue, _callback, _info);
        }
    };
    DBustBTDestInfoPageState_Attribute tBTDestInfoPageState_;
    class DBustBTPointType_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTPointTypeAttribute>> {
    public:
    template <typename... _A>
        DBustBTPointType_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTPointTypeAttribute>>(
                _proxy, arguments...) {}
    void setValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType& requestValue,
        CommonAPI::CallStatus& callStatus,
        ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType& responseValue,
        const CommonAPI::CallInfo *_info = nullptr) {
            // validate input parameters
            if (!requestValue.validate()) {
                callStatus = CommonAPI::CallStatus::INVALID_VALUE;
                return;
            }
            // call parent function if ok
            CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTPointTypeAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
        }
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType& requestValue,
        std::function<void(const CommonAPI::CallStatus &, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType)> _callback,
        const CommonAPI::CallInfo *_info) {
            // validate input parameters
            if (!requestValue.validate()) {
                ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType _returnvalue;
                _callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
                std::promise<CommonAPI::CallStatus> promise;
                promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
                return promise.get_future();
            }
            // call parent function if ok
            return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTPointTypeAttribute>>::setValueAsync(requestValue, _callback, _info);
        }
    };
    DBustBTPointType_Attribute tBTPointType_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTDirectionAttribute>> tBTDirection_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTRoadDisplayAttribute>> tBTRoadDisplay_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTSideRoadDisplayAttribute>> tBTSideRoadDisplay_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTDistanceToDestinationAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StTBTDistDestInfoDeployment_t>> tBTDistanceToDestination_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTDistanceUntilTurnAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StTBTTurnInfoDeployment_t>> tBTDistanceUntilTurn_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTExpectedDestTimeAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StTBTDestinationTimeDeployment_t>> tBTExpectedDestTime_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTExpectedRemainTimeAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StTBTRemainTimeDeployment_t>> tBTExpectedRemainTime_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTGuideTPInfoAttribute>> tBTGuideTPInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTDestTPInfoAttribute>> tBTDestTPInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTViaPoint1TPInfoAttribute>> tBTViaPoint1TPInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTViaPoint2TPInfoAttribute>> tBTViaPoint2TPInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTViaPoint3TPInfoAttribute>> tBTViaPoint3TPInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TBTViaPoint4TPInfoAttribute>> tBTViaPoint4TPInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DriveAssistCruiseControlTTCAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StDriveAssistCCInfoTTCDeployment_t>> driveAssistCruiseControlTTC_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DriveAssistCruiseControlRealAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StDriveAssistCCInfoRealDeployment_t>> driveAssistCruiseControlReal_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DriveAssistLaneAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StDriveAssistLaneInfoDeployment_t>> driveAssistLane_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DriveAssistDAWAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StDriveAssistDAWInfoDeployment_t>> driveAssistDAW_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DriveAssistISLWAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StDriveAssistISLWInfoDeployment_t>> driveAssistISLW_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DriveAssistAWDAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StDriveAssistAWDInfoDeployment_t>> driveAssistAWD_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DriveAssistTPMSAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StDriveAssistTPMSInfoDeployment_t>> driveAssistTPMS_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AdasInfoAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StAdasInfoDeployment_t>> adasInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ContentsGearAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StContentsGearInfoDeployment_t>> contentsGear_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ContentsCCAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StContentsCCInfoDeployment_t>> contentsCC_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ContentsSCCAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StContentsSCCInfoDeployment_t>> contentsSCC_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ContentsCoastingAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StContentsCoastingDeployment_t>> contentsCoasting_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ContentsDISAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StContentsDISInfoDeployment_t>> contentsDIS_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ContentsDTEInfoAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StContentsDTEDeployment_t>> contentsDTEInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ContentsISLWAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StContentsISLWInfoDeployment_t>> contentsISLW_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ContentsOATAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StContentsOATDeployment_t>> contentsOAT_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ContentsODOMeterAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StContentsODODeployment_t>> contentsODOMeter_;
    class DBusecoPowerDisplayInfo_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<EcoPowerDisplayInfoAttribute>> {
    public:
    template <typename... _A>
        DBusecoPowerDisplayInfo_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<EcoPowerDisplayInfoAttribute>>(
                _proxy, arguments...) {}
    void setValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState& requestValue,
        CommonAPI::CallStatus& callStatus,
        ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState& responseValue,
        const CommonAPI::CallInfo *_info = nullptr) {
            // validate input parameters
            if (!requestValue.validate()) {
                callStatus = CommonAPI::CallStatus::INVALID_VALUE;
                return;
            }
            // call parent function if ok
            CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<EcoPowerDisplayInfoAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
        }
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState& requestValue,
        std::function<void(const CommonAPI::CallStatus &, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState)> _callback,
        const CommonAPI::CallInfo *_info) {
            // validate input parameters
            if (!requestValue.validate()) {
                ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState _returnvalue;
                _callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
                std::promise<CommonAPI::CallStatus> promise;
                promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
                return promise.get_future();
            }
            // call parent function if ok
            return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<EcoPowerDisplayInfoAttribute>>::setValueAsync(requestValue, _callback, _info);
        }
    };
    DBusecoPowerDisplayInfo_Attribute ecoPowerDisplayInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ContentsRSBRAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StContentsRSBRInfoDeployment_t>> contentsRSBR_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ContentsSpeedLimitAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StContentsSpdLimitInfoDeployment_t>> contentsSpeedLimit_;
    class DBusmasterWarnCmd_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<MasterWarnCmdAttribute>> {
    public:
    template <typename... _A>
        DBusmasterWarnCmd_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<MasterWarnCmdAttribute>>(
                _proxy, arguments...) {}
    void setValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd& requestValue,
        CommonAPI::CallStatus& callStatus,
        ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd& responseValue,
        const CommonAPI::CallInfo *_info = nullptr) {
            // validate input parameters
            if (!requestValue.validate()) {
                callStatus = CommonAPI::CallStatus::INVALID_VALUE;
                return;
            }
            // call parent function if ok
            CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<MasterWarnCmdAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
        }
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd& requestValue,
        std::function<void(const CommonAPI::CallStatus &, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd)> _callback,
        const CommonAPI::CallInfo *_info) {
            // validate input parameters
            if (!requestValue.validate()) {
                ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd _returnvalue;
                _callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
                std::promise<CommonAPI::CallStatus> promise;
                promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
                return promise.get_future();
            }
            // call parent function if ok
            return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<MasterWarnCmdAttribute>>::setValueAsync(requestValue, _callback, _info);
        }
    };
    DBusmasterWarnCmd_Attribute masterWarnCmd_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AvTpAMFMInfoAttribute>> avTpAMFMInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AvTpXMInfoAttribute>> avTpXMInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AvTpDABInfoAttribute>> avTpDABInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AvTpDMBInfoAttribute>> avTpDMBInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AvTpJukeBoxInfoAttribute>> avTpJukeBoxInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AvTpIpodInfoAttribute>> avTpIpodInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AvTpUSBInfoAttribute>> avTpUSBInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AvTpBlueToothInfoAttribute>> avTpBlueToothInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AvTpAppleCarPlayInfoAttribute>> avTpAppleCarPlayInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AvTpAndroidAutoInfoAttribute>> avTpAndroidAutoInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AvTpIboxInfoAttribute>> avTpIboxInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AvTpCDInfoAttribute>> avTpCDInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AvTpBaiduMInfoAttribute>> avTpBaiduMInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<EventContentsFullAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StEventContentsInfoDeployment_t>> eventContentsFull_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<EventContentsMiniAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StEventContentsInfoDeployment_t>> eventContentsMini_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<EventAccessoryAttribute>> eventAccessory_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PowerTailGateWarnStateAttribute>> powerTailGateWarnState_;
    class DBusdisplayLanguage_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DisplayLanguageAttribute>> {
    public:
    template <typename... _A>
        DBusdisplayLanguage_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DisplayLanguageAttribute>>(
                _proxy, arguments...) {}
    void setValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE& requestValue,
        CommonAPI::CallStatus& callStatus,
        ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE& responseValue,
        const CommonAPI::CallInfo *_info = nullptr) {
            // validate input parameters
            if (!requestValue.validate()) {
                callStatus = CommonAPI::CallStatus::INVALID_VALUE;
                return;
            }
            // call parent function if ok
            CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DisplayLanguageAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
        }
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE& requestValue,
        std::function<void(const CommonAPI::CallStatus &, ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE)> _callback,
        const CommonAPI::CallInfo *_info) {
            // validate input parameters
            if (!requestValue.validate()) {
                ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE _returnvalue;
                _callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
                std::promise<CommonAPI::CallStatus> promise;
                promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
                return promise.get_future();
            }
            // call parent function if ok
            return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DisplayLanguageAttribute>>::setValueAsync(requestValue, _callback, _info);
        }
    };
    DBusdisplayLanguage_Attribute displayLanguage_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_SccReactionAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_SccReaction_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlert_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_DrivingAssist_LaneFollowingAssist_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_DrivingAssist_HighwayDrivingAssist_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDown_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDown_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_DrivingAssist_SpeedLimitWarning_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_DriverAttentionWarningAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_DriverAttentionWarning_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_WarningTimingAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_WarningTiming_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_WarningVolumeAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_WarningVolume_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_LaneSafetyAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_LaneSafety_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_LaneSafety_ModeAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_LaneSafety_Mode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_ForwardSafetyAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_ForwardSafety_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_BlindSpotSafety_SpotViewAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_BlindSpotSafety_SpotView_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_BlindSpotSafety_SafetyExitAssist_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_BlindSpotSafety_WarningOnly_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDriverAssist_BlindSpotSafety_RearCrossTrafficSafety_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDoor_AutoLockAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDoor_AutoLock_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDoor_AutoUnlock_KeyOrPowerAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDoor_AutoUnlock_KeyOrPower_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDoor_AutoUnlockAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDoor_AutoUnlock_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDoor_HornFeedbackAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDoor_HornFeedback_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDoor_PowerTailgateAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDoor_PowerTailgate_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDoor_PowerTailgateSpeedAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDoor_PowerTailgateSpeed_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmDoor_SmartTailgateAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmDoor_SmartTailgate_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmLights_OneTouchTurnSignalAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmLights_OneTouchTurnSignal_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmLights_AmbientLightAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmLights_AmbientLight_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmLights_HeadlightDelayAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmLights_HeadlightDelay_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmLights_HighBeamAssistAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmLights_HighBeamAssist_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmSound_ClusterVoiceGuidanceVolumeAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmSound_ClusterVoiceGuidanceVolume_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmSound_ParkAssistVolumeAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmSound_ParkAssistVolume_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmSound_WelcomeSoundAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmSound_WelcomeSound_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmConvenience_SeatEasyAccessAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmConvenience_SeatEasyAccess_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmConvenience_WelcomeMirrorLight_TitleAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmConvenience_WelcomeMirrorLight_Title_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmConvenience_WelcomeMirrorLight_OnDoorUnlock_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmConvenience_WelcomeMirrorLight_OnDriverApproach_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmConvenience_MirrorAutoFoldingAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmConvenience_MirrorAutoFolding_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmConvenience_WirelessChargingSystemAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmConvenience_WirelessChargingSystem_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmConvenience_TrafficInformationAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmConvenience_TrafficInformation_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmConvenience_WipreLightsDisplayAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmConvenience_WipreLightsDisplay_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmConvenience_AutoRearWiperInRAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmConvenience_AutoRearWiperInR_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmConvenience_GearPositionPopupAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmConvenience_GearPositionPopup_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmConvenience_IcyRoadWarningAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmConvenience_IcyRoadWarning_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmServiceInterval_ModeAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmServiceInterval_Mode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmServiceInterval_EnableServiceIntervalAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmServiceInterval_EnableServiceInterval_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmServiceInterval_ResetAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmServiceInterval_Reset_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmOther_FuelEconomyResetAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmOther_FuelEconomyReset_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmOther_FuelEconomyUnitAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmOther_FuelEconomyUnit_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmOther_TemperatureUnitAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmOther_TemperatureUnit_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmOther_TirePressureUnitAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmOther_TirePressureUnit_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmOther_SpeedUnitAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmOther_SpeedUnit_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmOther_TorqueUnitAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmOther_TorqueUnit_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmOther_TurboBoostPressureUnitAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmOther_TurboBoostPressureUnit_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmEcoVehicle_GreenZoneEVDriveAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmEcoVehicle_GreenZoneEVDrive_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmEcoVehicle_CoastingGuideEnableAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmEcoVehicle_CoastingGuideEnable_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmEcoVehicle_CoastingGuideSoundAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmEcoVehicle_CoastingGuideSound_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmEcoVehicle_StartCoastingAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmEcoVehicle_StartCoasting_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmEcoVehicle_ChargingConnectorLockingModeAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmEcoVehicle_ChargingConnectorLockingMode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmEcoVehicle_ChargingConnectorConditionAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmEcoVehicle_ChargingConnectorCondition_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmEcoVehicle_AuxiliaryBatterySaverPlus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmLanguageAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmLanguage_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmService_ReminderAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMServiceReminderDeployment_t>> usmService_Reminder_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsmEcoVehicle_VolumeControlFunctionForVESSAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::USMItem32Deployment_t>> usmEcoVehicle_VolumeControlFunctionForVESS_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<LastTabInfoAttribute, ::v1::proj::dcluster::McuManager::McuManagerTypes_::GroupTabInfoDeployment_t>> lastTabInfo_;

    CommonAPI::DBus::DBusEvent<NotifySteerWheelKeyEvent, CommonAPI::Deployable< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumStreerWheelKey, CommonAPI::EmptyDeployment >> notifySteerWheelKey_;
    CommonAPI::DBus::DBusEvent<NotifyIGNStateEvent, CommonAPI::Deployable< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState, CommonAPI::EmptyDeployment >> notifyIGNState_;
    CommonAPI::DBus::DBusEvent<NotifyContentsGearStateEvent, CommonAPI::Deployable< ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StContentsGearInfoDeployment_t >> notifyContentsGearState_;
    CommonAPI::DBus::DBusEvent<NotifyEventContentsEvent, CommonAPI::Deployable< ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StEventContentsInfoDeployment_t >> notifyEventContents_;
    CommonAPI::DBus::DBusEvent<NotifyMasterWarnInfoEvent> notifyMasterWarnInfo_;
    CommonAPI::DBus::DBusEvent<NotifyMasterWarnCmdEvent, CommonAPI::Deployable< ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd, CommonAPI::EmptyDeployment >> notifyMasterWarnCmd_;
    CommonAPI::DBus::DBusEvent<NotifySoundEvent, CommonAPI::Deployable< ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StSoundInfoDeployment_t >, CommonAPI::Deployable< ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StSoundInfoDeployment_t >, CommonAPI::Deployable< ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StSoundInfoDeployment_t >, CommonAPI::Deployable< ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo, ::v1::proj::dcluster::McuManager::McuManagerTypes_::StSoundInfoDeployment_t >> notifySound_;

};

} // namespace McuManager
} // namespace dcluster
} // namespace proj
} // namespace v1

#endif // V1_PROJ_DCLUSTER_MCUMANAGER_Mcu_Manager_DBUS_PROXY_HPP_

