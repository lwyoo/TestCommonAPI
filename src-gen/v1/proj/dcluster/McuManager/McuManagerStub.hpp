/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202001100728.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_PROJ_DCLUSTER_MCUMANAGER_Mcu_Manager_STUB_HPP_
#define V1_PROJ_DCLUSTER_MCUMANAGER_Mcu_Manager_STUB_HPP_

#include <functional>
#include <sstream>



#include <v1/proj/dcluster/McuManager/McuManagerTypes.hpp>

#include <v1/proj/dcluster/McuManager/McuManager.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/ByteBuffer.hpp>
#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <mutex>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace proj {
namespace dcluster {
namespace McuManager {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service McuManager. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class McuManagerStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual McuManager {
 public:
    ///Notifies all remote listeners about a change of value of the attribute MainContentsDisplayControl.
    virtual void fireMainContentsDisplayControlAttributeChanged(const bool& MainContentsDisplayControl) = 0;
    ///Notifies all remote listeners about a change of value of the attribute DrivingState.
    virtual void fireDrivingStateAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState& DrivingState) = 0;
    ///Notifies all remote listeners about a change of value of the attribute DriveMode.
    virtual void fireDriveModeAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveModeInfo& DriveMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute Variant.
    virtual void fireVariantAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StVariantInfo& Variant) = 0;
    ///Notifies all remote listeners about a change of value of the attribute EOL.
    virtual void fireEOLAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEOLInfo& EOL) = 0;
    ///Notifies all remote listeners about a change of value of the attribute SWVariant.
    virtual void fireSWVariantAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSWVariantInfo& SWVariant) = 0;
    ///Notifies all remote listeners about a change of value of the attribute IGN1State.
    virtual void fireIGN1StateAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState& IGN1State) = 0;
    ///Notifies all remote listeners about a change of value of the attribute IGN3State.
    virtual void fireIGN3StateAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState& IGN3State) = 0;
    ///Notifies all remote listeners about a change of value of the attribute SpeedoUnit.
    virtual void fireSpeedoUnitAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit& SpeedoUnit) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TripDriveMode.
    virtual void fireTripDriveModeAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveModeInfo& TripDriveMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TripDTE.
    virtual void fireTripDTEAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDTEInfo& TripDTE) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TripFuelEconomy.
    virtual void fireTripFuelEconomyAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripFuelEconomyInfo& TripFuelEconomy) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TripAccumulated.
    virtual void fireTripAccumulatedAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripAccumulatedInfo& TripAccumulated) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TripDriveInfo.
    virtual void fireTripDriveInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveInfo& TripDriveInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TripDigitalSpeedMeter.
    virtual void fireTripDigitalSpeedMeterAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripSpeedMeter& TripDigitalSpeedMeter) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TripPowerFlowDiagram.
    virtual void fireTripPowerFlowDiagramAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow& TripPowerFlowDiagram) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TripUREALevel.
    virtual void fireTripUREALevelAttributeChanged(const uint8_t& TripUREALevel) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TripTransmissionTemp.
    virtual void fireTripTransmissionTempAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel& TripTransmissionTemp) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TripEngineCoolantTemp.
    virtual void fireTripEngineCoolantTempAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEngineCoolantTemp& TripEngineCoolantTemp) = 0;
    ///Notifies all remote listeners about a change of value of the attribute EnergyFlow.
    virtual void fireEnergyFlowAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEnergyFlowInfo& EnergyFlow) = 0;
    ///Notifies all remote listeners about a change of value of the attribute MyDrivingMode.
    virtual void fireMyDrivingModeAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StMyDrvModeInfo& MyDrivingMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTDisplayType.
    virtual void fireTBTDisplayTypeAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType& TBTDisplayType) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTDisplayTollgate.
    virtual void fireTBTDisplayTollgateAttributeChanged(const bool& TBTDisplayTollgate) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTPreliminaryInfo.
    virtual void fireTBTPreliminaryInfoAttributeChanged(const uint8_t& TBTPreliminaryInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTDestInfoPageState.
    virtual void fireTBTDestInfoPageStateAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState& TBTDestInfoPageState) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTPointType.
    virtual void fireTBTPointTypeAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType& TBTPointType) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTDirection.
    virtual void fireTBTDirectionAttributeChanged(const uint8_t& TBTDirection) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTRoadDisplay.
    virtual void fireTBTRoadDisplayAttributeChanged(const uint16_t& TBTRoadDisplay) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTSideRoadDisplay.
    virtual void fireTBTSideRoadDisplayAttributeChanged(const uint8_t& TBTSideRoadDisplay) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTDistanceToDestination.
    virtual void fireTBTDistanceToDestinationAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDistDestInfo& TBTDistanceToDestination) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTDistanceUntilTurn.
    virtual void fireTBTDistanceUntilTurnAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTTurnInfo& TBTDistanceUntilTurn) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTExpectedDestTime.
    virtual void fireTBTExpectedDestTimeAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDestinationTime& TBTExpectedDestTime) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTExpectedRemainTime.
    virtual void fireTBTExpectedRemainTimeAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTRemainTime& TBTExpectedRemainTime) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTGuideTPInfo.
    virtual void fireTBTGuideTPInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& TBTGuideTPInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTDestTPInfo.
    virtual void fireTBTDestTPInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& TBTDestTPInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTViaPoint1TPInfo.
    virtual void fireTBTViaPoint1TPInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& TBTViaPoint1TPInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTViaPoint2TPInfo.
    virtual void fireTBTViaPoint2TPInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& TBTViaPoint2TPInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTViaPoint3TPInfo.
    virtual void fireTBTViaPoint3TPInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& TBTViaPoint3TPInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TBTViaPoint4TPInfo.
    virtual void fireTBTViaPoint4TPInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& TBTViaPoint4TPInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute DriveAssistCruiseControlTTC.
    virtual void fireDriveAssistCruiseControlTTCAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoTTC& DriveAssistCruiseControlTTC) = 0;
    ///Notifies all remote listeners about a change of value of the attribute DriveAssistCruiseControlReal.
    virtual void fireDriveAssistCruiseControlRealAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoReal& DriveAssistCruiseControlReal) = 0;
    ///Notifies all remote listeners about a change of value of the attribute DriveAssistLane.
    virtual void fireDriveAssistLaneAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistLaneInfo& DriveAssistLane) = 0;
    ///Notifies all remote listeners about a change of value of the attribute DriveAssistDAW.
    virtual void fireDriveAssistDAWAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistDAWInfo& DriveAssistDAW) = 0;
    ///Notifies all remote listeners about a change of value of the attribute DriveAssistISLW.
    virtual void fireDriveAssistISLWAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistISLWInfo& DriveAssistISLW) = 0;
    ///Notifies all remote listeners about a change of value of the attribute DriveAssistAWD.
    virtual void fireDriveAssistAWDAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistAWDInfo& DriveAssistAWD) = 0;
    ///Notifies all remote listeners about a change of value of the attribute DriveAssistTPMS.
    virtual void fireDriveAssistTPMSAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistTPMSInfo& DriveAssistTPMS) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AdasInfo.
    virtual void fireAdasInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StAdasInfo& AdasInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ContentsGear.
    virtual void fireContentsGearAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo& ContentsGear) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ContentsCC.
    virtual void fireContentsCCAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCCInfo& ContentsCC) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ContentsSCC.
    virtual void fireContentsSCCAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSCCInfo& ContentsSCC) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ContentsCoasting.
    virtual void fireContentsCoastingAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCoasting& ContentsCoasting) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ContentsDIS.
    virtual void fireContentsDISAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDISInfo& ContentsDIS) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ContentsDTEInfo.
    virtual void fireContentsDTEInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDTE& ContentsDTEInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ContentsISLW.
    virtual void fireContentsISLWAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsISLWInfo& ContentsISLW) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ContentsOAT.
    virtual void fireContentsOATAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsOAT& ContentsOAT) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ContentsODOMeter.
    virtual void fireContentsODOMeterAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsODO& ContentsODOMeter) = 0;
    ///Notifies all remote listeners about a change of value of the attribute EcoPowerDisplayInfo.
    virtual void fireEcoPowerDisplayInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState& EcoPowerDisplayInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ContentsRSBR.
    virtual void fireContentsRSBRAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsRSBRInfo& ContentsRSBR) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ContentsSpeedLimit.
    virtual void fireContentsSpeedLimitAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSpdLimitInfo& ContentsSpeedLimit) = 0;
    ///Notifies all remote listeners about a change of value of the attribute MasterWarnCmd.
    virtual void fireMasterWarnCmdAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd& MasterWarnCmd) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AvTpAMFMInfo.
    virtual void fireAvTpAMFMInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& AvTpAMFMInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AvTpXMInfo.
    virtual void fireAvTpXMInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& AvTpXMInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AvTpDABInfo.
    virtual void fireAvTpDABInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& AvTpDABInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AvTpDMBInfo.
    virtual void fireAvTpDMBInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& AvTpDMBInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AvTpJukeBoxInfo.
    virtual void fireAvTpJukeBoxInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& AvTpJukeBoxInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AvTpIpodInfo.
    virtual void fireAvTpIpodInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& AvTpIpodInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AvTpUSBInfo.
    virtual void fireAvTpUSBInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& AvTpUSBInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AvTpBlueToothInfo.
    virtual void fireAvTpBlueToothInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& AvTpBlueToothInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AvTpAppleCarPlayInfo.
    virtual void fireAvTpAppleCarPlayInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& AvTpAppleCarPlayInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AvTpAndroidAutoInfo.
    virtual void fireAvTpAndroidAutoInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& AvTpAndroidAutoInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AvTpIboxInfo.
    virtual void fireAvTpIboxInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& AvTpIboxInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AvTpCDInfo.
    virtual void fireAvTpCDInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& AvTpCDInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AvTpBaiduMInfo.
    virtual void fireAvTpBaiduMInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& AvTpBaiduMInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute EventContentsFull.
    virtual void fireEventContentsFullAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo& EventContentsFull) = 0;
    ///Notifies all remote listeners about a change of value of the attribute EventContentsMini.
    virtual void fireEventContentsMiniAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo& EventContentsMini) = 0;
    ///Notifies all remote listeners about a change of value of the attribute EventAccessory.
    virtual void fireEventAccessoryAttributeChanged(const bool& EventAccessory) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PowerTailGateWarnState.
    virtual void firePowerTailGateWarnStateAttributeChanged(const bool& PowerTailGateWarnState) = 0;
    ///Notifies all remote listeners about a change of value of the attribute DisplayLanguage.
    virtual void fireDisplayLanguageAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE& DisplayLanguage) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_SccReaction.
    virtual void fireUsmDriverAssist_SccReactionAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_SccReaction) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlert.
    virtual void fireUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlert) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_DrivingAssist_LaneFollowingAssist.
    virtual void fireUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_DrivingAssist_LaneFollowingAssist) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_DrivingAssist_HighwayDrivingAssist.
    virtual void fireUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_DrivingAssist_HighwayDrivingAssist) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDown.
    virtual void fireUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDown) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDown.
    virtual void fireUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDown) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_DrivingAssist_SpeedLimitWarning.
    virtual void fireUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_DrivingAssist_SpeedLimitWarning) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_DriverAttentionWarning.
    virtual void fireUsmDriverAssist_DriverAttentionWarningAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_DriverAttentionWarning) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_WarningTiming.
    virtual void fireUsmDriverAssist_WarningTimingAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_WarningTiming) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_WarningVolume.
    virtual void fireUsmDriverAssist_WarningVolumeAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_WarningVolume) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_LaneSafety.
    virtual void fireUsmDriverAssist_LaneSafetyAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_LaneSafety) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_LaneSafety_Mode.
    virtual void fireUsmDriverAssist_LaneSafety_ModeAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_LaneSafety_Mode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_ForwardSafety.
    virtual void fireUsmDriverAssist_ForwardSafetyAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_ForwardSafety) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_BlindSpotSafety_SpotView.
    virtual void fireUsmDriverAssist_BlindSpotSafety_SpotViewAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_BlindSpotSafety_SpotView) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_BlindSpotSafety_SafetyExitAssist.
    virtual void fireUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_BlindSpotSafety_SafetyExitAssist) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_BlindSpotSafety_WarningOnly.
    virtual void fireUsmDriverAssist_BlindSpotSafety_WarningOnlyAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_BlindSpotSafety_WarningOnly) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafety.
    virtual void fireUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafety) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDoor_AutoLock.
    virtual void fireUsmDoor_AutoLockAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDoor_AutoLock) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDoor_AutoUnlock_KeyOrPower.
    virtual void fireUsmDoor_AutoUnlock_KeyOrPowerAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDoor_AutoUnlock_KeyOrPower) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDoor_AutoUnlock.
    virtual void fireUsmDoor_AutoUnlockAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDoor_AutoUnlock) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDoor_HornFeedback.
    virtual void fireUsmDoor_HornFeedbackAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDoor_HornFeedback) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDoor_PowerTailgate.
    virtual void fireUsmDoor_PowerTailgateAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDoor_PowerTailgate) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDoor_PowerTailgateSpeed.
    virtual void fireUsmDoor_PowerTailgateSpeedAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDoor_PowerTailgateSpeed) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmDoor_SmartTailgate.
    virtual void fireUsmDoor_SmartTailgateAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmDoor_SmartTailgate) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmLights_OneTouchTurnSignal.
    virtual void fireUsmLights_OneTouchTurnSignalAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmLights_OneTouchTurnSignal) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmLights_AmbientLight.
    virtual void fireUsmLights_AmbientLightAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmLights_AmbientLight) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmLights_HeadlightDelay.
    virtual void fireUsmLights_HeadlightDelayAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmLights_HeadlightDelay) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmLights_HighBeamAssist.
    virtual void fireUsmLights_HighBeamAssistAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmLights_HighBeamAssist) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmSound_ClusterVoiceGuidanceVolume.
    virtual void fireUsmSound_ClusterVoiceGuidanceVolumeAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmSound_ClusterVoiceGuidanceVolume) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmSound_ParkAssistVolume.
    virtual void fireUsmSound_ParkAssistVolumeAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmSound_ParkAssistVolume) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmSound_WelcomeSound.
    virtual void fireUsmSound_WelcomeSoundAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmSound_WelcomeSound) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmConvenience_SeatEasyAccess.
    virtual void fireUsmConvenience_SeatEasyAccessAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmConvenience_SeatEasyAccess) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmConvenience_WelcomeMirrorLight_Title.
    virtual void fireUsmConvenience_WelcomeMirrorLight_TitleAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmConvenience_WelcomeMirrorLight_Title) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmConvenience_WelcomeMirrorLight_OnDoorUnlock.
    virtual void fireUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmConvenience_WelcomeMirrorLight_OnDoorUnlock) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmConvenience_WelcomeMirrorLight_OnDriverApproach.
    virtual void fireUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmConvenience_WelcomeMirrorLight_OnDriverApproach) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmConvenience_MirrorAutoFolding.
    virtual void fireUsmConvenience_MirrorAutoFoldingAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmConvenience_MirrorAutoFolding) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmConvenience_WirelessChargingSystem.
    virtual void fireUsmConvenience_WirelessChargingSystemAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmConvenience_WirelessChargingSystem) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmConvenience_TrafficInformation.
    virtual void fireUsmConvenience_TrafficInformationAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmConvenience_TrafficInformation) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmConvenience_WipreLightsDisplay.
    virtual void fireUsmConvenience_WipreLightsDisplayAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmConvenience_WipreLightsDisplay) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmConvenience_AutoRearWiperInR.
    virtual void fireUsmConvenience_AutoRearWiperInRAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmConvenience_AutoRearWiperInR) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmConvenience_GearPositionPopup.
    virtual void fireUsmConvenience_GearPositionPopupAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmConvenience_GearPositionPopup) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmConvenience_IcyRoadWarning.
    virtual void fireUsmConvenience_IcyRoadWarningAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmConvenience_IcyRoadWarning) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmServiceInterval_Mode.
    virtual void fireUsmServiceInterval_ModeAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmServiceInterval_Mode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmServiceInterval_EnableServiceInterval.
    virtual void fireUsmServiceInterval_EnableServiceIntervalAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmServiceInterval_EnableServiceInterval) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmServiceInterval_Reset.
    virtual void fireUsmServiceInterval_ResetAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmServiceInterval_Reset) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmOther_FuelEconomyReset.
    virtual void fireUsmOther_FuelEconomyResetAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmOther_FuelEconomyReset) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmOther_FuelEconomyUnit.
    virtual void fireUsmOther_FuelEconomyUnitAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmOther_FuelEconomyUnit) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmOther_TemperatureUnit.
    virtual void fireUsmOther_TemperatureUnitAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmOther_TemperatureUnit) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmOther_TirePressureUnit.
    virtual void fireUsmOther_TirePressureUnitAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmOther_TirePressureUnit) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmOther_SpeedUnit.
    virtual void fireUsmOther_SpeedUnitAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmOther_SpeedUnit) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmOther_TorqueUnit.
    virtual void fireUsmOther_TorqueUnitAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmOther_TorqueUnit) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmOther_TurboBoostPressureUnit.
    virtual void fireUsmOther_TurboBoostPressureUnitAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmOther_TurboBoostPressureUnit) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmEcoVehicle_GreenZoneEVDrive.
    virtual void fireUsmEcoVehicle_GreenZoneEVDriveAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmEcoVehicle_GreenZoneEVDrive) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmEcoVehicle_CoastingGuideEnable.
    virtual void fireUsmEcoVehicle_CoastingGuideEnableAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmEcoVehicle_CoastingGuideEnable) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmEcoVehicle_CoastingGuideSound.
    virtual void fireUsmEcoVehicle_CoastingGuideSoundAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmEcoVehicle_CoastingGuideSound) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmEcoVehicle_StartCoasting.
    virtual void fireUsmEcoVehicle_StartCoastingAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmEcoVehicle_StartCoasting) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmEcoVehicle_ChargingConnectorLockingMode.
    virtual void fireUsmEcoVehicle_ChargingConnectorLockingModeAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmEcoVehicle_ChargingConnectorLockingMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmEcoVehicle_ChargingConnectorCondition.
    virtual void fireUsmEcoVehicle_ChargingConnectorConditionAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmEcoVehicle_ChargingConnectorCondition) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmEcoVehicle_AuxiliaryBatterySaverPlus.
    virtual void fireUsmEcoVehicle_AuxiliaryBatterySaverPlusAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmEcoVehicle_AuxiliaryBatterySaverPlus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmLanguage.
    virtual void fireUsmLanguageAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmLanguage) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmService_Reminder.
    virtual void fireUsmService_ReminderAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMServiceReminder& UsmService_Reminder) = 0;
    ///Notifies all remote listeners about a change of value of the attribute UsmEcoVehicle_VolumeControlFunctionForVESS.
    virtual void fireUsmEcoVehicle_VolumeControlFunctionForVESSAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& UsmEcoVehicle_VolumeControlFunctionForVESS) = 0;
    ///Notifies all remote listeners about a change of value of the attribute lastTabInfo.
    virtual void fireLastTabInfoAttributeChanged(const ::v1::proj::dcluster::McuManager::McuManagerTypes::GroupTabInfo& lastTabInfo) = 0;

    /**
    * Sends a broadcast event for NotifySteerWheelKey. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifySteerWheelKeyEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumStreerWheelKey &_sw_key) = 0;
    /**
    * Sends a broadcast event for NotifyIGNState. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifyIGNStateEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState &_ign_state) = 0;
    /**
    * Sends a broadcast event for NotifyContentsGearState. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifyContentsGearStateEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo &_gear_info) = 0;
    /**
    * Sends a broadcast event for NotifyEventContents. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifyEventContentsEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo &_event_info) = 0;
    /**
    * Sends a broadcast event for NotifyMasterWarnInfo. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifyMasterWarnInfoEvent() = 0;
    /**
    * Sends a broadcast event for NotifyMasterWarnCmd. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifyMasterWarnCmdEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd &_cmd) = 0;
    /**
    * Sends a broadcast event for NotifySound. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireNotifySoundEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo &_channel_1, const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo &_channel_2, const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo &_channel_3, const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo &_channel_4) = 0;


    virtual void deactivateManagedInstances() = 0;

    void lockMainContentsDisplayControlAttribute(bool _lockAccess) {
        if (_lockAccess) {
            mainContentsDisplayControlMutex_.lock();
        } else {
            mainContentsDisplayControlMutex_.unlock();
        }
    }
    void lockDrivingStateAttribute(bool _lockAccess) {
        if (_lockAccess) {
            drivingStateMutex_.lock();
        } else {
            drivingStateMutex_.unlock();
        }
    }
    void lockDriveModeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            driveModeMutex_.lock();
        } else {
            driveModeMutex_.unlock();
        }
    }
    void lockVariantAttribute(bool _lockAccess) {
        if (_lockAccess) {
            variantMutex_.lock();
        } else {
            variantMutex_.unlock();
        }
    }
    void lockEOLAttribute(bool _lockAccess) {
        if (_lockAccess) {
            eOLMutex_.lock();
        } else {
            eOLMutex_.unlock();
        }
    }
    void lockSWVariantAttribute(bool _lockAccess) {
        if (_lockAccess) {
            sWVariantMutex_.lock();
        } else {
            sWVariantMutex_.unlock();
        }
    }
    void lockIGN1StateAttribute(bool _lockAccess) {
        if (_lockAccess) {
            iGN1StateMutex_.lock();
        } else {
            iGN1StateMutex_.unlock();
        }
    }
    void lockIGN3StateAttribute(bool _lockAccess) {
        if (_lockAccess) {
            iGN3StateMutex_.lock();
        } else {
            iGN3StateMutex_.unlock();
        }
    }
    void lockSpeedoUnitAttribute(bool _lockAccess) {
        if (_lockAccess) {
            speedoUnitMutex_.lock();
        } else {
            speedoUnitMutex_.unlock();
        }
    }
    void lockTripDriveModeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tripDriveModeMutex_.lock();
        } else {
            tripDriveModeMutex_.unlock();
        }
    }
    void lockTripDTEAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tripDTEMutex_.lock();
        } else {
            tripDTEMutex_.unlock();
        }
    }
    void lockTripFuelEconomyAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tripFuelEconomyMutex_.lock();
        } else {
            tripFuelEconomyMutex_.unlock();
        }
    }
    void lockTripAccumulatedAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tripAccumulatedMutex_.lock();
        } else {
            tripAccumulatedMutex_.unlock();
        }
    }
    void lockTripDriveInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tripDriveInfoMutex_.lock();
        } else {
            tripDriveInfoMutex_.unlock();
        }
    }
    void lockTripDigitalSpeedMeterAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tripDigitalSpeedMeterMutex_.lock();
        } else {
            tripDigitalSpeedMeterMutex_.unlock();
        }
    }
    void lockTripPowerFlowDiagramAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tripPowerFlowDiagramMutex_.lock();
        } else {
            tripPowerFlowDiagramMutex_.unlock();
        }
    }
    void lockTripUREALevelAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tripUREALevelMutex_.lock();
        } else {
            tripUREALevelMutex_.unlock();
        }
    }
    void lockTripTransmissionTempAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tripTransmissionTempMutex_.lock();
        } else {
            tripTransmissionTempMutex_.unlock();
        }
    }
    void lockTripEngineCoolantTempAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tripEngineCoolantTempMutex_.lock();
        } else {
            tripEngineCoolantTempMutex_.unlock();
        }
    }
    void lockEnergyFlowAttribute(bool _lockAccess) {
        if (_lockAccess) {
            energyFlowMutex_.lock();
        } else {
            energyFlowMutex_.unlock();
        }
    }
    void lockMyDrivingModeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            myDrivingModeMutex_.lock();
        } else {
            myDrivingModeMutex_.unlock();
        }
    }
    void lockTBTDisplayTypeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTDisplayTypeMutex_.lock();
        } else {
            tBTDisplayTypeMutex_.unlock();
        }
    }
    void lockTBTDisplayTollgateAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTDisplayTollgateMutex_.lock();
        } else {
            tBTDisplayTollgateMutex_.unlock();
        }
    }
    void lockTBTPreliminaryInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTPreliminaryInfoMutex_.lock();
        } else {
            tBTPreliminaryInfoMutex_.unlock();
        }
    }
    void lockTBTDestInfoPageStateAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTDestInfoPageStateMutex_.lock();
        } else {
            tBTDestInfoPageStateMutex_.unlock();
        }
    }
    void lockTBTPointTypeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTPointTypeMutex_.lock();
        } else {
            tBTPointTypeMutex_.unlock();
        }
    }
    void lockTBTDirectionAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTDirectionMutex_.lock();
        } else {
            tBTDirectionMutex_.unlock();
        }
    }
    void lockTBTRoadDisplayAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTRoadDisplayMutex_.lock();
        } else {
            tBTRoadDisplayMutex_.unlock();
        }
    }
    void lockTBTSideRoadDisplayAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTSideRoadDisplayMutex_.lock();
        } else {
            tBTSideRoadDisplayMutex_.unlock();
        }
    }
    void lockTBTDistanceToDestinationAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTDistanceToDestinationMutex_.lock();
        } else {
            tBTDistanceToDestinationMutex_.unlock();
        }
    }
    void lockTBTDistanceUntilTurnAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTDistanceUntilTurnMutex_.lock();
        } else {
            tBTDistanceUntilTurnMutex_.unlock();
        }
    }
    void lockTBTExpectedDestTimeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTExpectedDestTimeMutex_.lock();
        } else {
            tBTExpectedDestTimeMutex_.unlock();
        }
    }
    void lockTBTExpectedRemainTimeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTExpectedRemainTimeMutex_.lock();
        } else {
            tBTExpectedRemainTimeMutex_.unlock();
        }
    }
    void lockTBTGuideTPInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTGuideTPInfoMutex_.lock();
        } else {
            tBTGuideTPInfoMutex_.unlock();
        }
    }
    void lockTBTDestTPInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTDestTPInfoMutex_.lock();
        } else {
            tBTDestTPInfoMutex_.unlock();
        }
    }
    void lockTBTViaPoint1TPInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTViaPoint1TPInfoMutex_.lock();
        } else {
            tBTViaPoint1TPInfoMutex_.unlock();
        }
    }
    void lockTBTViaPoint2TPInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTViaPoint2TPInfoMutex_.lock();
        } else {
            tBTViaPoint2TPInfoMutex_.unlock();
        }
    }
    void lockTBTViaPoint3TPInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTViaPoint3TPInfoMutex_.lock();
        } else {
            tBTViaPoint3TPInfoMutex_.unlock();
        }
    }
    void lockTBTViaPoint4TPInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            tBTViaPoint4TPInfoMutex_.lock();
        } else {
            tBTViaPoint4TPInfoMutex_.unlock();
        }
    }
    void lockDriveAssistCruiseControlTTCAttribute(bool _lockAccess) {
        if (_lockAccess) {
            driveAssistCruiseControlTTCMutex_.lock();
        } else {
            driveAssistCruiseControlTTCMutex_.unlock();
        }
    }
    void lockDriveAssistCruiseControlRealAttribute(bool _lockAccess) {
        if (_lockAccess) {
            driveAssistCruiseControlRealMutex_.lock();
        } else {
            driveAssistCruiseControlRealMutex_.unlock();
        }
    }
    void lockDriveAssistLaneAttribute(bool _lockAccess) {
        if (_lockAccess) {
            driveAssistLaneMutex_.lock();
        } else {
            driveAssistLaneMutex_.unlock();
        }
    }
    void lockDriveAssistDAWAttribute(bool _lockAccess) {
        if (_lockAccess) {
            driveAssistDAWMutex_.lock();
        } else {
            driveAssistDAWMutex_.unlock();
        }
    }
    void lockDriveAssistISLWAttribute(bool _lockAccess) {
        if (_lockAccess) {
            driveAssistISLWMutex_.lock();
        } else {
            driveAssistISLWMutex_.unlock();
        }
    }
    void lockDriveAssistAWDAttribute(bool _lockAccess) {
        if (_lockAccess) {
            driveAssistAWDMutex_.lock();
        } else {
            driveAssistAWDMutex_.unlock();
        }
    }
    void lockDriveAssistTPMSAttribute(bool _lockAccess) {
        if (_lockAccess) {
            driveAssistTPMSMutex_.lock();
        } else {
            driveAssistTPMSMutex_.unlock();
        }
    }
    void lockAdasInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            adasInfoMutex_.lock();
        } else {
            adasInfoMutex_.unlock();
        }
    }
    void lockContentsGearAttribute(bool _lockAccess) {
        if (_lockAccess) {
            contentsGearMutex_.lock();
        } else {
            contentsGearMutex_.unlock();
        }
    }
    void lockContentsCCAttribute(bool _lockAccess) {
        if (_lockAccess) {
            contentsCCMutex_.lock();
        } else {
            contentsCCMutex_.unlock();
        }
    }
    void lockContentsSCCAttribute(bool _lockAccess) {
        if (_lockAccess) {
            contentsSCCMutex_.lock();
        } else {
            contentsSCCMutex_.unlock();
        }
    }
    void lockContentsCoastingAttribute(bool _lockAccess) {
        if (_lockAccess) {
            contentsCoastingMutex_.lock();
        } else {
            contentsCoastingMutex_.unlock();
        }
    }
    void lockContentsDISAttribute(bool _lockAccess) {
        if (_lockAccess) {
            contentsDISMutex_.lock();
        } else {
            contentsDISMutex_.unlock();
        }
    }
    void lockContentsDTEInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            contentsDTEInfoMutex_.lock();
        } else {
            contentsDTEInfoMutex_.unlock();
        }
    }
    void lockContentsISLWAttribute(bool _lockAccess) {
        if (_lockAccess) {
            contentsISLWMutex_.lock();
        } else {
            contentsISLWMutex_.unlock();
        }
    }
    void lockContentsOATAttribute(bool _lockAccess) {
        if (_lockAccess) {
            contentsOATMutex_.lock();
        } else {
            contentsOATMutex_.unlock();
        }
    }
    void lockContentsODOMeterAttribute(bool _lockAccess) {
        if (_lockAccess) {
            contentsODOMeterMutex_.lock();
        } else {
            contentsODOMeterMutex_.unlock();
        }
    }
    void lockEcoPowerDisplayInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            ecoPowerDisplayInfoMutex_.lock();
        } else {
            ecoPowerDisplayInfoMutex_.unlock();
        }
    }
    void lockContentsRSBRAttribute(bool _lockAccess) {
        if (_lockAccess) {
            contentsRSBRMutex_.lock();
        } else {
            contentsRSBRMutex_.unlock();
        }
    }
    void lockContentsSpeedLimitAttribute(bool _lockAccess) {
        if (_lockAccess) {
            contentsSpeedLimitMutex_.lock();
        } else {
            contentsSpeedLimitMutex_.unlock();
        }
    }
    void lockMasterWarnCmdAttribute(bool _lockAccess) {
        if (_lockAccess) {
            masterWarnCmdMutex_.lock();
        } else {
            masterWarnCmdMutex_.unlock();
        }
    }
    void lockAvTpAMFMInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            avTpAMFMInfoMutex_.lock();
        } else {
            avTpAMFMInfoMutex_.unlock();
        }
    }
    void lockAvTpXMInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            avTpXMInfoMutex_.lock();
        } else {
            avTpXMInfoMutex_.unlock();
        }
    }
    void lockAvTpDABInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            avTpDABInfoMutex_.lock();
        } else {
            avTpDABInfoMutex_.unlock();
        }
    }
    void lockAvTpDMBInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            avTpDMBInfoMutex_.lock();
        } else {
            avTpDMBInfoMutex_.unlock();
        }
    }
    void lockAvTpJukeBoxInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            avTpJukeBoxInfoMutex_.lock();
        } else {
            avTpJukeBoxInfoMutex_.unlock();
        }
    }
    void lockAvTpIpodInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            avTpIpodInfoMutex_.lock();
        } else {
            avTpIpodInfoMutex_.unlock();
        }
    }
    void lockAvTpUSBInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            avTpUSBInfoMutex_.lock();
        } else {
            avTpUSBInfoMutex_.unlock();
        }
    }
    void lockAvTpBlueToothInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            avTpBlueToothInfoMutex_.lock();
        } else {
            avTpBlueToothInfoMutex_.unlock();
        }
    }
    void lockAvTpAppleCarPlayInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            avTpAppleCarPlayInfoMutex_.lock();
        } else {
            avTpAppleCarPlayInfoMutex_.unlock();
        }
    }
    void lockAvTpAndroidAutoInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            avTpAndroidAutoInfoMutex_.lock();
        } else {
            avTpAndroidAutoInfoMutex_.unlock();
        }
    }
    void lockAvTpIboxInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            avTpIboxInfoMutex_.lock();
        } else {
            avTpIboxInfoMutex_.unlock();
        }
    }
    void lockAvTpCDInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            avTpCDInfoMutex_.lock();
        } else {
            avTpCDInfoMutex_.unlock();
        }
    }
    void lockAvTpBaiduMInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            avTpBaiduMInfoMutex_.lock();
        } else {
            avTpBaiduMInfoMutex_.unlock();
        }
    }
    void lockEventContentsFullAttribute(bool _lockAccess) {
        if (_lockAccess) {
            eventContentsFullMutex_.lock();
        } else {
            eventContentsFullMutex_.unlock();
        }
    }
    void lockEventContentsMiniAttribute(bool _lockAccess) {
        if (_lockAccess) {
            eventContentsMiniMutex_.lock();
        } else {
            eventContentsMiniMutex_.unlock();
        }
    }
    void lockEventAccessoryAttribute(bool _lockAccess) {
        if (_lockAccess) {
            eventAccessoryMutex_.lock();
        } else {
            eventAccessoryMutex_.unlock();
        }
    }
    void lockPowerTailGateWarnStateAttribute(bool _lockAccess) {
        if (_lockAccess) {
            powerTailGateWarnStateMutex_.lock();
        } else {
            powerTailGateWarnStateMutex_.unlock();
        }
    }
    void lockDisplayLanguageAttribute(bool _lockAccess) {
        if (_lockAccess) {
            displayLanguageMutex_.lock();
        } else {
            displayLanguageMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_SccReactionAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_SccReactionMutex_.lock();
        } else {
            usmDriverAssist_SccReactionMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertMutex_.lock();
        } else {
            usmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_DrivingAssist_LaneFollowingAssistMutex_.lock();
        } else {
            usmDriverAssist_DrivingAssist_LaneFollowingAssistMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_DrivingAssist_HighwayDrivingAssistMutex_.lock();
        } else {
            usmDriverAssist_DrivingAssist_HighwayDrivingAssistMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownMutex_.lock();
        } else {
            usmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownMutex_.lock();
        } else {
            usmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_DrivingAssist_SpeedLimitWarningMutex_.lock();
        } else {
            usmDriverAssist_DrivingAssist_SpeedLimitWarningMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_DriverAttentionWarningAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_DriverAttentionWarningMutex_.lock();
        } else {
            usmDriverAssist_DriverAttentionWarningMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_WarningTimingAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_WarningTimingMutex_.lock();
        } else {
            usmDriverAssist_WarningTimingMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_WarningVolumeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_WarningVolumeMutex_.lock();
        } else {
            usmDriverAssist_WarningVolumeMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_LaneSafetyAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_LaneSafetyMutex_.lock();
        } else {
            usmDriverAssist_LaneSafetyMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_LaneSafety_ModeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_LaneSafety_ModeMutex_.lock();
        } else {
            usmDriverAssist_LaneSafety_ModeMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_ForwardSafetyAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_ForwardSafetyMutex_.lock();
        } else {
            usmDriverAssist_ForwardSafetyMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_BlindSpotSafety_SpotViewAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_BlindSpotSafety_SpotViewMutex_.lock();
        } else {
            usmDriverAssist_BlindSpotSafety_SpotViewMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_BlindSpotSafety_SafetyExitAssistMutex_.lock();
        } else {
            usmDriverAssist_BlindSpotSafety_SafetyExitAssistMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_BlindSpotSafety_WarningOnlyMutex_.lock();
        } else {
            usmDriverAssist_BlindSpotSafety_WarningOnlyMutex_.unlock();
        }
    }
    void lockUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyMutex_.lock();
        } else {
            usmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyMutex_.unlock();
        }
    }
    void lockUsmDoor_AutoLockAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDoor_AutoLockMutex_.lock();
        } else {
            usmDoor_AutoLockMutex_.unlock();
        }
    }
    void lockUsmDoor_AutoUnlock_KeyOrPowerAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDoor_AutoUnlock_KeyOrPowerMutex_.lock();
        } else {
            usmDoor_AutoUnlock_KeyOrPowerMutex_.unlock();
        }
    }
    void lockUsmDoor_AutoUnlockAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDoor_AutoUnlockMutex_.lock();
        } else {
            usmDoor_AutoUnlockMutex_.unlock();
        }
    }
    void lockUsmDoor_HornFeedbackAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDoor_HornFeedbackMutex_.lock();
        } else {
            usmDoor_HornFeedbackMutex_.unlock();
        }
    }
    void lockUsmDoor_PowerTailgateAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDoor_PowerTailgateMutex_.lock();
        } else {
            usmDoor_PowerTailgateMutex_.unlock();
        }
    }
    void lockUsmDoor_PowerTailgateSpeedAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDoor_PowerTailgateSpeedMutex_.lock();
        } else {
            usmDoor_PowerTailgateSpeedMutex_.unlock();
        }
    }
    void lockUsmDoor_SmartTailgateAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmDoor_SmartTailgateMutex_.lock();
        } else {
            usmDoor_SmartTailgateMutex_.unlock();
        }
    }
    void lockUsmLights_OneTouchTurnSignalAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmLights_OneTouchTurnSignalMutex_.lock();
        } else {
            usmLights_OneTouchTurnSignalMutex_.unlock();
        }
    }
    void lockUsmLights_AmbientLightAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmLights_AmbientLightMutex_.lock();
        } else {
            usmLights_AmbientLightMutex_.unlock();
        }
    }
    void lockUsmLights_HeadlightDelayAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmLights_HeadlightDelayMutex_.lock();
        } else {
            usmLights_HeadlightDelayMutex_.unlock();
        }
    }
    void lockUsmLights_HighBeamAssistAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmLights_HighBeamAssistMutex_.lock();
        } else {
            usmLights_HighBeamAssistMutex_.unlock();
        }
    }
    void lockUsmSound_ClusterVoiceGuidanceVolumeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmSound_ClusterVoiceGuidanceVolumeMutex_.lock();
        } else {
            usmSound_ClusterVoiceGuidanceVolumeMutex_.unlock();
        }
    }
    void lockUsmSound_ParkAssistVolumeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmSound_ParkAssistVolumeMutex_.lock();
        } else {
            usmSound_ParkAssistVolumeMutex_.unlock();
        }
    }
    void lockUsmSound_WelcomeSoundAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmSound_WelcomeSoundMutex_.lock();
        } else {
            usmSound_WelcomeSoundMutex_.unlock();
        }
    }
    void lockUsmConvenience_SeatEasyAccessAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmConvenience_SeatEasyAccessMutex_.lock();
        } else {
            usmConvenience_SeatEasyAccessMutex_.unlock();
        }
    }
    void lockUsmConvenience_WelcomeMirrorLight_TitleAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmConvenience_WelcomeMirrorLight_TitleMutex_.lock();
        } else {
            usmConvenience_WelcomeMirrorLight_TitleMutex_.unlock();
        }
    }
    void lockUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmConvenience_WelcomeMirrorLight_OnDoorUnlockMutex_.lock();
        } else {
            usmConvenience_WelcomeMirrorLight_OnDoorUnlockMutex_.unlock();
        }
    }
    void lockUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmConvenience_WelcomeMirrorLight_OnDriverApproachMutex_.lock();
        } else {
            usmConvenience_WelcomeMirrorLight_OnDriverApproachMutex_.unlock();
        }
    }
    void lockUsmConvenience_MirrorAutoFoldingAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmConvenience_MirrorAutoFoldingMutex_.lock();
        } else {
            usmConvenience_MirrorAutoFoldingMutex_.unlock();
        }
    }
    void lockUsmConvenience_WirelessChargingSystemAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmConvenience_WirelessChargingSystemMutex_.lock();
        } else {
            usmConvenience_WirelessChargingSystemMutex_.unlock();
        }
    }
    void lockUsmConvenience_TrafficInformationAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmConvenience_TrafficInformationMutex_.lock();
        } else {
            usmConvenience_TrafficInformationMutex_.unlock();
        }
    }
    void lockUsmConvenience_WipreLightsDisplayAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmConvenience_WipreLightsDisplayMutex_.lock();
        } else {
            usmConvenience_WipreLightsDisplayMutex_.unlock();
        }
    }
    void lockUsmConvenience_AutoRearWiperInRAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmConvenience_AutoRearWiperInRMutex_.lock();
        } else {
            usmConvenience_AutoRearWiperInRMutex_.unlock();
        }
    }
    void lockUsmConvenience_GearPositionPopupAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmConvenience_GearPositionPopupMutex_.lock();
        } else {
            usmConvenience_GearPositionPopupMutex_.unlock();
        }
    }
    void lockUsmConvenience_IcyRoadWarningAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmConvenience_IcyRoadWarningMutex_.lock();
        } else {
            usmConvenience_IcyRoadWarningMutex_.unlock();
        }
    }
    void lockUsmServiceInterval_ModeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmServiceInterval_ModeMutex_.lock();
        } else {
            usmServiceInterval_ModeMutex_.unlock();
        }
    }
    void lockUsmServiceInterval_EnableServiceIntervalAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmServiceInterval_EnableServiceIntervalMutex_.lock();
        } else {
            usmServiceInterval_EnableServiceIntervalMutex_.unlock();
        }
    }
    void lockUsmServiceInterval_ResetAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmServiceInterval_ResetMutex_.lock();
        } else {
            usmServiceInterval_ResetMutex_.unlock();
        }
    }
    void lockUsmOther_FuelEconomyResetAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmOther_FuelEconomyResetMutex_.lock();
        } else {
            usmOther_FuelEconomyResetMutex_.unlock();
        }
    }
    void lockUsmOther_FuelEconomyUnitAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmOther_FuelEconomyUnitMutex_.lock();
        } else {
            usmOther_FuelEconomyUnitMutex_.unlock();
        }
    }
    void lockUsmOther_TemperatureUnitAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmOther_TemperatureUnitMutex_.lock();
        } else {
            usmOther_TemperatureUnitMutex_.unlock();
        }
    }
    void lockUsmOther_TirePressureUnitAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmOther_TirePressureUnitMutex_.lock();
        } else {
            usmOther_TirePressureUnitMutex_.unlock();
        }
    }
    void lockUsmOther_SpeedUnitAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmOther_SpeedUnitMutex_.lock();
        } else {
            usmOther_SpeedUnitMutex_.unlock();
        }
    }
    void lockUsmOther_TorqueUnitAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmOther_TorqueUnitMutex_.lock();
        } else {
            usmOther_TorqueUnitMutex_.unlock();
        }
    }
    void lockUsmOther_TurboBoostPressureUnitAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmOther_TurboBoostPressureUnitMutex_.lock();
        } else {
            usmOther_TurboBoostPressureUnitMutex_.unlock();
        }
    }
    void lockUsmEcoVehicle_GreenZoneEVDriveAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmEcoVehicle_GreenZoneEVDriveMutex_.lock();
        } else {
            usmEcoVehicle_GreenZoneEVDriveMutex_.unlock();
        }
    }
    void lockUsmEcoVehicle_CoastingGuideEnableAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmEcoVehicle_CoastingGuideEnableMutex_.lock();
        } else {
            usmEcoVehicle_CoastingGuideEnableMutex_.unlock();
        }
    }
    void lockUsmEcoVehicle_CoastingGuideSoundAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmEcoVehicle_CoastingGuideSoundMutex_.lock();
        } else {
            usmEcoVehicle_CoastingGuideSoundMutex_.unlock();
        }
    }
    void lockUsmEcoVehicle_StartCoastingAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmEcoVehicle_StartCoastingMutex_.lock();
        } else {
            usmEcoVehicle_StartCoastingMutex_.unlock();
        }
    }
    void lockUsmEcoVehicle_ChargingConnectorLockingModeAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmEcoVehicle_ChargingConnectorLockingModeMutex_.lock();
        } else {
            usmEcoVehicle_ChargingConnectorLockingModeMutex_.unlock();
        }
    }
    void lockUsmEcoVehicle_ChargingConnectorConditionAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmEcoVehicle_ChargingConnectorConditionMutex_.lock();
        } else {
            usmEcoVehicle_ChargingConnectorConditionMutex_.unlock();
        }
    }
    void lockUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmEcoVehicle_AuxiliaryBatterySaverPlusMutex_.lock();
        } else {
            usmEcoVehicle_AuxiliaryBatterySaverPlusMutex_.unlock();
        }
    }
    void lockUsmLanguageAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmLanguageMutex_.lock();
        } else {
            usmLanguageMutex_.unlock();
        }
    }
    void lockUsmService_ReminderAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmService_ReminderMutex_.lock();
        } else {
            usmService_ReminderMutex_.unlock();
        }
    }
    void lockUsmEcoVehicle_VolumeControlFunctionForVESSAttribute(bool _lockAccess) {
        if (_lockAccess) {
            usmEcoVehicle_VolumeControlFunctionForVESSMutex_.lock();
        } else {
            usmEcoVehicle_VolumeControlFunctionForVESSMutex_.unlock();
        }
    }
    void lockLastTabInfoAttribute(bool _lockAccess) {
        if (_lockAccess) {
            lastTabInfoMutex_.lock();
        } else {
            lastTabInfoMutex_.unlock();
        }
    }

protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

    std::recursive_mutex mainContentsDisplayControlMutex_;
    std::recursive_mutex drivingStateMutex_;
    std::recursive_mutex driveModeMutex_;
    std::recursive_mutex variantMutex_;
    std::recursive_mutex eOLMutex_;
    std::recursive_mutex sWVariantMutex_;
    std::recursive_mutex iGN1StateMutex_;
    std::recursive_mutex iGN3StateMutex_;
    std::recursive_mutex speedoUnitMutex_;
    std::recursive_mutex tripDriveModeMutex_;
    std::recursive_mutex tripDTEMutex_;
    std::recursive_mutex tripFuelEconomyMutex_;
    std::recursive_mutex tripAccumulatedMutex_;
    std::recursive_mutex tripDriveInfoMutex_;
    std::recursive_mutex tripDigitalSpeedMeterMutex_;
    std::recursive_mutex tripPowerFlowDiagramMutex_;
    std::recursive_mutex tripUREALevelMutex_;
    std::recursive_mutex tripTransmissionTempMutex_;
    std::recursive_mutex tripEngineCoolantTempMutex_;
    std::recursive_mutex energyFlowMutex_;
    std::recursive_mutex myDrivingModeMutex_;
    std::recursive_mutex tBTDisplayTypeMutex_;
    std::recursive_mutex tBTDisplayTollgateMutex_;
    std::recursive_mutex tBTPreliminaryInfoMutex_;
    std::recursive_mutex tBTDestInfoPageStateMutex_;
    std::recursive_mutex tBTPointTypeMutex_;
    std::recursive_mutex tBTDirectionMutex_;
    std::recursive_mutex tBTRoadDisplayMutex_;
    std::recursive_mutex tBTSideRoadDisplayMutex_;
    std::recursive_mutex tBTDistanceToDestinationMutex_;
    std::recursive_mutex tBTDistanceUntilTurnMutex_;
    std::recursive_mutex tBTExpectedDestTimeMutex_;
    std::recursive_mutex tBTExpectedRemainTimeMutex_;
    std::recursive_mutex tBTGuideTPInfoMutex_;
    std::recursive_mutex tBTDestTPInfoMutex_;
    std::recursive_mutex tBTViaPoint1TPInfoMutex_;
    std::recursive_mutex tBTViaPoint2TPInfoMutex_;
    std::recursive_mutex tBTViaPoint3TPInfoMutex_;
    std::recursive_mutex tBTViaPoint4TPInfoMutex_;
    std::recursive_mutex driveAssistCruiseControlTTCMutex_;
    std::recursive_mutex driveAssistCruiseControlRealMutex_;
    std::recursive_mutex driveAssistLaneMutex_;
    std::recursive_mutex driveAssistDAWMutex_;
    std::recursive_mutex driveAssistISLWMutex_;
    std::recursive_mutex driveAssistAWDMutex_;
    std::recursive_mutex driveAssistTPMSMutex_;
    std::recursive_mutex adasInfoMutex_;
    std::recursive_mutex contentsGearMutex_;
    std::recursive_mutex contentsCCMutex_;
    std::recursive_mutex contentsSCCMutex_;
    std::recursive_mutex contentsCoastingMutex_;
    std::recursive_mutex contentsDISMutex_;
    std::recursive_mutex contentsDTEInfoMutex_;
    std::recursive_mutex contentsISLWMutex_;
    std::recursive_mutex contentsOATMutex_;
    std::recursive_mutex contentsODOMeterMutex_;
    std::recursive_mutex ecoPowerDisplayInfoMutex_;
    std::recursive_mutex contentsRSBRMutex_;
    std::recursive_mutex contentsSpeedLimitMutex_;
    std::recursive_mutex masterWarnCmdMutex_;
    std::recursive_mutex avTpAMFMInfoMutex_;
    std::recursive_mutex avTpXMInfoMutex_;
    std::recursive_mutex avTpDABInfoMutex_;
    std::recursive_mutex avTpDMBInfoMutex_;
    std::recursive_mutex avTpJukeBoxInfoMutex_;
    std::recursive_mutex avTpIpodInfoMutex_;
    std::recursive_mutex avTpUSBInfoMutex_;
    std::recursive_mutex avTpBlueToothInfoMutex_;
    std::recursive_mutex avTpAppleCarPlayInfoMutex_;
    std::recursive_mutex avTpAndroidAutoInfoMutex_;
    std::recursive_mutex avTpIboxInfoMutex_;
    std::recursive_mutex avTpCDInfoMutex_;
    std::recursive_mutex avTpBaiduMInfoMutex_;
    std::recursive_mutex eventContentsFullMutex_;
    std::recursive_mutex eventContentsMiniMutex_;
    std::recursive_mutex eventAccessoryMutex_;
    std::recursive_mutex powerTailGateWarnStateMutex_;
    std::recursive_mutex displayLanguageMutex_;
    std::recursive_mutex usmDriverAssist_SccReactionMutex_;
    std::recursive_mutex usmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertMutex_;
    std::recursive_mutex usmDriverAssist_DrivingAssist_LaneFollowingAssistMutex_;
    std::recursive_mutex usmDriverAssist_DrivingAssist_HighwayDrivingAssistMutex_;
    std::recursive_mutex usmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownMutex_;
    std::recursive_mutex usmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownMutex_;
    std::recursive_mutex usmDriverAssist_DrivingAssist_SpeedLimitWarningMutex_;
    std::recursive_mutex usmDriverAssist_DriverAttentionWarningMutex_;
    std::recursive_mutex usmDriverAssist_WarningTimingMutex_;
    std::recursive_mutex usmDriverAssist_WarningVolumeMutex_;
    std::recursive_mutex usmDriverAssist_LaneSafetyMutex_;
    std::recursive_mutex usmDriverAssist_LaneSafety_ModeMutex_;
    std::recursive_mutex usmDriverAssist_ForwardSafetyMutex_;
    std::recursive_mutex usmDriverAssist_BlindSpotSafety_SpotViewMutex_;
    std::recursive_mutex usmDriverAssist_BlindSpotSafety_SafetyExitAssistMutex_;
    std::recursive_mutex usmDriverAssist_BlindSpotSafety_WarningOnlyMutex_;
    std::recursive_mutex usmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyMutex_;
    std::recursive_mutex usmDoor_AutoLockMutex_;
    std::recursive_mutex usmDoor_AutoUnlock_KeyOrPowerMutex_;
    std::recursive_mutex usmDoor_AutoUnlockMutex_;
    std::recursive_mutex usmDoor_HornFeedbackMutex_;
    std::recursive_mutex usmDoor_PowerTailgateMutex_;
    std::recursive_mutex usmDoor_PowerTailgateSpeedMutex_;
    std::recursive_mutex usmDoor_SmartTailgateMutex_;
    std::recursive_mutex usmLights_OneTouchTurnSignalMutex_;
    std::recursive_mutex usmLights_AmbientLightMutex_;
    std::recursive_mutex usmLights_HeadlightDelayMutex_;
    std::recursive_mutex usmLights_HighBeamAssistMutex_;
    std::recursive_mutex usmSound_ClusterVoiceGuidanceVolumeMutex_;
    std::recursive_mutex usmSound_ParkAssistVolumeMutex_;
    std::recursive_mutex usmSound_WelcomeSoundMutex_;
    std::recursive_mutex usmConvenience_SeatEasyAccessMutex_;
    std::recursive_mutex usmConvenience_WelcomeMirrorLight_TitleMutex_;
    std::recursive_mutex usmConvenience_WelcomeMirrorLight_OnDoorUnlockMutex_;
    std::recursive_mutex usmConvenience_WelcomeMirrorLight_OnDriverApproachMutex_;
    std::recursive_mutex usmConvenience_MirrorAutoFoldingMutex_;
    std::recursive_mutex usmConvenience_WirelessChargingSystemMutex_;
    std::recursive_mutex usmConvenience_TrafficInformationMutex_;
    std::recursive_mutex usmConvenience_WipreLightsDisplayMutex_;
    std::recursive_mutex usmConvenience_AutoRearWiperInRMutex_;
    std::recursive_mutex usmConvenience_GearPositionPopupMutex_;
    std::recursive_mutex usmConvenience_IcyRoadWarningMutex_;
    std::recursive_mutex usmServiceInterval_ModeMutex_;
    std::recursive_mutex usmServiceInterval_EnableServiceIntervalMutex_;
    std::recursive_mutex usmServiceInterval_ResetMutex_;
    std::recursive_mutex usmOther_FuelEconomyResetMutex_;
    std::recursive_mutex usmOther_FuelEconomyUnitMutex_;
    std::recursive_mutex usmOther_TemperatureUnitMutex_;
    std::recursive_mutex usmOther_TirePressureUnitMutex_;
    std::recursive_mutex usmOther_SpeedUnitMutex_;
    std::recursive_mutex usmOther_TorqueUnitMutex_;
    std::recursive_mutex usmOther_TurboBoostPressureUnitMutex_;
    std::recursive_mutex usmEcoVehicle_GreenZoneEVDriveMutex_;
    std::recursive_mutex usmEcoVehicle_CoastingGuideEnableMutex_;
    std::recursive_mutex usmEcoVehicle_CoastingGuideSoundMutex_;
    std::recursive_mutex usmEcoVehicle_StartCoastingMutex_;
    std::recursive_mutex usmEcoVehicle_ChargingConnectorLockingModeMutex_;
    std::recursive_mutex usmEcoVehicle_ChargingConnectorConditionMutex_;
    std::recursive_mutex usmEcoVehicle_AuxiliaryBatterySaverPlusMutex_;
    std::recursive_mutex usmLanguageMutex_;
    std::recursive_mutex usmService_ReminderMutex_;
    std::recursive_mutex usmEcoVehicle_VolumeControlFunctionForVESSMutex_;
    std::recursive_mutex lastTabInfoMutex_;
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for McuManager.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class McuManagerStubRemoteEvent
{
public:
    virtual ~McuManagerStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute MainContentsDisplayControl
    virtual bool onRemoteSetMainContentsDisplayControlAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute MainContentsDisplayControl
    virtual void onRemoteMainContentsDisplayControlAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute DrivingState
    virtual bool onRemoteSetDrivingStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState _value) = 0;
    /// Action callback for remote set requests on the attribute DrivingState
    virtual void onRemoteDrivingStateAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute DriveMode
    virtual bool onRemoteSetDriveModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveModeInfo _value) = 0;
    /// Action callback for remote set requests on the attribute DriveMode
    virtual void onRemoteDriveModeAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute Variant
    virtual bool onRemoteSetVariantAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StVariantInfo _value) = 0;
    /// Action callback for remote set requests on the attribute Variant
    virtual void onRemoteVariantAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute EOL
    virtual bool onRemoteSetEOLAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEOLInfo _value) = 0;
    /// Action callback for remote set requests on the attribute EOL
    virtual void onRemoteEOLAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute SWVariant
    virtual bool onRemoteSetSWVariantAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StSWVariantInfo _value) = 0;
    /// Action callback for remote set requests on the attribute SWVariant
    virtual void onRemoteSWVariantAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute IGN1State
    virtual bool onRemoteSetIGN1StateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) = 0;
    /// Action callback for remote set requests on the attribute IGN1State
    virtual void onRemoteIGN1StateAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute IGN3State
    virtual bool onRemoteSetIGN3StateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) = 0;
    /// Action callback for remote set requests on the attribute IGN3State
    virtual void onRemoteIGN3StateAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute SpeedoUnit
    virtual bool onRemoteSetSpeedoUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit _value) = 0;
    /// Action callback for remote set requests on the attribute SpeedoUnit
    virtual void onRemoteSpeedoUnitAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TripDriveMode
    virtual bool onRemoteSetTripDriveModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveModeInfo _value) = 0;
    /// Action callback for remote set requests on the attribute TripDriveMode
    virtual void onRemoteTripDriveModeAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TripDTE
    virtual bool onRemoteSetTripDTEAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDTEInfo _value) = 0;
    /// Action callback for remote set requests on the attribute TripDTE
    virtual void onRemoteTripDTEAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TripFuelEconomy
    virtual bool onRemoteSetTripFuelEconomyAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripFuelEconomyInfo _value) = 0;
    /// Action callback for remote set requests on the attribute TripFuelEconomy
    virtual void onRemoteTripFuelEconomyAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TripAccumulated
    virtual bool onRemoteSetTripAccumulatedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripAccumulatedInfo _value) = 0;
    /// Action callback for remote set requests on the attribute TripAccumulated
    virtual void onRemoteTripAccumulatedAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TripDriveInfo
    virtual bool onRemoteSetTripDriveInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveInfo _value) = 0;
    /// Action callback for remote set requests on the attribute TripDriveInfo
    virtual void onRemoteTripDriveInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TripDigitalSpeedMeter
    virtual bool onRemoteSetTripDigitalSpeedMeterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripSpeedMeter _value) = 0;
    /// Action callback for remote set requests on the attribute TripDigitalSpeedMeter
    virtual void onRemoteTripDigitalSpeedMeterAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TripPowerFlowDiagram
    virtual bool onRemoteSetTripPowerFlowDiagramAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow _value) = 0;
    /// Action callback for remote set requests on the attribute TripPowerFlowDiagram
    virtual void onRemoteTripPowerFlowDiagramAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TripUREALevel
    virtual bool onRemoteSetTripUREALevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) = 0;
    /// Action callback for remote set requests on the attribute TripUREALevel
    virtual void onRemoteTripUREALevelAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TripTransmissionTemp
    virtual bool onRemoteSetTripTransmissionTempAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel _value) = 0;
    /// Action callback for remote set requests on the attribute TripTransmissionTemp
    virtual void onRemoteTripTransmissionTempAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TripEngineCoolantTemp
    virtual bool onRemoteSetTripEngineCoolantTempAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEngineCoolantTemp _value) = 0;
    /// Action callback for remote set requests on the attribute TripEngineCoolantTemp
    virtual void onRemoteTripEngineCoolantTempAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute EnergyFlow
    virtual bool onRemoteSetEnergyFlowAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEnergyFlowInfo _value) = 0;
    /// Action callback for remote set requests on the attribute EnergyFlow
    virtual void onRemoteEnergyFlowAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute MyDrivingMode
    virtual bool onRemoteSetMyDrivingModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StMyDrvModeInfo _value) = 0;
    /// Action callback for remote set requests on the attribute MyDrivingMode
    virtual void onRemoteMyDrivingModeAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTDisplayType
    virtual bool onRemoteSetTBTDisplayTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType _value) = 0;
    /// Action callback for remote set requests on the attribute TBTDisplayType
    virtual void onRemoteTBTDisplayTypeAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTDisplayTollgate
    virtual bool onRemoteSetTBTDisplayTollgateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute TBTDisplayTollgate
    virtual void onRemoteTBTDisplayTollgateAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTPreliminaryInfo
    virtual bool onRemoteSetTBTPreliminaryInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) = 0;
    /// Action callback for remote set requests on the attribute TBTPreliminaryInfo
    virtual void onRemoteTBTPreliminaryInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTDestInfoPageState
    virtual bool onRemoteSetTBTDestInfoPageStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState _value) = 0;
    /// Action callback for remote set requests on the attribute TBTDestInfoPageState
    virtual void onRemoteTBTDestInfoPageStateAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTPointType
    virtual bool onRemoteSetTBTPointTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType _value) = 0;
    /// Action callback for remote set requests on the attribute TBTPointType
    virtual void onRemoteTBTPointTypeAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTDirection
    virtual bool onRemoteSetTBTDirectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) = 0;
    /// Action callback for remote set requests on the attribute TBTDirection
    virtual void onRemoteTBTDirectionAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTRoadDisplay
    virtual bool onRemoteSetTBTRoadDisplayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value) = 0;
    /// Action callback for remote set requests on the attribute TBTRoadDisplay
    virtual void onRemoteTBTRoadDisplayAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTSideRoadDisplay
    virtual bool onRemoteSetTBTSideRoadDisplayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) = 0;
    /// Action callback for remote set requests on the attribute TBTSideRoadDisplay
    virtual void onRemoteTBTSideRoadDisplayAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTDistanceToDestination
    virtual bool onRemoteSetTBTDistanceToDestinationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDistDestInfo _value) = 0;
    /// Action callback for remote set requests on the attribute TBTDistanceToDestination
    virtual void onRemoteTBTDistanceToDestinationAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTDistanceUntilTurn
    virtual bool onRemoteSetTBTDistanceUntilTurnAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTTurnInfo _value) = 0;
    /// Action callback for remote set requests on the attribute TBTDistanceUntilTurn
    virtual void onRemoteTBTDistanceUntilTurnAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTExpectedDestTime
    virtual bool onRemoteSetTBTExpectedDestTimeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDestinationTime _value) = 0;
    /// Action callback for remote set requests on the attribute TBTExpectedDestTime
    virtual void onRemoteTBTExpectedDestTimeAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTExpectedRemainTime
    virtual bool onRemoteSetTBTExpectedRemainTimeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTRemainTime _value) = 0;
    /// Action callback for remote set requests on the attribute TBTExpectedRemainTime
    virtual void onRemoteTBTExpectedRemainTimeAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTGuideTPInfo
    virtual bool onRemoteSetTBTGuideTPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute TBTGuideTPInfo
    virtual void onRemoteTBTGuideTPInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTDestTPInfo
    virtual bool onRemoteSetTBTDestTPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute TBTDestTPInfo
    virtual void onRemoteTBTDestTPInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTViaPoint1TPInfo
    virtual bool onRemoteSetTBTViaPoint1TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute TBTViaPoint1TPInfo
    virtual void onRemoteTBTViaPoint1TPInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTViaPoint2TPInfo
    virtual bool onRemoteSetTBTViaPoint2TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute TBTViaPoint2TPInfo
    virtual void onRemoteTBTViaPoint2TPInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTViaPoint3TPInfo
    virtual bool onRemoteSetTBTViaPoint3TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute TBTViaPoint3TPInfo
    virtual void onRemoteTBTViaPoint3TPInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute TBTViaPoint4TPInfo
    virtual bool onRemoteSetTBTViaPoint4TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute TBTViaPoint4TPInfo
    virtual void onRemoteTBTViaPoint4TPInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute DriveAssistCruiseControlTTC
    virtual bool onRemoteSetDriveAssistCruiseControlTTCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoTTC _value) = 0;
    /// Action callback for remote set requests on the attribute DriveAssistCruiseControlTTC
    virtual void onRemoteDriveAssistCruiseControlTTCAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute DriveAssistCruiseControlReal
    virtual bool onRemoteSetDriveAssistCruiseControlRealAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoReal _value) = 0;
    /// Action callback for remote set requests on the attribute DriveAssistCruiseControlReal
    virtual void onRemoteDriveAssistCruiseControlRealAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute DriveAssistLane
    virtual bool onRemoteSetDriveAssistLaneAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistLaneInfo _value) = 0;
    /// Action callback for remote set requests on the attribute DriveAssistLane
    virtual void onRemoteDriveAssistLaneAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute DriveAssistDAW
    virtual bool onRemoteSetDriveAssistDAWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistDAWInfo _value) = 0;
    /// Action callback for remote set requests on the attribute DriveAssistDAW
    virtual void onRemoteDriveAssistDAWAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute DriveAssistISLW
    virtual bool onRemoteSetDriveAssistISLWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistISLWInfo _value) = 0;
    /// Action callback for remote set requests on the attribute DriveAssistISLW
    virtual void onRemoteDriveAssistISLWAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute DriveAssistAWD
    virtual bool onRemoteSetDriveAssistAWDAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistAWDInfo _value) = 0;
    /// Action callback for remote set requests on the attribute DriveAssistAWD
    virtual void onRemoteDriveAssistAWDAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute DriveAssistTPMS
    virtual bool onRemoteSetDriveAssistTPMSAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistTPMSInfo _value) = 0;
    /// Action callback for remote set requests on the attribute DriveAssistTPMS
    virtual void onRemoteDriveAssistTPMSAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AdasInfo
    virtual bool onRemoteSetAdasInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StAdasInfo _value) = 0;
    /// Action callback for remote set requests on the attribute AdasInfo
    virtual void onRemoteAdasInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute ContentsGear
    virtual bool onRemoteSetContentsGearAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo _value) = 0;
    /// Action callback for remote set requests on the attribute ContentsGear
    virtual void onRemoteContentsGearAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute ContentsCC
    virtual bool onRemoteSetContentsCCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCCInfo _value) = 0;
    /// Action callback for remote set requests on the attribute ContentsCC
    virtual void onRemoteContentsCCAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute ContentsSCC
    virtual bool onRemoteSetContentsSCCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSCCInfo _value) = 0;
    /// Action callback for remote set requests on the attribute ContentsSCC
    virtual void onRemoteContentsSCCAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute ContentsCoasting
    virtual bool onRemoteSetContentsCoastingAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCoasting _value) = 0;
    /// Action callback for remote set requests on the attribute ContentsCoasting
    virtual void onRemoteContentsCoastingAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute ContentsDIS
    virtual bool onRemoteSetContentsDISAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDISInfo _value) = 0;
    /// Action callback for remote set requests on the attribute ContentsDIS
    virtual void onRemoteContentsDISAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute ContentsDTEInfo
    virtual bool onRemoteSetContentsDTEInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDTE _value) = 0;
    /// Action callback for remote set requests on the attribute ContentsDTEInfo
    virtual void onRemoteContentsDTEInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute ContentsISLW
    virtual bool onRemoteSetContentsISLWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsISLWInfo _value) = 0;
    /// Action callback for remote set requests on the attribute ContentsISLW
    virtual void onRemoteContentsISLWAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute ContentsOAT
    virtual bool onRemoteSetContentsOATAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsOAT _value) = 0;
    /// Action callback for remote set requests on the attribute ContentsOAT
    virtual void onRemoteContentsOATAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute ContentsODOMeter
    virtual bool onRemoteSetContentsODOMeterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsODO _value) = 0;
    /// Action callback for remote set requests on the attribute ContentsODOMeter
    virtual void onRemoteContentsODOMeterAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute EcoPowerDisplayInfo
    virtual bool onRemoteSetEcoPowerDisplayInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState _value) = 0;
    /// Action callback for remote set requests on the attribute EcoPowerDisplayInfo
    virtual void onRemoteEcoPowerDisplayInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute ContentsRSBR
    virtual bool onRemoteSetContentsRSBRAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsRSBRInfo _value) = 0;
    /// Action callback for remote set requests on the attribute ContentsRSBR
    virtual void onRemoteContentsRSBRAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute ContentsSpeedLimit
    virtual bool onRemoteSetContentsSpeedLimitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSpdLimitInfo _value) = 0;
    /// Action callback for remote set requests on the attribute ContentsSpeedLimit
    virtual void onRemoteContentsSpeedLimitAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute MasterWarnCmd
    virtual bool onRemoteSetMasterWarnCmdAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd _value) = 0;
    /// Action callback for remote set requests on the attribute MasterWarnCmd
    virtual void onRemoteMasterWarnCmdAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AvTpAMFMInfo
    virtual bool onRemoteSetAvTpAMFMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute AvTpAMFMInfo
    virtual void onRemoteAvTpAMFMInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AvTpXMInfo
    virtual bool onRemoteSetAvTpXMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute AvTpXMInfo
    virtual void onRemoteAvTpXMInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AvTpDABInfo
    virtual bool onRemoteSetAvTpDABInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute AvTpDABInfo
    virtual void onRemoteAvTpDABInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AvTpDMBInfo
    virtual bool onRemoteSetAvTpDMBInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute AvTpDMBInfo
    virtual void onRemoteAvTpDMBInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AvTpJukeBoxInfo
    virtual bool onRemoteSetAvTpJukeBoxInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute AvTpJukeBoxInfo
    virtual void onRemoteAvTpJukeBoxInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AvTpIpodInfo
    virtual bool onRemoteSetAvTpIpodInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute AvTpIpodInfo
    virtual void onRemoteAvTpIpodInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AvTpUSBInfo
    virtual bool onRemoteSetAvTpUSBInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute AvTpUSBInfo
    virtual void onRemoteAvTpUSBInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AvTpBlueToothInfo
    virtual bool onRemoteSetAvTpBlueToothInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute AvTpBlueToothInfo
    virtual void onRemoteAvTpBlueToothInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AvTpAppleCarPlayInfo
    virtual bool onRemoteSetAvTpAppleCarPlayInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute AvTpAppleCarPlayInfo
    virtual void onRemoteAvTpAppleCarPlayInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AvTpAndroidAutoInfo
    virtual bool onRemoteSetAvTpAndroidAutoInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute AvTpAndroidAutoInfo
    virtual void onRemoteAvTpAndroidAutoInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AvTpIboxInfo
    virtual bool onRemoteSetAvTpIboxInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute AvTpIboxInfo
    virtual void onRemoteAvTpIboxInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AvTpCDInfo
    virtual bool onRemoteSetAvTpCDInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute AvTpCDInfo
    virtual void onRemoteAvTpCDInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute AvTpBaiduMInfo
    virtual bool onRemoteSetAvTpBaiduMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) = 0;
    /// Action callback for remote set requests on the attribute AvTpBaiduMInfo
    virtual void onRemoteAvTpBaiduMInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute EventContentsFull
    virtual bool onRemoteSetEventContentsFullAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) = 0;
    /// Action callback for remote set requests on the attribute EventContentsFull
    virtual void onRemoteEventContentsFullAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute EventContentsMini
    virtual bool onRemoteSetEventContentsMiniAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) = 0;
    /// Action callback for remote set requests on the attribute EventContentsMini
    virtual void onRemoteEventContentsMiniAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute EventAccessory
    virtual bool onRemoteSetEventAccessoryAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute EventAccessory
    virtual void onRemoteEventAccessoryAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute PowerTailGateWarnState
    virtual bool onRemoteSetPowerTailGateWarnStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute PowerTailGateWarnState
    virtual void onRemotePowerTailGateWarnStateAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute DisplayLanguage
    virtual bool onRemoteSetDisplayLanguageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE _value) = 0;
    /// Action callback for remote set requests on the attribute DisplayLanguage
    virtual void onRemoteDisplayLanguageAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service McuManager to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class McuManagerStub
    : public virtual CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>
{
public:
    typedef std::function<void (bool _result)>CommandReply_t;

    virtual ~McuManagerStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }

    /// Provides getter access to the attribute MainContentsDisplayControl
    virtual const bool &getMainContentsDisplayControlAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireMainContentsDisplayControlAttributeChanged(bool _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireMainContentsDisplayControlAttributeChanged(_value);
    }
    void lockMainContentsDisplayControlAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockMainContentsDisplayControlAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute DrivingState
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState &getDrivingStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDrivingStateAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDrivingStateAttributeChanged(_value);
    }
    void lockDrivingStateAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDrivingStateAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute DriveMode
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveModeInfo &getDriveModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDriveModeAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveModeInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDriveModeAttributeChanged(_value);
    }
    void lockDriveModeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDriveModeAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute Variant
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StVariantInfo &getVariantAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireVariantAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StVariantInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireVariantAttributeChanged(_value);
    }
    void lockVariantAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockVariantAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute EOL
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEOLInfo &getEOLAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireEOLAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StEOLInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireEOLAttributeChanged(_value);
    }
    void lockEOLAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockEOLAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute SWVariant
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSWVariantInfo &getSWVariantAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireSWVariantAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StSWVariantInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireSWVariantAttributeChanged(_value);
    }
    void lockSWVariantAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockSWVariantAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute IGN1State
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState &getIGN1StateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireIGN1StateAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireIGN1StateAttributeChanged(_value);
    }
    void lockIGN1StateAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockIGN1StateAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute IGN3State
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState &getIGN3StateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireIGN3StateAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireIGN3StateAttributeChanged(_value);
    }
    void lockIGN3StateAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockIGN3StateAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute SpeedoUnit
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit &getSpeedoUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireSpeedoUnitAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireSpeedoUnitAttributeChanged(_value);
    }
    void lockSpeedoUnitAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockSpeedoUnitAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TripDriveMode
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveModeInfo &getTripDriveModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTripDriveModeAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveModeInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTripDriveModeAttributeChanged(_value);
    }
    void lockTripDriveModeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTripDriveModeAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TripDTE
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDTEInfo &getTripDTEAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTripDTEAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDTEInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTripDTEAttributeChanged(_value);
    }
    void lockTripDTEAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTripDTEAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TripFuelEconomy
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripFuelEconomyInfo &getTripFuelEconomyAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTripFuelEconomyAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripFuelEconomyInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTripFuelEconomyAttributeChanged(_value);
    }
    void lockTripFuelEconomyAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTripFuelEconomyAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TripAccumulated
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripAccumulatedInfo &getTripAccumulatedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTripAccumulatedAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripAccumulatedInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTripAccumulatedAttributeChanged(_value);
    }
    void lockTripAccumulatedAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTripAccumulatedAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TripDriveInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveInfo &getTripDriveInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTripDriveInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTripDriveInfoAttributeChanged(_value);
    }
    void lockTripDriveInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTripDriveInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TripDigitalSpeedMeter
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripSpeedMeter &getTripDigitalSpeedMeterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTripDigitalSpeedMeterAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripSpeedMeter _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTripDigitalSpeedMeterAttributeChanged(_value);
    }
    void lockTripDigitalSpeedMeterAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTripDigitalSpeedMeterAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TripPowerFlowDiagram
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow &getTripPowerFlowDiagramAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTripPowerFlowDiagramAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTripPowerFlowDiagramAttributeChanged(_value);
    }
    void lockTripPowerFlowDiagramAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTripPowerFlowDiagramAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TripUREALevel
    virtual const uint8_t &getTripUREALevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTripUREALevelAttributeChanged(uint8_t _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTripUREALevelAttributeChanged(_value);
    }
    void lockTripUREALevelAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTripUREALevelAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TripTransmissionTemp
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel &getTripTransmissionTempAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTripTransmissionTempAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTripTransmissionTempAttributeChanged(_value);
    }
    void lockTripTransmissionTempAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTripTransmissionTempAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TripEngineCoolantTemp
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEngineCoolantTemp &getTripEngineCoolantTempAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTripEngineCoolantTempAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StEngineCoolantTemp _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTripEngineCoolantTempAttributeChanged(_value);
    }
    void lockTripEngineCoolantTempAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTripEngineCoolantTempAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute EnergyFlow
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEnergyFlowInfo &getEnergyFlowAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireEnergyFlowAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StEnergyFlowInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireEnergyFlowAttributeChanged(_value);
    }
    void lockEnergyFlowAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockEnergyFlowAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute MyDrivingMode
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StMyDrvModeInfo &getMyDrivingModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireMyDrivingModeAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StMyDrvModeInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireMyDrivingModeAttributeChanged(_value);
    }
    void lockMyDrivingModeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockMyDrivingModeAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTDisplayType
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType &getTBTDisplayTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTDisplayTypeAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTDisplayTypeAttributeChanged(_value);
    }
    void lockTBTDisplayTypeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTDisplayTypeAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTDisplayTollgate
    virtual const bool &getTBTDisplayTollgateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTDisplayTollgateAttributeChanged(bool _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTDisplayTollgateAttributeChanged(_value);
    }
    void lockTBTDisplayTollgateAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTDisplayTollgateAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTPreliminaryInfo
    virtual const uint8_t &getTBTPreliminaryInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTPreliminaryInfoAttributeChanged(uint8_t _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTPreliminaryInfoAttributeChanged(_value);
    }
    void lockTBTPreliminaryInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTPreliminaryInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTDestInfoPageState
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState &getTBTDestInfoPageStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTDestInfoPageStateAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTDestInfoPageStateAttributeChanged(_value);
    }
    void lockTBTDestInfoPageStateAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTDestInfoPageStateAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTPointType
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType &getTBTPointTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTPointTypeAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTPointTypeAttributeChanged(_value);
    }
    void lockTBTPointTypeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTPointTypeAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTDirection
    virtual const uint8_t &getTBTDirectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTDirectionAttributeChanged(uint8_t _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTDirectionAttributeChanged(_value);
    }
    void lockTBTDirectionAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTDirectionAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTRoadDisplay
    virtual const uint16_t &getTBTRoadDisplayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTRoadDisplayAttributeChanged(uint16_t _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTRoadDisplayAttributeChanged(_value);
    }
    void lockTBTRoadDisplayAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTRoadDisplayAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTSideRoadDisplay
    virtual const uint8_t &getTBTSideRoadDisplayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTSideRoadDisplayAttributeChanged(uint8_t _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTSideRoadDisplayAttributeChanged(_value);
    }
    void lockTBTSideRoadDisplayAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTSideRoadDisplayAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTDistanceToDestination
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDistDestInfo &getTBTDistanceToDestinationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTDistanceToDestinationAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDistDestInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTDistanceToDestinationAttributeChanged(_value);
    }
    void lockTBTDistanceToDestinationAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTDistanceToDestinationAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTDistanceUntilTurn
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTTurnInfo &getTBTDistanceUntilTurnAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTDistanceUntilTurnAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTTurnInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTDistanceUntilTurnAttributeChanged(_value);
    }
    void lockTBTDistanceUntilTurnAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTDistanceUntilTurnAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTExpectedDestTime
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDestinationTime &getTBTExpectedDestTimeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTExpectedDestTimeAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDestinationTime _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTExpectedDestTimeAttributeChanged(_value);
    }
    void lockTBTExpectedDestTimeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTExpectedDestTimeAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTExpectedRemainTime
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTRemainTime &getTBTExpectedRemainTimeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTExpectedRemainTimeAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTRemainTime _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTExpectedRemainTimeAttributeChanged(_value);
    }
    void lockTBTExpectedRemainTimeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTExpectedRemainTimeAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTGuideTPInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getTBTGuideTPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTGuideTPInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTGuideTPInfoAttributeChanged(_value);
    }
    void lockTBTGuideTPInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTGuideTPInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTDestTPInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getTBTDestTPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTDestTPInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTDestTPInfoAttributeChanged(_value);
    }
    void lockTBTDestTPInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTDestTPInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTViaPoint1TPInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getTBTViaPoint1TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTViaPoint1TPInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTViaPoint1TPInfoAttributeChanged(_value);
    }
    void lockTBTViaPoint1TPInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTViaPoint1TPInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTViaPoint2TPInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getTBTViaPoint2TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTViaPoint2TPInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTViaPoint2TPInfoAttributeChanged(_value);
    }
    void lockTBTViaPoint2TPInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTViaPoint2TPInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTViaPoint3TPInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getTBTViaPoint3TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTViaPoint3TPInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTViaPoint3TPInfoAttributeChanged(_value);
    }
    void lockTBTViaPoint3TPInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTViaPoint3TPInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute TBTViaPoint4TPInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getTBTViaPoint4TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTBTViaPoint4TPInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTBTViaPoint4TPInfoAttributeChanged(_value);
    }
    void lockTBTViaPoint4TPInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTBTViaPoint4TPInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute DriveAssistCruiseControlTTC
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoTTC &getDriveAssistCruiseControlTTCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDriveAssistCruiseControlTTCAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoTTC _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDriveAssistCruiseControlTTCAttributeChanged(_value);
    }
    void lockDriveAssistCruiseControlTTCAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDriveAssistCruiseControlTTCAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute DriveAssistCruiseControlReal
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoReal &getDriveAssistCruiseControlRealAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDriveAssistCruiseControlRealAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoReal _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDriveAssistCruiseControlRealAttributeChanged(_value);
    }
    void lockDriveAssistCruiseControlRealAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDriveAssistCruiseControlRealAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute DriveAssistLane
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistLaneInfo &getDriveAssistLaneAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDriveAssistLaneAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistLaneInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDriveAssistLaneAttributeChanged(_value);
    }
    void lockDriveAssistLaneAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDriveAssistLaneAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute DriveAssistDAW
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistDAWInfo &getDriveAssistDAWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDriveAssistDAWAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistDAWInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDriveAssistDAWAttributeChanged(_value);
    }
    void lockDriveAssistDAWAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDriveAssistDAWAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute DriveAssistISLW
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistISLWInfo &getDriveAssistISLWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDriveAssistISLWAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistISLWInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDriveAssistISLWAttributeChanged(_value);
    }
    void lockDriveAssistISLWAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDriveAssistISLWAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute DriveAssistAWD
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistAWDInfo &getDriveAssistAWDAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDriveAssistAWDAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistAWDInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDriveAssistAWDAttributeChanged(_value);
    }
    void lockDriveAssistAWDAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDriveAssistAWDAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute DriveAssistTPMS
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistTPMSInfo &getDriveAssistTPMSAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDriveAssistTPMSAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistTPMSInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDriveAssistTPMSAttributeChanged(_value);
    }
    void lockDriveAssistTPMSAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDriveAssistTPMSAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AdasInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StAdasInfo &getAdasInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAdasInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StAdasInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAdasInfoAttributeChanged(_value);
    }
    void lockAdasInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAdasInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute ContentsGear
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo &getContentsGearAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireContentsGearAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireContentsGearAttributeChanged(_value);
    }
    void lockContentsGearAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockContentsGearAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute ContentsCC
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCCInfo &getContentsCCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireContentsCCAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCCInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireContentsCCAttributeChanged(_value);
    }
    void lockContentsCCAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockContentsCCAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute ContentsSCC
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSCCInfo &getContentsSCCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireContentsSCCAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSCCInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireContentsSCCAttributeChanged(_value);
    }
    void lockContentsSCCAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockContentsSCCAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute ContentsCoasting
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCoasting &getContentsCoastingAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireContentsCoastingAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCoasting _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireContentsCoastingAttributeChanged(_value);
    }
    void lockContentsCoastingAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockContentsCoastingAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute ContentsDIS
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDISInfo &getContentsDISAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireContentsDISAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDISInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireContentsDISAttributeChanged(_value);
    }
    void lockContentsDISAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockContentsDISAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute ContentsDTEInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDTE &getContentsDTEInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireContentsDTEInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDTE _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireContentsDTEInfoAttributeChanged(_value);
    }
    void lockContentsDTEInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockContentsDTEInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute ContentsISLW
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsISLWInfo &getContentsISLWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireContentsISLWAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsISLWInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireContentsISLWAttributeChanged(_value);
    }
    void lockContentsISLWAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockContentsISLWAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute ContentsOAT
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsOAT &getContentsOATAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireContentsOATAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsOAT _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireContentsOATAttributeChanged(_value);
    }
    void lockContentsOATAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockContentsOATAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute ContentsODOMeter
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsODO &getContentsODOMeterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireContentsODOMeterAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsODO _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireContentsODOMeterAttributeChanged(_value);
    }
    void lockContentsODOMeterAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockContentsODOMeterAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute EcoPowerDisplayInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState &getEcoPowerDisplayInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireEcoPowerDisplayInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireEcoPowerDisplayInfoAttributeChanged(_value);
    }
    void lockEcoPowerDisplayInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockEcoPowerDisplayInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute ContentsRSBR
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsRSBRInfo &getContentsRSBRAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireContentsRSBRAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsRSBRInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireContentsRSBRAttributeChanged(_value);
    }
    void lockContentsRSBRAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockContentsRSBRAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute ContentsSpeedLimit
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSpdLimitInfo &getContentsSpeedLimitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireContentsSpeedLimitAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSpdLimitInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireContentsSpeedLimitAttributeChanged(_value);
    }
    void lockContentsSpeedLimitAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockContentsSpeedLimitAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute MasterWarnCmd
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd &getMasterWarnCmdAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireMasterWarnCmdAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireMasterWarnCmdAttributeChanged(_value);
    }
    void lockMasterWarnCmdAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockMasterWarnCmdAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AvTpAMFMInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getAvTpAMFMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAvTpAMFMInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAvTpAMFMInfoAttributeChanged(_value);
    }
    void lockAvTpAMFMInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAvTpAMFMInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AvTpXMInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getAvTpXMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAvTpXMInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAvTpXMInfoAttributeChanged(_value);
    }
    void lockAvTpXMInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAvTpXMInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AvTpDABInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getAvTpDABInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAvTpDABInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAvTpDABInfoAttributeChanged(_value);
    }
    void lockAvTpDABInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAvTpDABInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AvTpDMBInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getAvTpDMBInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAvTpDMBInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAvTpDMBInfoAttributeChanged(_value);
    }
    void lockAvTpDMBInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAvTpDMBInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AvTpJukeBoxInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getAvTpJukeBoxInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAvTpJukeBoxInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAvTpJukeBoxInfoAttributeChanged(_value);
    }
    void lockAvTpJukeBoxInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAvTpJukeBoxInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AvTpIpodInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getAvTpIpodInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAvTpIpodInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAvTpIpodInfoAttributeChanged(_value);
    }
    void lockAvTpIpodInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAvTpIpodInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AvTpUSBInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getAvTpUSBInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAvTpUSBInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAvTpUSBInfoAttributeChanged(_value);
    }
    void lockAvTpUSBInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAvTpUSBInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AvTpBlueToothInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getAvTpBlueToothInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAvTpBlueToothInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAvTpBlueToothInfoAttributeChanged(_value);
    }
    void lockAvTpBlueToothInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAvTpBlueToothInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AvTpAppleCarPlayInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getAvTpAppleCarPlayInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAvTpAppleCarPlayInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAvTpAppleCarPlayInfoAttributeChanged(_value);
    }
    void lockAvTpAppleCarPlayInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAvTpAppleCarPlayInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AvTpAndroidAutoInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getAvTpAndroidAutoInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAvTpAndroidAutoInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAvTpAndroidAutoInfoAttributeChanged(_value);
    }
    void lockAvTpAndroidAutoInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAvTpAndroidAutoInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AvTpIboxInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getAvTpIboxInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAvTpIboxInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAvTpIboxInfoAttributeChanged(_value);
    }
    void lockAvTpIboxInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAvTpIboxInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AvTpCDInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getAvTpCDInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAvTpCDInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAvTpCDInfoAttributeChanged(_value);
    }
    void lockAvTpCDInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAvTpCDInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute AvTpBaiduMInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &getAvTpBaiduMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAvTpBaiduMInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAvTpBaiduMInfoAttributeChanged(_value);
    }
    void lockAvTpBaiduMInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAvTpBaiduMInfoAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute EventContentsFull
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo &getEventContentsFullAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireEventContentsFullAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireEventContentsFullAttributeChanged(_value);
    }
    void lockEventContentsFullAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockEventContentsFullAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute EventContentsMini
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo &getEventContentsMiniAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireEventContentsMiniAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireEventContentsMiniAttributeChanged(_value);
    }
    void lockEventContentsMiniAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockEventContentsMiniAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute EventAccessory
    virtual const bool &getEventAccessoryAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireEventAccessoryAttributeChanged(bool _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireEventAccessoryAttributeChanged(_value);
    }
    void lockEventAccessoryAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockEventAccessoryAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute PowerTailGateWarnState
    virtual const bool &getPowerTailGateWarnStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void firePowerTailGateWarnStateAttributeChanged(bool _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->firePowerTailGateWarnStateAttributeChanged(_value);
    }
    void lockPowerTailGateWarnStateAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockPowerTailGateWarnStateAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute DisplayLanguage
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE &getDisplayLanguageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDisplayLanguageAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDisplayLanguageAttributeChanged(_value);
    }
    void lockDisplayLanguageAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDisplayLanguageAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_SccReaction
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_SccReactionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_SccReactionAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_SccReactionAttributeChanged(_value);
    }
    void lockUsmDriverAssist_SccReactionAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_SccReactionAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlert
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeChanged(_value);
    }
    void lockUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_DrivingAssist_LaneFollowingAssist
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeChanged(_value);
    }
    void lockUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_DrivingAssist_HighwayDrivingAssist
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeChanged(_value);
    }
    void lockUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDown
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeChanged(_value);
    }
    void lockUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDown
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeChanged(_value);
    }
    void lockUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_DrivingAssist_SpeedLimitWarning
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeChanged(_value);
    }
    void lockUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_DriverAttentionWarning
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_DriverAttentionWarningAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_DriverAttentionWarningAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_DriverAttentionWarningAttributeChanged(_value);
    }
    void lockUsmDriverAssist_DriverAttentionWarningAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_DriverAttentionWarningAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_WarningTiming
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_WarningTimingAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_WarningTimingAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_WarningTimingAttributeChanged(_value);
    }
    void lockUsmDriverAssist_WarningTimingAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_WarningTimingAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_WarningVolume
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_WarningVolumeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_WarningVolumeAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_WarningVolumeAttributeChanged(_value);
    }
    void lockUsmDriverAssist_WarningVolumeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_WarningVolumeAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_LaneSafety
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_LaneSafetyAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_LaneSafetyAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_LaneSafetyAttributeChanged(_value);
    }
    void lockUsmDriverAssist_LaneSafetyAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_LaneSafetyAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_LaneSafety_Mode
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_LaneSafety_ModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_LaneSafety_ModeAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_LaneSafety_ModeAttributeChanged(_value);
    }
    void lockUsmDriverAssist_LaneSafety_ModeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_LaneSafety_ModeAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_ForwardSafety
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_ForwardSafetyAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_ForwardSafetyAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_ForwardSafetyAttributeChanged(_value);
    }
    void lockUsmDriverAssist_ForwardSafetyAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_ForwardSafetyAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_BlindSpotSafety_SpotView
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_BlindSpotSafety_SpotViewAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_BlindSpotSafety_SpotViewAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_BlindSpotSafety_SpotViewAttributeChanged(_value);
    }
    void lockUsmDriverAssist_BlindSpotSafety_SpotViewAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_BlindSpotSafety_SpotViewAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_BlindSpotSafety_SafetyExitAssist
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeChanged(_value);
    }
    void lockUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_BlindSpotSafety_WarningOnly
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_BlindSpotSafety_WarningOnlyAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_BlindSpotSafety_WarningOnlyAttributeChanged(_value);
    }
    void lockUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafety
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeChanged(_value);
    }
    void lockUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDoor_AutoLock
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDoor_AutoLockAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDoor_AutoLockAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDoor_AutoLockAttributeChanged(_value);
    }
    void lockUsmDoor_AutoLockAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDoor_AutoLockAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDoor_AutoUnlock_KeyOrPower
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDoor_AutoUnlock_KeyOrPowerAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDoor_AutoUnlock_KeyOrPowerAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDoor_AutoUnlock_KeyOrPowerAttributeChanged(_value);
    }
    void lockUsmDoor_AutoUnlock_KeyOrPowerAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDoor_AutoUnlock_KeyOrPowerAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDoor_AutoUnlock
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDoor_AutoUnlockAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDoor_AutoUnlockAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDoor_AutoUnlockAttributeChanged(_value);
    }
    void lockUsmDoor_AutoUnlockAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDoor_AutoUnlockAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDoor_HornFeedback
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDoor_HornFeedbackAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDoor_HornFeedbackAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDoor_HornFeedbackAttributeChanged(_value);
    }
    void lockUsmDoor_HornFeedbackAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDoor_HornFeedbackAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDoor_PowerTailgate
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDoor_PowerTailgateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDoor_PowerTailgateAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDoor_PowerTailgateAttributeChanged(_value);
    }
    void lockUsmDoor_PowerTailgateAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDoor_PowerTailgateAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDoor_PowerTailgateSpeed
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDoor_PowerTailgateSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDoor_PowerTailgateSpeedAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDoor_PowerTailgateSpeedAttributeChanged(_value);
    }
    void lockUsmDoor_PowerTailgateSpeedAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDoor_PowerTailgateSpeedAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmDoor_SmartTailgate
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmDoor_SmartTailgateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmDoor_SmartTailgateAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmDoor_SmartTailgateAttributeChanged(_value);
    }
    void lockUsmDoor_SmartTailgateAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmDoor_SmartTailgateAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmLights_OneTouchTurnSignal
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmLights_OneTouchTurnSignalAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmLights_OneTouchTurnSignalAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmLights_OneTouchTurnSignalAttributeChanged(_value);
    }
    void lockUsmLights_OneTouchTurnSignalAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmLights_OneTouchTurnSignalAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmLights_AmbientLight
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmLights_AmbientLightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmLights_AmbientLightAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmLights_AmbientLightAttributeChanged(_value);
    }
    void lockUsmLights_AmbientLightAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmLights_AmbientLightAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmLights_HeadlightDelay
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmLights_HeadlightDelayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmLights_HeadlightDelayAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmLights_HeadlightDelayAttributeChanged(_value);
    }
    void lockUsmLights_HeadlightDelayAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmLights_HeadlightDelayAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmLights_HighBeamAssist
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmLights_HighBeamAssistAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmLights_HighBeamAssistAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmLights_HighBeamAssistAttributeChanged(_value);
    }
    void lockUsmLights_HighBeamAssistAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmLights_HighBeamAssistAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmSound_ClusterVoiceGuidanceVolume
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmSound_ClusterVoiceGuidanceVolumeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmSound_ClusterVoiceGuidanceVolumeAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmSound_ClusterVoiceGuidanceVolumeAttributeChanged(_value);
    }
    void lockUsmSound_ClusterVoiceGuidanceVolumeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmSound_ClusterVoiceGuidanceVolumeAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmSound_ParkAssistVolume
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmSound_ParkAssistVolumeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmSound_ParkAssistVolumeAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmSound_ParkAssistVolumeAttributeChanged(_value);
    }
    void lockUsmSound_ParkAssistVolumeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmSound_ParkAssistVolumeAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmSound_WelcomeSound
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmSound_WelcomeSoundAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmSound_WelcomeSoundAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmSound_WelcomeSoundAttributeChanged(_value);
    }
    void lockUsmSound_WelcomeSoundAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmSound_WelcomeSoundAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmConvenience_SeatEasyAccess
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmConvenience_SeatEasyAccessAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmConvenience_SeatEasyAccessAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmConvenience_SeatEasyAccessAttributeChanged(_value);
    }
    void lockUsmConvenience_SeatEasyAccessAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmConvenience_SeatEasyAccessAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmConvenience_WelcomeMirrorLight_Title
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmConvenience_WelcomeMirrorLight_TitleAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmConvenience_WelcomeMirrorLight_TitleAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmConvenience_WelcomeMirrorLight_TitleAttributeChanged(_value);
    }
    void lockUsmConvenience_WelcomeMirrorLight_TitleAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmConvenience_WelcomeMirrorLight_TitleAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmConvenience_WelcomeMirrorLight_OnDoorUnlock
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeChanged(_value);
    }
    void lockUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmConvenience_WelcomeMirrorLight_OnDriverApproach
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeChanged(_value);
    }
    void lockUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmConvenience_MirrorAutoFolding
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmConvenience_MirrorAutoFoldingAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmConvenience_MirrorAutoFoldingAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmConvenience_MirrorAutoFoldingAttributeChanged(_value);
    }
    void lockUsmConvenience_MirrorAutoFoldingAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmConvenience_MirrorAutoFoldingAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmConvenience_WirelessChargingSystem
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmConvenience_WirelessChargingSystemAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmConvenience_WirelessChargingSystemAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmConvenience_WirelessChargingSystemAttributeChanged(_value);
    }
    void lockUsmConvenience_WirelessChargingSystemAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmConvenience_WirelessChargingSystemAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmConvenience_TrafficInformation
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmConvenience_TrafficInformationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmConvenience_TrafficInformationAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmConvenience_TrafficInformationAttributeChanged(_value);
    }
    void lockUsmConvenience_TrafficInformationAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmConvenience_TrafficInformationAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmConvenience_WipreLightsDisplay
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmConvenience_WipreLightsDisplayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmConvenience_WipreLightsDisplayAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmConvenience_WipreLightsDisplayAttributeChanged(_value);
    }
    void lockUsmConvenience_WipreLightsDisplayAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmConvenience_WipreLightsDisplayAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmConvenience_AutoRearWiperInR
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmConvenience_AutoRearWiperInRAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmConvenience_AutoRearWiperInRAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmConvenience_AutoRearWiperInRAttributeChanged(_value);
    }
    void lockUsmConvenience_AutoRearWiperInRAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmConvenience_AutoRearWiperInRAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmConvenience_GearPositionPopup
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmConvenience_GearPositionPopupAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmConvenience_GearPositionPopupAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmConvenience_GearPositionPopupAttributeChanged(_value);
    }
    void lockUsmConvenience_GearPositionPopupAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmConvenience_GearPositionPopupAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmConvenience_IcyRoadWarning
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmConvenience_IcyRoadWarningAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmConvenience_IcyRoadWarningAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmConvenience_IcyRoadWarningAttributeChanged(_value);
    }
    void lockUsmConvenience_IcyRoadWarningAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmConvenience_IcyRoadWarningAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmServiceInterval_Mode
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmServiceInterval_ModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmServiceInterval_ModeAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmServiceInterval_ModeAttributeChanged(_value);
    }
    void lockUsmServiceInterval_ModeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmServiceInterval_ModeAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmServiceInterval_EnableServiceInterval
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmServiceInterval_EnableServiceIntervalAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmServiceInterval_EnableServiceIntervalAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmServiceInterval_EnableServiceIntervalAttributeChanged(_value);
    }
    void lockUsmServiceInterval_EnableServiceIntervalAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmServiceInterval_EnableServiceIntervalAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmServiceInterval_Reset
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmServiceInterval_ResetAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmServiceInterval_ResetAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmServiceInterval_ResetAttributeChanged(_value);
    }
    void lockUsmServiceInterval_ResetAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmServiceInterval_ResetAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmOther_FuelEconomyReset
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmOther_FuelEconomyResetAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmOther_FuelEconomyResetAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmOther_FuelEconomyResetAttributeChanged(_value);
    }
    void lockUsmOther_FuelEconomyResetAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmOther_FuelEconomyResetAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmOther_FuelEconomyUnit
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmOther_FuelEconomyUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmOther_FuelEconomyUnitAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmOther_FuelEconomyUnitAttributeChanged(_value);
    }
    void lockUsmOther_FuelEconomyUnitAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmOther_FuelEconomyUnitAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmOther_TemperatureUnit
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmOther_TemperatureUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmOther_TemperatureUnitAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmOther_TemperatureUnitAttributeChanged(_value);
    }
    void lockUsmOther_TemperatureUnitAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmOther_TemperatureUnitAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmOther_TirePressureUnit
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmOther_TirePressureUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmOther_TirePressureUnitAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmOther_TirePressureUnitAttributeChanged(_value);
    }
    void lockUsmOther_TirePressureUnitAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmOther_TirePressureUnitAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmOther_SpeedUnit
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmOther_SpeedUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmOther_SpeedUnitAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmOther_SpeedUnitAttributeChanged(_value);
    }
    void lockUsmOther_SpeedUnitAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmOther_SpeedUnitAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmOther_TorqueUnit
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmOther_TorqueUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmOther_TorqueUnitAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmOther_TorqueUnitAttributeChanged(_value);
    }
    void lockUsmOther_TorqueUnitAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmOther_TorqueUnitAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmOther_TurboBoostPressureUnit
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmOther_TurboBoostPressureUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmOther_TurboBoostPressureUnitAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmOther_TurboBoostPressureUnitAttributeChanged(_value);
    }
    void lockUsmOther_TurboBoostPressureUnitAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmOther_TurboBoostPressureUnitAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmEcoVehicle_GreenZoneEVDrive
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmEcoVehicle_GreenZoneEVDriveAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmEcoVehicle_GreenZoneEVDriveAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmEcoVehicle_GreenZoneEVDriveAttributeChanged(_value);
    }
    void lockUsmEcoVehicle_GreenZoneEVDriveAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmEcoVehicle_GreenZoneEVDriveAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmEcoVehicle_CoastingGuideEnable
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmEcoVehicle_CoastingGuideEnableAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmEcoVehicle_CoastingGuideEnableAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmEcoVehicle_CoastingGuideEnableAttributeChanged(_value);
    }
    void lockUsmEcoVehicle_CoastingGuideEnableAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmEcoVehicle_CoastingGuideEnableAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmEcoVehicle_CoastingGuideSound
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmEcoVehicle_CoastingGuideSoundAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmEcoVehicle_CoastingGuideSoundAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmEcoVehicle_CoastingGuideSoundAttributeChanged(_value);
    }
    void lockUsmEcoVehicle_CoastingGuideSoundAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmEcoVehicle_CoastingGuideSoundAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmEcoVehicle_StartCoasting
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmEcoVehicle_StartCoastingAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmEcoVehicle_StartCoastingAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmEcoVehicle_StartCoastingAttributeChanged(_value);
    }
    void lockUsmEcoVehicle_StartCoastingAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmEcoVehicle_StartCoastingAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmEcoVehicle_ChargingConnectorLockingMode
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmEcoVehicle_ChargingConnectorLockingModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmEcoVehicle_ChargingConnectorLockingModeAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmEcoVehicle_ChargingConnectorLockingModeAttributeChanged(_value);
    }
    void lockUsmEcoVehicle_ChargingConnectorLockingModeAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmEcoVehicle_ChargingConnectorLockingModeAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmEcoVehicle_ChargingConnectorCondition
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmEcoVehicle_ChargingConnectorConditionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmEcoVehicle_ChargingConnectorConditionAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmEcoVehicle_ChargingConnectorConditionAttributeChanged(_value);
    }
    void lockUsmEcoVehicle_ChargingConnectorConditionAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmEcoVehicle_ChargingConnectorConditionAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmEcoVehicle_AuxiliaryBatterySaverPlus
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmEcoVehicle_AuxiliaryBatterySaverPlusAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmEcoVehicle_AuxiliaryBatterySaverPlusAttributeChanged(_value);
    }
    void lockUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmLanguage
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmLanguageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmLanguageAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmLanguageAttributeChanged(_value);
    }
    void lockUsmLanguageAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmLanguageAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmService_Reminder
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMServiceReminder &getUsmService_ReminderAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmService_ReminderAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMServiceReminder _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmService_ReminderAttributeChanged(_value);
    }
    void lockUsmService_ReminderAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmService_ReminderAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute UsmEcoVehicle_VolumeControlFunctionForVESS
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &getUsmEcoVehicle_VolumeControlFunctionForVESSAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireUsmEcoVehicle_VolumeControlFunctionForVESSAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireUsmEcoVehicle_VolumeControlFunctionForVESSAttributeChanged(_value);
    }
    void lockUsmEcoVehicle_VolumeControlFunctionForVESSAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockUsmEcoVehicle_VolumeControlFunctionForVESSAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute lastTabInfo
    virtual const ::v1::proj::dcluster::McuManager::McuManagerTypes::GroupTabInfo &getLastTabInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireLastTabInfoAttributeChanged(::v1::proj::dcluster::McuManager::McuManagerTypes::GroupTabInfo _value) {
    auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireLastTabInfoAttributeChanged(_value);
    }
    void lockLastTabInfoAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockLastTabInfoAttribute(_lockAccess);
    }

    /// This is the method that will be called on remote calls on the method Command.
    virtual void Command(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _id, ::v1::proj::dcluster::McuManager::McuManagerTypes::CmdData _data, CommandReply_t _reply) = 0;
    /// Sends a broadcast event for NotifySteerWheelKey.
    virtual void fireNotifySteerWheelKeyEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumStreerWheelKey &_sw_key) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifySteerWheelKeyEvent(_sw_key);
    }
    /// Sends a broadcast event for NotifyIGNState.
    virtual void fireNotifyIGNStateEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState &_ign_state) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifyIGNStateEvent(_ign_state);
    }
    /// Sends a broadcast event for NotifyContentsGearState.
    virtual void fireNotifyContentsGearStateEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo &_gear_info) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifyContentsGearStateEvent(_gear_info);
    }
    /// Sends a broadcast event for NotifyEventContents.
    virtual void fireNotifyEventContentsEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo &_event_info) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifyEventContentsEvent(_event_info);
    }
    /// Sends a broadcast event for NotifyMasterWarnInfo.
    virtual void fireNotifyMasterWarnInfoEvent() {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifyMasterWarnInfoEvent();
    }
    /// Sends a broadcast event for NotifyMasterWarnCmd.
    virtual void fireNotifyMasterWarnCmdEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd &_cmd) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifyMasterWarnCmdEvent(_cmd);
    }
    /// Sends a broadcast event for NotifySound.
    virtual void fireNotifySoundEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo &_channel_1, const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo &_channel_2, const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo &_channel_3, const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo &_channel_4) {
        auto stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireNotifySoundEvent(_channel_1, _channel_2, _channel_3, _channel_4);
    }

    
    using CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef McuManagerStubRemoteEvent RemoteEventType;
    typedef McuManager StubInterface;
};

} // namespace McuManager
} // namespace dcluster
} // namespace proj
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_PROJ_DCLUSTER_MCUMANAGER_Mcu_Manager_STUB_HPP_
