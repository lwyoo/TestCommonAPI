/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202001100728.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/proj/dcluster/McuManager/McuManagerStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace proj {
namespace dcluster {
namespace McuManager {

McuManagerStubDefault::McuManagerStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(McuManager::getInterfaceVersion()) {
}

const CommonAPI::Version& McuManagerStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

McuManagerStubRemoteEvent* McuManagerStubDefault::initStubAdapter(const std::shared_ptr< McuManagerStubAdapter> &_adapter) {
    CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

 const bool& McuManagerStubDefault::getMainContentsDisplayControlAttribute() {
     return mainContentsDisplayControlAttributeValue_;
 }

 const bool& McuManagerStubDefault::getMainContentsDisplayControlAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getMainContentsDisplayControlAttribute();
 }

 void McuManagerStubDefault::setMainContentsDisplayControlAttribute(bool _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockMainContentsDisplayControlAttribute(true);
         const bool valueChanged = (mainContentsDisplayControlAttributeValue_ != _value);
         if (valueChanged) {
             mainContentsDisplayControlAttributeValue_ = std::move(_value);
             fireMainContentsDisplayControlAttributeChanged(mainContentsDisplayControlAttributeValue_);
         }
         stubAdapter->lockMainContentsDisplayControlAttribute(false);
     } else {
         const bool valueChanged = trySetMainContentsDisplayControlAttribute(std::move(_value));
         if (valueChanged) {
             fireMainContentsDisplayControlAttributeChanged(mainContentsDisplayControlAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetMainContentsDisplayControlAttribute(bool _value) {
     if (!validateMainContentsDisplayControlAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockMainContentsDisplayControlAttribute(true);
         valueChanged = (mainContentsDisplayControlAttributeValue_ != _value);
         mainContentsDisplayControlAttributeValue_ = std::move(_value);
         stubAdapter->lockMainContentsDisplayControlAttribute(false);
     } else {
         valueChanged = (mainContentsDisplayControlAttributeValue_ != _value);
         mainContentsDisplayControlAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateMainContentsDisplayControlAttributeRequestedValue(const bool &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setMainContentsDisplayControlAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
     (void)_client;
     setMainContentsDisplayControlAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteMainContentsDisplayControlAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteMainContentsDisplayControlAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteMainContentsDisplayControlAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetMainContentsDisplayControlAttribute(bool _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetMainContentsDisplayControlAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetMainContentsDisplayControlAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
     (void)_client;
     return onRemoteSetMainContentsDisplayControlAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState& McuManagerStubDefault::getDrivingStateAttribute() {
     return drivingStateAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState& McuManagerStubDefault::getDrivingStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getDrivingStateAttribute();
 }

 void McuManagerStubDefault::setDrivingStateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDrivingStateAttribute(true);
         const bool valueChanged = (drivingStateAttributeValue_ != _value);
         if (valueChanged) {
             drivingStateAttributeValue_ = std::move(_value);
             fireDrivingStateAttributeChanged(drivingStateAttributeValue_);
         }
         stubAdapter->lockDrivingStateAttribute(false);
     } else {
         const bool valueChanged = trySetDrivingStateAttribute(std::move(_value));
         if (valueChanged) {
             fireDrivingStateAttributeChanged(drivingStateAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetDrivingStateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState _value) {
     if (!validateDrivingStateAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDrivingStateAttribute(true);
         valueChanged = (drivingStateAttributeValue_ != _value);
         drivingStateAttributeValue_ = std::move(_value);
         stubAdapter->lockDrivingStateAttribute(false);
     } else {
         valueChanged = (drivingStateAttributeValue_ != _value);
         drivingStateAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateDrivingStateAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState &_value) {
     (void)_value;
     return _value.validate();
 }

 void McuManagerStubDefault::setDrivingStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState _value) {
     (void)_client;
     setDrivingStateAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteDrivingStateAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteDrivingStateAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteDrivingStateAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDrivingStateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetDrivingStateAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDrivingStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumDrivingState _value) {
     (void)_client;
     return onRemoteSetDrivingStateAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveModeInfo& McuManagerStubDefault::getDriveModeAttribute() {
     return driveModeAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveModeInfo& McuManagerStubDefault::getDriveModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getDriveModeAttribute();
 }

 void McuManagerStubDefault::setDriveModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveModeInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveModeAttribute(true);
         const bool valueChanged = (driveModeAttributeValue_ != _value);
         if (valueChanged) {
             driveModeAttributeValue_ = std::move(_value);
             fireDriveModeAttributeChanged(driveModeAttributeValue_);
         }
         stubAdapter->lockDriveModeAttribute(false);
     } else {
         const bool valueChanged = trySetDriveModeAttribute(std::move(_value));
         if (valueChanged) {
             fireDriveModeAttributeChanged(driveModeAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetDriveModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveModeInfo _value) {
     if (!validateDriveModeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveModeAttribute(true);
         valueChanged = (driveModeAttributeValue_ != _value);
         driveModeAttributeValue_ = std::move(_value);
         stubAdapter->lockDriveModeAttribute(false);
     } else {
         valueChanged = (driveModeAttributeValue_ != _value);
         driveModeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateDriveModeAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveModeInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setDriveModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveModeInfo _value) {
     (void)_client;
     setDriveModeAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteDriveModeAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteDriveModeAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteDriveModeAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveModeInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetDriveModeAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveModeInfo _value) {
     (void)_client;
     return onRemoteSetDriveModeAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StVariantInfo& McuManagerStubDefault::getVariantAttribute() {
     return variantAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StVariantInfo& McuManagerStubDefault::getVariantAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getVariantAttribute();
 }

 void McuManagerStubDefault::setVariantAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StVariantInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockVariantAttribute(true);
         const bool valueChanged = (variantAttributeValue_ != _value);
         if (valueChanged) {
             variantAttributeValue_ = std::move(_value);
             fireVariantAttributeChanged(variantAttributeValue_);
         }
         stubAdapter->lockVariantAttribute(false);
     } else {
         const bool valueChanged = trySetVariantAttribute(std::move(_value));
         if (valueChanged) {
             fireVariantAttributeChanged(variantAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetVariantAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StVariantInfo _value) {
     if (!validateVariantAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockVariantAttribute(true);
         valueChanged = (variantAttributeValue_ != _value);
         variantAttributeValue_ = std::move(_value);
         stubAdapter->lockVariantAttribute(false);
     } else {
         valueChanged = (variantAttributeValue_ != _value);
         variantAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateVariantAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StVariantInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setVariantAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StVariantInfo _value) {
     (void)_client;
     setVariantAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteVariantAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteVariantAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteVariantAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetVariantAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StVariantInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetVariantAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetVariantAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StVariantInfo _value) {
     (void)_client;
     return onRemoteSetVariantAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEOLInfo& McuManagerStubDefault::getEOLAttribute() {
     return eOLAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEOLInfo& McuManagerStubDefault::getEOLAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getEOLAttribute();
 }

 void McuManagerStubDefault::setEOLAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEOLInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockEOLAttribute(true);
         const bool valueChanged = (eOLAttributeValue_ != _value);
         if (valueChanged) {
             eOLAttributeValue_ = std::move(_value);
             fireEOLAttributeChanged(eOLAttributeValue_);
         }
         stubAdapter->lockEOLAttribute(false);
     } else {
         const bool valueChanged = trySetEOLAttribute(std::move(_value));
         if (valueChanged) {
             fireEOLAttributeChanged(eOLAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetEOLAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEOLInfo _value) {
     if (!validateEOLAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockEOLAttribute(true);
         valueChanged = (eOLAttributeValue_ != _value);
         eOLAttributeValue_ = std::move(_value);
         stubAdapter->lockEOLAttribute(false);
     } else {
         valueChanged = (eOLAttributeValue_ != _value);
         eOLAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateEOLAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEOLInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setEOLAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEOLInfo _value) {
     (void)_client;
     setEOLAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteEOLAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteEOLAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteEOLAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetEOLAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEOLInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetEOLAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetEOLAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEOLInfo _value) {
     (void)_client;
     return onRemoteSetEOLAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSWVariantInfo& McuManagerStubDefault::getSWVariantAttribute() {
     return sWVariantAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSWVariantInfo& McuManagerStubDefault::getSWVariantAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getSWVariantAttribute();
 }

 void McuManagerStubDefault::setSWVariantAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StSWVariantInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockSWVariantAttribute(true);
         const bool valueChanged = (sWVariantAttributeValue_ != _value);
         if (valueChanged) {
             sWVariantAttributeValue_ = std::move(_value);
             fireSWVariantAttributeChanged(sWVariantAttributeValue_);
         }
         stubAdapter->lockSWVariantAttribute(false);
     } else {
         const bool valueChanged = trySetSWVariantAttribute(std::move(_value));
         if (valueChanged) {
             fireSWVariantAttributeChanged(sWVariantAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetSWVariantAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StSWVariantInfo _value) {
     if (!validateSWVariantAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockSWVariantAttribute(true);
         valueChanged = (sWVariantAttributeValue_ != _value);
         sWVariantAttributeValue_ = std::move(_value);
         stubAdapter->lockSWVariantAttribute(false);
     } else {
         valueChanged = (sWVariantAttributeValue_ != _value);
         sWVariantAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateSWVariantAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSWVariantInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setSWVariantAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StSWVariantInfo _value) {
     (void)_client;
     setSWVariantAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteSWVariantAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteSWVariantAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteSWVariantAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetSWVariantAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StSWVariantInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetSWVariantAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetSWVariantAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StSWVariantInfo _value) {
     (void)_client;
     return onRemoteSetSWVariantAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState& McuManagerStubDefault::getIGN1StateAttribute() {
     return iGN1StateAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState& McuManagerStubDefault::getIGN1StateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getIGN1StateAttribute();
 }

 void McuManagerStubDefault::setIGN1StateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockIGN1StateAttribute(true);
         const bool valueChanged = (iGN1StateAttributeValue_ != _value);
         if (valueChanged) {
             iGN1StateAttributeValue_ = std::move(_value);
             fireIGN1StateAttributeChanged(iGN1StateAttributeValue_);
         }
         stubAdapter->lockIGN1StateAttribute(false);
     } else {
         const bool valueChanged = trySetIGN1StateAttribute(std::move(_value));
         if (valueChanged) {
             fireIGN1StateAttributeChanged(iGN1StateAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetIGN1StateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) {
     if (!validateIGN1StateAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockIGN1StateAttribute(true);
         valueChanged = (iGN1StateAttributeValue_ != _value);
         iGN1StateAttributeValue_ = std::move(_value);
         stubAdapter->lockIGN1StateAttribute(false);
     } else {
         valueChanged = (iGN1StateAttributeValue_ != _value);
         iGN1StateAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateIGN1StateAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState &_value) {
     (void)_value;
     return _value.validate();
 }

 void McuManagerStubDefault::setIGN1StateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) {
     (void)_client;
     setIGN1StateAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteIGN1StateAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteIGN1StateAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteIGN1StateAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetIGN1StateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetIGN1StateAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetIGN1StateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) {
     (void)_client;
     return onRemoteSetIGN1StateAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState& McuManagerStubDefault::getIGN3StateAttribute() {
     return iGN3StateAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState& McuManagerStubDefault::getIGN3StateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getIGN3StateAttribute();
 }

 void McuManagerStubDefault::setIGN3StateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockIGN3StateAttribute(true);
         const bool valueChanged = (iGN3StateAttributeValue_ != _value);
         if (valueChanged) {
             iGN3StateAttributeValue_ = std::move(_value);
             fireIGN3StateAttributeChanged(iGN3StateAttributeValue_);
         }
         stubAdapter->lockIGN3StateAttribute(false);
     } else {
         const bool valueChanged = trySetIGN3StateAttribute(std::move(_value));
         if (valueChanged) {
             fireIGN3StateAttributeChanged(iGN3StateAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetIGN3StateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) {
     if (!validateIGN3StateAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockIGN3StateAttribute(true);
         valueChanged = (iGN3StateAttributeValue_ != _value);
         iGN3StateAttributeValue_ = std::move(_value);
         stubAdapter->lockIGN3StateAttribute(false);
     } else {
         valueChanged = (iGN3StateAttributeValue_ != _value);
         iGN3StateAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateIGN3StateAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState &_value) {
     (void)_value;
     return _value.validate();
 }

 void McuManagerStubDefault::setIGN3StateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) {
     (void)_client;
     setIGN3StateAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteIGN3StateAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteIGN3StateAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteIGN3StateAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetIGN3StateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetIGN3StateAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetIGN3StateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState _value) {
     (void)_client;
     return onRemoteSetIGN3StateAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit& McuManagerStubDefault::getSpeedoUnitAttribute() {
     return speedoUnitAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit& McuManagerStubDefault::getSpeedoUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getSpeedoUnitAttribute();
 }

 void McuManagerStubDefault::setSpeedoUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockSpeedoUnitAttribute(true);
         const bool valueChanged = (speedoUnitAttributeValue_ != _value);
         if (valueChanged) {
             speedoUnitAttributeValue_ = std::move(_value);
             fireSpeedoUnitAttributeChanged(speedoUnitAttributeValue_);
         }
         stubAdapter->lockSpeedoUnitAttribute(false);
     } else {
         const bool valueChanged = trySetSpeedoUnitAttribute(std::move(_value));
         if (valueChanged) {
             fireSpeedoUnitAttributeChanged(speedoUnitAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetSpeedoUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit _value) {
     if (!validateSpeedoUnitAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockSpeedoUnitAttribute(true);
         valueChanged = (speedoUnitAttributeValue_ != _value);
         speedoUnitAttributeValue_ = std::move(_value);
         stubAdapter->lockSpeedoUnitAttribute(false);
     } else {
         valueChanged = (speedoUnitAttributeValue_ != _value);
         speedoUnitAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateSpeedoUnitAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit &_value) {
     (void)_value;
     return _value.validate();
 }

 void McuManagerStubDefault::setSpeedoUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit _value) {
     (void)_client;
     setSpeedoUnitAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteSpeedoUnitAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteSpeedoUnitAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteSpeedoUnitAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetSpeedoUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetSpeedoUnitAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetSpeedoUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumSpeedoUnit _value) {
     (void)_client;
     return onRemoteSetSpeedoUnitAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveModeInfo& McuManagerStubDefault::getTripDriveModeAttribute() {
     return tripDriveModeAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveModeInfo& McuManagerStubDefault::getTripDriveModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTripDriveModeAttribute();
 }

 void McuManagerStubDefault::setTripDriveModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveModeInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripDriveModeAttribute(true);
         const bool valueChanged = (tripDriveModeAttributeValue_ != _value);
         if (valueChanged) {
             tripDriveModeAttributeValue_ = std::move(_value);
             fireTripDriveModeAttributeChanged(tripDriveModeAttributeValue_);
         }
         stubAdapter->lockTripDriveModeAttribute(false);
     } else {
         const bool valueChanged = trySetTripDriveModeAttribute(std::move(_value));
         if (valueChanged) {
             fireTripDriveModeAttributeChanged(tripDriveModeAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTripDriveModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveModeInfo _value) {
     if (!validateTripDriveModeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripDriveModeAttribute(true);
         valueChanged = (tripDriveModeAttributeValue_ != _value);
         tripDriveModeAttributeValue_ = std::move(_value);
         stubAdapter->lockTripDriveModeAttribute(false);
     } else {
         valueChanged = (tripDriveModeAttributeValue_ != _value);
         tripDriveModeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTripDriveModeAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveModeInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTripDriveModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveModeInfo _value) {
     (void)_client;
     setTripDriveModeAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTripDriveModeAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTripDriveModeAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTripDriveModeAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripDriveModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveModeInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTripDriveModeAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripDriveModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveModeInfo _value) {
     (void)_client;
     return onRemoteSetTripDriveModeAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDTEInfo& McuManagerStubDefault::getTripDTEAttribute() {
     return tripDTEAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDTEInfo& McuManagerStubDefault::getTripDTEAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTripDTEAttribute();
 }

 void McuManagerStubDefault::setTripDTEAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDTEInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripDTEAttribute(true);
         const bool valueChanged = (tripDTEAttributeValue_ != _value);
         if (valueChanged) {
             tripDTEAttributeValue_ = std::move(_value);
             fireTripDTEAttributeChanged(tripDTEAttributeValue_);
         }
         stubAdapter->lockTripDTEAttribute(false);
     } else {
         const bool valueChanged = trySetTripDTEAttribute(std::move(_value));
         if (valueChanged) {
             fireTripDTEAttributeChanged(tripDTEAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTripDTEAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDTEInfo _value) {
     if (!validateTripDTEAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripDTEAttribute(true);
         valueChanged = (tripDTEAttributeValue_ != _value);
         tripDTEAttributeValue_ = std::move(_value);
         stubAdapter->lockTripDTEAttribute(false);
     } else {
         valueChanged = (tripDTEAttributeValue_ != _value);
         tripDTEAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTripDTEAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDTEInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTripDTEAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDTEInfo _value) {
     (void)_client;
     setTripDTEAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTripDTEAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTripDTEAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTripDTEAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripDTEAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDTEInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTripDTEAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripDTEAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDTEInfo _value) {
     (void)_client;
     return onRemoteSetTripDTEAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripFuelEconomyInfo& McuManagerStubDefault::getTripFuelEconomyAttribute() {
     return tripFuelEconomyAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripFuelEconomyInfo& McuManagerStubDefault::getTripFuelEconomyAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTripFuelEconomyAttribute();
 }

 void McuManagerStubDefault::setTripFuelEconomyAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripFuelEconomyInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripFuelEconomyAttribute(true);
         const bool valueChanged = (tripFuelEconomyAttributeValue_ != _value);
         if (valueChanged) {
             tripFuelEconomyAttributeValue_ = std::move(_value);
             fireTripFuelEconomyAttributeChanged(tripFuelEconomyAttributeValue_);
         }
         stubAdapter->lockTripFuelEconomyAttribute(false);
     } else {
         const bool valueChanged = trySetTripFuelEconomyAttribute(std::move(_value));
         if (valueChanged) {
             fireTripFuelEconomyAttributeChanged(tripFuelEconomyAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTripFuelEconomyAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripFuelEconomyInfo _value) {
     if (!validateTripFuelEconomyAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripFuelEconomyAttribute(true);
         valueChanged = (tripFuelEconomyAttributeValue_ != _value);
         tripFuelEconomyAttributeValue_ = std::move(_value);
         stubAdapter->lockTripFuelEconomyAttribute(false);
     } else {
         valueChanged = (tripFuelEconomyAttributeValue_ != _value);
         tripFuelEconomyAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTripFuelEconomyAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripFuelEconomyInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTripFuelEconomyAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripFuelEconomyInfo _value) {
     (void)_client;
     setTripFuelEconomyAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTripFuelEconomyAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTripFuelEconomyAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTripFuelEconomyAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripFuelEconomyAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripFuelEconomyInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTripFuelEconomyAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripFuelEconomyAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripFuelEconomyInfo _value) {
     (void)_client;
     return onRemoteSetTripFuelEconomyAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripAccumulatedInfo& McuManagerStubDefault::getTripAccumulatedAttribute() {
     return tripAccumulatedAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripAccumulatedInfo& McuManagerStubDefault::getTripAccumulatedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTripAccumulatedAttribute();
 }

 void McuManagerStubDefault::setTripAccumulatedAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripAccumulatedInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripAccumulatedAttribute(true);
         const bool valueChanged = (tripAccumulatedAttributeValue_ != _value);
         if (valueChanged) {
             tripAccumulatedAttributeValue_ = std::move(_value);
             fireTripAccumulatedAttributeChanged(tripAccumulatedAttributeValue_);
         }
         stubAdapter->lockTripAccumulatedAttribute(false);
     } else {
         const bool valueChanged = trySetTripAccumulatedAttribute(std::move(_value));
         if (valueChanged) {
             fireTripAccumulatedAttributeChanged(tripAccumulatedAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTripAccumulatedAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripAccumulatedInfo _value) {
     if (!validateTripAccumulatedAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripAccumulatedAttribute(true);
         valueChanged = (tripAccumulatedAttributeValue_ != _value);
         tripAccumulatedAttributeValue_ = std::move(_value);
         stubAdapter->lockTripAccumulatedAttribute(false);
     } else {
         valueChanged = (tripAccumulatedAttributeValue_ != _value);
         tripAccumulatedAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTripAccumulatedAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripAccumulatedInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTripAccumulatedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripAccumulatedInfo _value) {
     (void)_client;
     setTripAccumulatedAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTripAccumulatedAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTripAccumulatedAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTripAccumulatedAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripAccumulatedAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripAccumulatedInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTripAccumulatedAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripAccumulatedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripAccumulatedInfo _value) {
     (void)_client;
     return onRemoteSetTripAccumulatedAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveInfo& McuManagerStubDefault::getTripDriveInfoAttribute() {
     return tripDriveInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveInfo& McuManagerStubDefault::getTripDriveInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTripDriveInfoAttribute();
 }

 void McuManagerStubDefault::setTripDriveInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripDriveInfoAttribute(true);
         const bool valueChanged = (tripDriveInfoAttributeValue_ != _value);
         if (valueChanged) {
             tripDriveInfoAttributeValue_ = std::move(_value);
             fireTripDriveInfoAttributeChanged(tripDriveInfoAttributeValue_);
         }
         stubAdapter->lockTripDriveInfoAttribute(false);
     } else {
         const bool valueChanged = trySetTripDriveInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireTripDriveInfoAttributeChanged(tripDriveInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTripDriveInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveInfo _value) {
     if (!validateTripDriveInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripDriveInfoAttribute(true);
         valueChanged = (tripDriveInfoAttributeValue_ != _value);
         tripDriveInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockTripDriveInfoAttribute(false);
     } else {
         valueChanged = (tripDriveInfoAttributeValue_ != _value);
         tripDriveInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTripDriveInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTripDriveInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveInfo _value) {
     (void)_client;
     setTripDriveInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTripDriveInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTripDriveInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTripDriveInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripDriveInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTripDriveInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripDriveInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripDriveInfo _value) {
     (void)_client;
     return onRemoteSetTripDriveInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripSpeedMeter& McuManagerStubDefault::getTripDigitalSpeedMeterAttribute() {
     return tripDigitalSpeedMeterAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripSpeedMeter& McuManagerStubDefault::getTripDigitalSpeedMeterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTripDigitalSpeedMeterAttribute();
 }

 void McuManagerStubDefault::setTripDigitalSpeedMeterAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripSpeedMeter _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripDigitalSpeedMeterAttribute(true);
         const bool valueChanged = (tripDigitalSpeedMeterAttributeValue_ != _value);
         if (valueChanged) {
             tripDigitalSpeedMeterAttributeValue_ = std::move(_value);
             fireTripDigitalSpeedMeterAttributeChanged(tripDigitalSpeedMeterAttributeValue_);
         }
         stubAdapter->lockTripDigitalSpeedMeterAttribute(false);
     } else {
         const bool valueChanged = trySetTripDigitalSpeedMeterAttribute(std::move(_value));
         if (valueChanged) {
             fireTripDigitalSpeedMeterAttributeChanged(tripDigitalSpeedMeterAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTripDigitalSpeedMeterAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripSpeedMeter _value) {
     if (!validateTripDigitalSpeedMeterAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripDigitalSpeedMeterAttribute(true);
         valueChanged = (tripDigitalSpeedMeterAttributeValue_ != _value);
         tripDigitalSpeedMeterAttributeValue_ = std::move(_value);
         stubAdapter->lockTripDigitalSpeedMeterAttribute(false);
     } else {
         valueChanged = (tripDigitalSpeedMeterAttributeValue_ != _value);
         tripDigitalSpeedMeterAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTripDigitalSpeedMeterAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripSpeedMeter &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTripDigitalSpeedMeterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripSpeedMeter _value) {
     (void)_client;
     setTripDigitalSpeedMeterAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTripDigitalSpeedMeterAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTripDigitalSpeedMeterAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTripDigitalSpeedMeterAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripDigitalSpeedMeterAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTripSpeedMeter _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTripDigitalSpeedMeterAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripDigitalSpeedMeterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTripSpeedMeter _value) {
     (void)_client;
     return onRemoteSetTripDigitalSpeedMeterAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow& McuManagerStubDefault::getTripPowerFlowDiagramAttribute() {
     return tripPowerFlowDiagramAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow& McuManagerStubDefault::getTripPowerFlowDiagramAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTripPowerFlowDiagramAttribute();
 }

 void McuManagerStubDefault::setTripPowerFlowDiagramAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripPowerFlowDiagramAttribute(true);
         const bool valueChanged = (tripPowerFlowDiagramAttributeValue_ != _value);
         if (valueChanged) {
             tripPowerFlowDiagramAttributeValue_ = std::move(_value);
             fireTripPowerFlowDiagramAttributeChanged(tripPowerFlowDiagramAttributeValue_);
         }
         stubAdapter->lockTripPowerFlowDiagramAttribute(false);
     } else {
         const bool valueChanged = trySetTripPowerFlowDiagramAttribute(std::move(_value));
         if (valueChanged) {
             fireTripPowerFlowDiagramAttributeChanged(tripPowerFlowDiagramAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTripPowerFlowDiagramAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow _value) {
     if (!validateTripPowerFlowDiagramAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripPowerFlowDiagramAttribute(true);
         valueChanged = (tripPowerFlowDiagramAttributeValue_ != _value);
         tripPowerFlowDiagramAttributeValue_ = std::move(_value);
         stubAdapter->lockTripPowerFlowDiagramAttribute(false);
     } else {
         valueChanged = (tripPowerFlowDiagramAttributeValue_ != _value);
         tripPowerFlowDiagramAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTripPowerFlowDiagramAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow &_value) {
     (void)_value;
     return _value.validate();
 }

 void McuManagerStubDefault::setTripPowerFlowDiagramAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow _value) {
     (void)_client;
     setTripPowerFlowDiagramAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTripPowerFlowDiagramAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTripPowerFlowDiagramAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTripPowerFlowDiagramAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripPowerFlowDiagramAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTripPowerFlowDiagramAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripPowerFlowDiagramAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumPowerFlow _value) {
     (void)_client;
     return onRemoteSetTripPowerFlowDiagramAttribute(_value);
 }

 const uint8_t& McuManagerStubDefault::getTripUREALevelAttribute() {
     return tripUREALevelAttributeValue_;
 }

 const uint8_t& McuManagerStubDefault::getTripUREALevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTripUREALevelAttribute();
 }

 void McuManagerStubDefault::setTripUREALevelAttribute(uint8_t _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripUREALevelAttribute(true);
         const bool valueChanged = (tripUREALevelAttributeValue_ != _value);
         if (valueChanged) {
             tripUREALevelAttributeValue_ = std::move(_value);
             fireTripUREALevelAttributeChanged(tripUREALevelAttributeValue_);
         }
         stubAdapter->lockTripUREALevelAttribute(false);
     } else {
         const bool valueChanged = trySetTripUREALevelAttribute(std::move(_value));
         if (valueChanged) {
             fireTripUREALevelAttributeChanged(tripUREALevelAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTripUREALevelAttribute(uint8_t _value) {
     if (!validateTripUREALevelAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripUREALevelAttribute(true);
         valueChanged = (tripUREALevelAttributeValue_ != _value);
         tripUREALevelAttributeValue_ = std::move(_value);
         stubAdapter->lockTripUREALevelAttribute(false);
     } else {
         valueChanged = (tripUREALevelAttributeValue_ != _value);
         tripUREALevelAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTripUREALevelAttributeRequestedValue(const uint8_t &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTripUREALevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
     (void)_client;
     setTripUREALevelAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTripUREALevelAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTripUREALevelAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTripUREALevelAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripUREALevelAttribute(uint8_t _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTripUREALevelAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripUREALevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
     (void)_client;
     return onRemoteSetTripUREALevelAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel& McuManagerStubDefault::getTripTransmissionTempAttribute() {
     return tripTransmissionTempAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel& McuManagerStubDefault::getTripTransmissionTempAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTripTransmissionTempAttribute();
 }

 void McuManagerStubDefault::setTripTransmissionTempAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripTransmissionTempAttribute(true);
         const bool valueChanged = (tripTransmissionTempAttributeValue_ != _value);
         if (valueChanged) {
             tripTransmissionTempAttributeValue_ = std::move(_value);
             fireTripTransmissionTempAttributeChanged(tripTransmissionTempAttributeValue_);
         }
         stubAdapter->lockTripTransmissionTempAttribute(false);
     } else {
         const bool valueChanged = trySetTripTransmissionTempAttribute(std::move(_value));
         if (valueChanged) {
             fireTripTransmissionTempAttributeChanged(tripTransmissionTempAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTripTransmissionTempAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel _value) {
     if (!validateTripTransmissionTempAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripTransmissionTempAttribute(true);
         valueChanged = (tripTransmissionTempAttributeValue_ != _value);
         tripTransmissionTempAttributeValue_ = std::move(_value);
         stubAdapter->lockTripTransmissionTempAttribute(false);
     } else {
         valueChanged = (tripTransmissionTempAttributeValue_ != _value);
         tripTransmissionTempAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTripTransmissionTempAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel &_value) {
     (void)_value;
     return _value.validate();
 }

 void McuManagerStubDefault::setTripTransmissionTempAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel _value) {
     (void)_client;
     setTripTransmissionTempAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTripTransmissionTempAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTripTransmissionTempAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTripTransmissionTempAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripTransmissionTempAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTripTransmissionTempAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripTransmissionTempAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTransmissionTempLevel _value) {
     (void)_client;
     return onRemoteSetTripTransmissionTempAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEngineCoolantTemp& McuManagerStubDefault::getTripEngineCoolantTempAttribute() {
     return tripEngineCoolantTempAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEngineCoolantTemp& McuManagerStubDefault::getTripEngineCoolantTempAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTripEngineCoolantTempAttribute();
 }

 void McuManagerStubDefault::setTripEngineCoolantTempAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEngineCoolantTemp _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripEngineCoolantTempAttribute(true);
         const bool valueChanged = (tripEngineCoolantTempAttributeValue_ != _value);
         if (valueChanged) {
             tripEngineCoolantTempAttributeValue_ = std::move(_value);
             fireTripEngineCoolantTempAttributeChanged(tripEngineCoolantTempAttributeValue_);
         }
         stubAdapter->lockTripEngineCoolantTempAttribute(false);
     } else {
         const bool valueChanged = trySetTripEngineCoolantTempAttribute(std::move(_value));
         if (valueChanged) {
             fireTripEngineCoolantTempAttributeChanged(tripEngineCoolantTempAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTripEngineCoolantTempAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEngineCoolantTemp _value) {
     if (!validateTripEngineCoolantTempAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTripEngineCoolantTempAttribute(true);
         valueChanged = (tripEngineCoolantTempAttributeValue_ != _value);
         tripEngineCoolantTempAttributeValue_ = std::move(_value);
         stubAdapter->lockTripEngineCoolantTempAttribute(false);
     } else {
         valueChanged = (tripEngineCoolantTempAttributeValue_ != _value);
         tripEngineCoolantTempAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTripEngineCoolantTempAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEngineCoolantTemp &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTripEngineCoolantTempAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEngineCoolantTemp _value) {
     (void)_client;
     setTripEngineCoolantTempAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTripEngineCoolantTempAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTripEngineCoolantTempAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTripEngineCoolantTempAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripEngineCoolantTempAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEngineCoolantTemp _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTripEngineCoolantTempAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTripEngineCoolantTempAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEngineCoolantTemp _value) {
     (void)_client;
     return onRemoteSetTripEngineCoolantTempAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEnergyFlowInfo& McuManagerStubDefault::getEnergyFlowAttribute() {
     return energyFlowAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEnergyFlowInfo& McuManagerStubDefault::getEnergyFlowAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getEnergyFlowAttribute();
 }

 void McuManagerStubDefault::setEnergyFlowAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEnergyFlowInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockEnergyFlowAttribute(true);
         const bool valueChanged = (energyFlowAttributeValue_ != _value);
         if (valueChanged) {
             energyFlowAttributeValue_ = std::move(_value);
             fireEnergyFlowAttributeChanged(energyFlowAttributeValue_);
         }
         stubAdapter->lockEnergyFlowAttribute(false);
     } else {
         const bool valueChanged = trySetEnergyFlowAttribute(std::move(_value));
         if (valueChanged) {
             fireEnergyFlowAttributeChanged(energyFlowAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetEnergyFlowAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEnergyFlowInfo _value) {
     if (!validateEnergyFlowAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockEnergyFlowAttribute(true);
         valueChanged = (energyFlowAttributeValue_ != _value);
         energyFlowAttributeValue_ = std::move(_value);
         stubAdapter->lockEnergyFlowAttribute(false);
     } else {
         valueChanged = (energyFlowAttributeValue_ != _value);
         energyFlowAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateEnergyFlowAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEnergyFlowInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setEnergyFlowAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEnergyFlowInfo _value) {
     (void)_client;
     setEnergyFlowAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteEnergyFlowAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteEnergyFlowAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteEnergyFlowAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetEnergyFlowAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEnergyFlowInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetEnergyFlowAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetEnergyFlowAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEnergyFlowInfo _value) {
     (void)_client;
     return onRemoteSetEnergyFlowAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StMyDrvModeInfo& McuManagerStubDefault::getMyDrivingModeAttribute() {
     return myDrivingModeAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StMyDrvModeInfo& McuManagerStubDefault::getMyDrivingModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getMyDrivingModeAttribute();
 }

 void McuManagerStubDefault::setMyDrivingModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StMyDrvModeInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockMyDrivingModeAttribute(true);
         const bool valueChanged = (myDrivingModeAttributeValue_ != _value);
         if (valueChanged) {
             myDrivingModeAttributeValue_ = std::move(_value);
             fireMyDrivingModeAttributeChanged(myDrivingModeAttributeValue_);
         }
         stubAdapter->lockMyDrivingModeAttribute(false);
     } else {
         const bool valueChanged = trySetMyDrivingModeAttribute(std::move(_value));
         if (valueChanged) {
             fireMyDrivingModeAttributeChanged(myDrivingModeAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetMyDrivingModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StMyDrvModeInfo _value) {
     if (!validateMyDrivingModeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockMyDrivingModeAttribute(true);
         valueChanged = (myDrivingModeAttributeValue_ != _value);
         myDrivingModeAttributeValue_ = std::move(_value);
         stubAdapter->lockMyDrivingModeAttribute(false);
     } else {
         valueChanged = (myDrivingModeAttributeValue_ != _value);
         myDrivingModeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateMyDrivingModeAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StMyDrvModeInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setMyDrivingModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StMyDrvModeInfo _value) {
     (void)_client;
     setMyDrivingModeAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteMyDrivingModeAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteMyDrivingModeAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteMyDrivingModeAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetMyDrivingModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StMyDrvModeInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetMyDrivingModeAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetMyDrivingModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StMyDrvModeInfo _value) {
     (void)_client;
     return onRemoteSetMyDrivingModeAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType& McuManagerStubDefault::getTBTDisplayTypeAttribute() {
     return tBTDisplayTypeAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType& McuManagerStubDefault::getTBTDisplayTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTDisplayTypeAttribute();
 }

 void McuManagerStubDefault::setTBTDisplayTypeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDisplayTypeAttribute(true);
         const bool valueChanged = (tBTDisplayTypeAttributeValue_ != _value);
         if (valueChanged) {
             tBTDisplayTypeAttributeValue_ = std::move(_value);
             fireTBTDisplayTypeAttributeChanged(tBTDisplayTypeAttributeValue_);
         }
         stubAdapter->lockTBTDisplayTypeAttribute(false);
     } else {
         const bool valueChanged = trySetTBTDisplayTypeAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTDisplayTypeAttributeChanged(tBTDisplayTypeAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTDisplayTypeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType _value) {
     if (!validateTBTDisplayTypeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDisplayTypeAttribute(true);
         valueChanged = (tBTDisplayTypeAttributeValue_ != _value);
         tBTDisplayTypeAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTDisplayTypeAttribute(false);
     } else {
         valueChanged = (tBTDisplayTypeAttributeValue_ != _value);
         tBTDisplayTypeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTDisplayTypeAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType &_value) {
     (void)_value;
     return _value.validate();
 }

 void McuManagerStubDefault::setTBTDisplayTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType _value) {
     (void)_client;
     setTBTDisplayTypeAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTDisplayTypeAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTDisplayTypeAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTDisplayTypeAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDisplayTypeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTDisplayTypeAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDisplayTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTDisplayType _value) {
     (void)_client;
     return onRemoteSetTBTDisplayTypeAttribute(_value);
 }

 const bool& McuManagerStubDefault::getTBTDisplayTollgateAttribute() {
     return tBTDisplayTollgateAttributeValue_;
 }

 const bool& McuManagerStubDefault::getTBTDisplayTollgateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTDisplayTollgateAttribute();
 }

 void McuManagerStubDefault::setTBTDisplayTollgateAttribute(bool _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDisplayTollgateAttribute(true);
         const bool valueChanged = (tBTDisplayTollgateAttributeValue_ != _value);
         if (valueChanged) {
             tBTDisplayTollgateAttributeValue_ = std::move(_value);
             fireTBTDisplayTollgateAttributeChanged(tBTDisplayTollgateAttributeValue_);
         }
         stubAdapter->lockTBTDisplayTollgateAttribute(false);
     } else {
         const bool valueChanged = trySetTBTDisplayTollgateAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTDisplayTollgateAttributeChanged(tBTDisplayTollgateAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTDisplayTollgateAttribute(bool _value) {
     if (!validateTBTDisplayTollgateAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDisplayTollgateAttribute(true);
         valueChanged = (tBTDisplayTollgateAttributeValue_ != _value);
         tBTDisplayTollgateAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTDisplayTollgateAttribute(false);
     } else {
         valueChanged = (tBTDisplayTollgateAttributeValue_ != _value);
         tBTDisplayTollgateAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTDisplayTollgateAttributeRequestedValue(const bool &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTDisplayTollgateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
     (void)_client;
     setTBTDisplayTollgateAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTDisplayTollgateAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTDisplayTollgateAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTDisplayTollgateAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDisplayTollgateAttribute(bool _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTDisplayTollgateAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDisplayTollgateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
     (void)_client;
     return onRemoteSetTBTDisplayTollgateAttribute(_value);
 }

 const uint8_t& McuManagerStubDefault::getTBTPreliminaryInfoAttribute() {
     return tBTPreliminaryInfoAttributeValue_;
 }

 const uint8_t& McuManagerStubDefault::getTBTPreliminaryInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTPreliminaryInfoAttribute();
 }

 void McuManagerStubDefault::setTBTPreliminaryInfoAttribute(uint8_t _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTPreliminaryInfoAttribute(true);
         const bool valueChanged = (tBTPreliminaryInfoAttributeValue_ != _value);
         if (valueChanged) {
             tBTPreliminaryInfoAttributeValue_ = std::move(_value);
             fireTBTPreliminaryInfoAttributeChanged(tBTPreliminaryInfoAttributeValue_);
         }
         stubAdapter->lockTBTPreliminaryInfoAttribute(false);
     } else {
         const bool valueChanged = trySetTBTPreliminaryInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTPreliminaryInfoAttributeChanged(tBTPreliminaryInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTPreliminaryInfoAttribute(uint8_t _value) {
     if (!validateTBTPreliminaryInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTPreliminaryInfoAttribute(true);
         valueChanged = (tBTPreliminaryInfoAttributeValue_ != _value);
         tBTPreliminaryInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTPreliminaryInfoAttribute(false);
     } else {
         valueChanged = (tBTPreliminaryInfoAttributeValue_ != _value);
         tBTPreliminaryInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTPreliminaryInfoAttributeRequestedValue(const uint8_t &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTPreliminaryInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
     (void)_client;
     setTBTPreliminaryInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTPreliminaryInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTPreliminaryInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTPreliminaryInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTPreliminaryInfoAttribute(uint8_t _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTPreliminaryInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTPreliminaryInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
     (void)_client;
     return onRemoteSetTBTPreliminaryInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState& McuManagerStubDefault::getTBTDestInfoPageStateAttribute() {
     return tBTDestInfoPageStateAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState& McuManagerStubDefault::getTBTDestInfoPageStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTDestInfoPageStateAttribute();
 }

 void McuManagerStubDefault::setTBTDestInfoPageStateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDestInfoPageStateAttribute(true);
         const bool valueChanged = (tBTDestInfoPageStateAttributeValue_ != _value);
         if (valueChanged) {
             tBTDestInfoPageStateAttributeValue_ = std::move(_value);
             fireTBTDestInfoPageStateAttributeChanged(tBTDestInfoPageStateAttributeValue_);
         }
         stubAdapter->lockTBTDestInfoPageStateAttribute(false);
     } else {
         const bool valueChanged = trySetTBTDestInfoPageStateAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTDestInfoPageStateAttributeChanged(tBTDestInfoPageStateAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTDestInfoPageStateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState _value) {
     if (!validateTBTDestInfoPageStateAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDestInfoPageStateAttribute(true);
         valueChanged = (tBTDestInfoPageStateAttributeValue_ != _value);
         tBTDestInfoPageStateAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTDestInfoPageStateAttribute(false);
     } else {
         valueChanged = (tBTDestInfoPageStateAttributeValue_ != _value);
         tBTDestInfoPageStateAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTDestInfoPageStateAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState &_value) {
     (void)_value;
     return _value.validate();
 }

 void McuManagerStubDefault::setTBTDestInfoPageStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState _value) {
     (void)_client;
     setTBTDestInfoPageStateAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTDestInfoPageStateAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTDestInfoPageStateAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTDestInfoPageStateAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDestInfoPageStateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTDestInfoPageStateAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDestInfoPageStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPageState _value) {
     (void)_client;
     return onRemoteSetTBTDestInfoPageStateAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType& McuManagerStubDefault::getTBTPointTypeAttribute() {
     return tBTPointTypeAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType& McuManagerStubDefault::getTBTPointTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTPointTypeAttribute();
 }

 void McuManagerStubDefault::setTBTPointTypeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTPointTypeAttribute(true);
         const bool valueChanged = (tBTPointTypeAttributeValue_ != _value);
         if (valueChanged) {
             tBTPointTypeAttributeValue_ = std::move(_value);
             fireTBTPointTypeAttributeChanged(tBTPointTypeAttributeValue_);
         }
         stubAdapter->lockTBTPointTypeAttribute(false);
     } else {
         const bool valueChanged = trySetTBTPointTypeAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTPointTypeAttributeChanged(tBTPointTypeAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTPointTypeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType _value) {
     if (!validateTBTPointTypeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTPointTypeAttribute(true);
         valueChanged = (tBTPointTypeAttributeValue_ != _value);
         tBTPointTypeAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTPointTypeAttribute(false);
     } else {
         valueChanged = (tBTPointTypeAttributeValue_ != _value);
         tBTPointTypeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTPointTypeAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType &_value) {
     (void)_value;
     return _value.validate();
 }

 void McuManagerStubDefault::setTBTPointTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType _value) {
     (void)_client;
     setTBTPointTypeAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTPointTypeAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTPointTypeAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTPointTypeAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTPointTypeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTPointTypeAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTPointTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumTBTPointType _value) {
     (void)_client;
     return onRemoteSetTBTPointTypeAttribute(_value);
 }

 const uint8_t& McuManagerStubDefault::getTBTDirectionAttribute() {
     return tBTDirectionAttributeValue_;
 }

 const uint8_t& McuManagerStubDefault::getTBTDirectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTDirectionAttribute();
 }

 void McuManagerStubDefault::setTBTDirectionAttribute(uint8_t _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDirectionAttribute(true);
         const bool valueChanged = (tBTDirectionAttributeValue_ != _value);
         if (valueChanged) {
             tBTDirectionAttributeValue_ = std::move(_value);
             fireTBTDirectionAttributeChanged(tBTDirectionAttributeValue_);
         }
         stubAdapter->lockTBTDirectionAttribute(false);
     } else {
         const bool valueChanged = trySetTBTDirectionAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTDirectionAttributeChanged(tBTDirectionAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTDirectionAttribute(uint8_t _value) {
     if (!validateTBTDirectionAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDirectionAttribute(true);
         valueChanged = (tBTDirectionAttributeValue_ != _value);
         tBTDirectionAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTDirectionAttribute(false);
     } else {
         valueChanged = (tBTDirectionAttributeValue_ != _value);
         tBTDirectionAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTDirectionAttributeRequestedValue(const uint8_t &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTDirectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
     (void)_client;
     setTBTDirectionAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTDirectionAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTDirectionAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTDirectionAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDirectionAttribute(uint8_t _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTDirectionAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDirectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
     (void)_client;
     return onRemoteSetTBTDirectionAttribute(_value);
 }

 const uint16_t& McuManagerStubDefault::getTBTRoadDisplayAttribute() {
     return tBTRoadDisplayAttributeValue_;
 }

 const uint16_t& McuManagerStubDefault::getTBTRoadDisplayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTRoadDisplayAttribute();
 }

 void McuManagerStubDefault::setTBTRoadDisplayAttribute(uint16_t _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTRoadDisplayAttribute(true);
         const bool valueChanged = (tBTRoadDisplayAttributeValue_ != _value);
         if (valueChanged) {
             tBTRoadDisplayAttributeValue_ = std::move(_value);
             fireTBTRoadDisplayAttributeChanged(tBTRoadDisplayAttributeValue_);
         }
         stubAdapter->lockTBTRoadDisplayAttribute(false);
     } else {
         const bool valueChanged = trySetTBTRoadDisplayAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTRoadDisplayAttributeChanged(tBTRoadDisplayAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTRoadDisplayAttribute(uint16_t _value) {
     if (!validateTBTRoadDisplayAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTRoadDisplayAttribute(true);
         valueChanged = (tBTRoadDisplayAttributeValue_ != _value);
         tBTRoadDisplayAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTRoadDisplayAttribute(false);
     } else {
         valueChanged = (tBTRoadDisplayAttributeValue_ != _value);
         tBTRoadDisplayAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTRoadDisplayAttributeRequestedValue(const uint16_t &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTRoadDisplayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value) {
     (void)_client;
     setTBTRoadDisplayAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTRoadDisplayAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTRoadDisplayAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTRoadDisplayAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTRoadDisplayAttribute(uint16_t _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTRoadDisplayAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTRoadDisplayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value) {
     (void)_client;
     return onRemoteSetTBTRoadDisplayAttribute(_value);
 }

 const uint8_t& McuManagerStubDefault::getTBTSideRoadDisplayAttribute() {
     return tBTSideRoadDisplayAttributeValue_;
 }

 const uint8_t& McuManagerStubDefault::getTBTSideRoadDisplayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTSideRoadDisplayAttribute();
 }

 void McuManagerStubDefault::setTBTSideRoadDisplayAttribute(uint8_t _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTSideRoadDisplayAttribute(true);
         const bool valueChanged = (tBTSideRoadDisplayAttributeValue_ != _value);
         if (valueChanged) {
             tBTSideRoadDisplayAttributeValue_ = std::move(_value);
             fireTBTSideRoadDisplayAttributeChanged(tBTSideRoadDisplayAttributeValue_);
         }
         stubAdapter->lockTBTSideRoadDisplayAttribute(false);
     } else {
         const bool valueChanged = trySetTBTSideRoadDisplayAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTSideRoadDisplayAttributeChanged(tBTSideRoadDisplayAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTSideRoadDisplayAttribute(uint8_t _value) {
     if (!validateTBTSideRoadDisplayAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTSideRoadDisplayAttribute(true);
         valueChanged = (tBTSideRoadDisplayAttributeValue_ != _value);
         tBTSideRoadDisplayAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTSideRoadDisplayAttribute(false);
     } else {
         valueChanged = (tBTSideRoadDisplayAttributeValue_ != _value);
         tBTSideRoadDisplayAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTSideRoadDisplayAttributeRequestedValue(const uint8_t &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTSideRoadDisplayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
     (void)_client;
     setTBTSideRoadDisplayAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTSideRoadDisplayAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTSideRoadDisplayAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTSideRoadDisplayAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTSideRoadDisplayAttribute(uint8_t _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTSideRoadDisplayAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTSideRoadDisplayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
     (void)_client;
     return onRemoteSetTBTSideRoadDisplayAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDistDestInfo& McuManagerStubDefault::getTBTDistanceToDestinationAttribute() {
     return tBTDistanceToDestinationAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDistDestInfo& McuManagerStubDefault::getTBTDistanceToDestinationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTDistanceToDestinationAttribute();
 }

 void McuManagerStubDefault::setTBTDistanceToDestinationAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDistDestInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDistanceToDestinationAttribute(true);
         const bool valueChanged = (tBTDistanceToDestinationAttributeValue_ != _value);
         if (valueChanged) {
             tBTDistanceToDestinationAttributeValue_ = std::move(_value);
             fireTBTDistanceToDestinationAttributeChanged(tBTDistanceToDestinationAttributeValue_);
         }
         stubAdapter->lockTBTDistanceToDestinationAttribute(false);
     } else {
         const bool valueChanged = trySetTBTDistanceToDestinationAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTDistanceToDestinationAttributeChanged(tBTDistanceToDestinationAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTDistanceToDestinationAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDistDestInfo _value) {
     if (!validateTBTDistanceToDestinationAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDistanceToDestinationAttribute(true);
         valueChanged = (tBTDistanceToDestinationAttributeValue_ != _value);
         tBTDistanceToDestinationAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTDistanceToDestinationAttribute(false);
     } else {
         valueChanged = (tBTDistanceToDestinationAttributeValue_ != _value);
         tBTDistanceToDestinationAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTDistanceToDestinationAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDistDestInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTDistanceToDestinationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDistDestInfo _value) {
     (void)_client;
     setTBTDistanceToDestinationAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTDistanceToDestinationAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTDistanceToDestinationAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTDistanceToDestinationAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDistanceToDestinationAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDistDestInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTDistanceToDestinationAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDistanceToDestinationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDistDestInfo _value) {
     (void)_client;
     return onRemoteSetTBTDistanceToDestinationAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTTurnInfo& McuManagerStubDefault::getTBTDistanceUntilTurnAttribute() {
     return tBTDistanceUntilTurnAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTTurnInfo& McuManagerStubDefault::getTBTDistanceUntilTurnAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTDistanceUntilTurnAttribute();
 }

 void McuManagerStubDefault::setTBTDistanceUntilTurnAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTTurnInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDistanceUntilTurnAttribute(true);
         const bool valueChanged = (tBTDistanceUntilTurnAttributeValue_ != _value);
         if (valueChanged) {
             tBTDistanceUntilTurnAttributeValue_ = std::move(_value);
             fireTBTDistanceUntilTurnAttributeChanged(tBTDistanceUntilTurnAttributeValue_);
         }
         stubAdapter->lockTBTDistanceUntilTurnAttribute(false);
     } else {
         const bool valueChanged = trySetTBTDistanceUntilTurnAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTDistanceUntilTurnAttributeChanged(tBTDistanceUntilTurnAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTDistanceUntilTurnAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTTurnInfo _value) {
     if (!validateTBTDistanceUntilTurnAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDistanceUntilTurnAttribute(true);
         valueChanged = (tBTDistanceUntilTurnAttributeValue_ != _value);
         tBTDistanceUntilTurnAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTDistanceUntilTurnAttribute(false);
     } else {
         valueChanged = (tBTDistanceUntilTurnAttributeValue_ != _value);
         tBTDistanceUntilTurnAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTDistanceUntilTurnAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTTurnInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTDistanceUntilTurnAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTTurnInfo _value) {
     (void)_client;
     setTBTDistanceUntilTurnAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTDistanceUntilTurnAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTDistanceUntilTurnAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTDistanceUntilTurnAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDistanceUntilTurnAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTTurnInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTDistanceUntilTurnAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDistanceUntilTurnAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTTurnInfo _value) {
     (void)_client;
     return onRemoteSetTBTDistanceUntilTurnAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDestinationTime& McuManagerStubDefault::getTBTExpectedDestTimeAttribute() {
     return tBTExpectedDestTimeAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDestinationTime& McuManagerStubDefault::getTBTExpectedDestTimeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTExpectedDestTimeAttribute();
 }

 void McuManagerStubDefault::setTBTExpectedDestTimeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDestinationTime _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTExpectedDestTimeAttribute(true);
         const bool valueChanged = (tBTExpectedDestTimeAttributeValue_ != _value);
         if (valueChanged) {
             tBTExpectedDestTimeAttributeValue_ = std::move(_value);
             fireTBTExpectedDestTimeAttributeChanged(tBTExpectedDestTimeAttributeValue_);
         }
         stubAdapter->lockTBTExpectedDestTimeAttribute(false);
     } else {
         const bool valueChanged = trySetTBTExpectedDestTimeAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTExpectedDestTimeAttributeChanged(tBTExpectedDestTimeAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTExpectedDestTimeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDestinationTime _value) {
     if (!validateTBTExpectedDestTimeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTExpectedDestTimeAttribute(true);
         valueChanged = (tBTExpectedDestTimeAttributeValue_ != _value);
         tBTExpectedDestTimeAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTExpectedDestTimeAttribute(false);
     } else {
         valueChanged = (tBTExpectedDestTimeAttributeValue_ != _value);
         tBTExpectedDestTimeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTExpectedDestTimeAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDestinationTime &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTExpectedDestTimeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDestinationTime _value) {
     (void)_client;
     setTBTExpectedDestTimeAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTExpectedDestTimeAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTExpectedDestTimeAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTExpectedDestTimeAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTExpectedDestTimeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDestinationTime _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTExpectedDestTimeAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTExpectedDestTimeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTDestinationTime _value) {
     (void)_client;
     return onRemoteSetTBTExpectedDestTimeAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTRemainTime& McuManagerStubDefault::getTBTExpectedRemainTimeAttribute() {
     return tBTExpectedRemainTimeAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTRemainTime& McuManagerStubDefault::getTBTExpectedRemainTimeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTExpectedRemainTimeAttribute();
 }

 void McuManagerStubDefault::setTBTExpectedRemainTimeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTRemainTime _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTExpectedRemainTimeAttribute(true);
         const bool valueChanged = (tBTExpectedRemainTimeAttributeValue_ != _value);
         if (valueChanged) {
             tBTExpectedRemainTimeAttributeValue_ = std::move(_value);
             fireTBTExpectedRemainTimeAttributeChanged(tBTExpectedRemainTimeAttributeValue_);
         }
         stubAdapter->lockTBTExpectedRemainTimeAttribute(false);
     } else {
         const bool valueChanged = trySetTBTExpectedRemainTimeAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTExpectedRemainTimeAttributeChanged(tBTExpectedRemainTimeAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTExpectedRemainTimeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTRemainTime _value) {
     if (!validateTBTExpectedRemainTimeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTExpectedRemainTimeAttribute(true);
         valueChanged = (tBTExpectedRemainTimeAttributeValue_ != _value);
         tBTExpectedRemainTimeAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTExpectedRemainTimeAttribute(false);
     } else {
         valueChanged = (tBTExpectedRemainTimeAttributeValue_ != _value);
         tBTExpectedRemainTimeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTExpectedRemainTimeAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTRemainTime &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTExpectedRemainTimeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTRemainTime _value) {
     (void)_client;
     setTBTExpectedRemainTimeAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTExpectedRemainTimeAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTExpectedRemainTimeAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTExpectedRemainTimeAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTExpectedRemainTimeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTRemainTime _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTExpectedRemainTimeAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTExpectedRemainTimeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StTBTRemainTime _value) {
     (void)_client;
     return onRemoteSetTBTExpectedRemainTimeAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getTBTGuideTPInfoAttribute() {
     return tBTGuideTPInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getTBTGuideTPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTGuideTPInfoAttribute();
 }

 void McuManagerStubDefault::setTBTGuideTPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTGuideTPInfoAttribute(true);
         const bool valueChanged = (tBTGuideTPInfoAttributeValue_ != _value);
         if (valueChanged) {
             tBTGuideTPInfoAttributeValue_ = std::move(_value);
             fireTBTGuideTPInfoAttributeChanged(tBTGuideTPInfoAttributeValue_);
         }
         stubAdapter->lockTBTGuideTPInfoAttribute(false);
     } else {
         const bool valueChanged = trySetTBTGuideTPInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTGuideTPInfoAttributeChanged(tBTGuideTPInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTGuideTPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateTBTGuideTPInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTGuideTPInfoAttribute(true);
         valueChanged = (tBTGuideTPInfoAttributeValue_ != _value);
         tBTGuideTPInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTGuideTPInfoAttribute(false);
     } else {
         valueChanged = (tBTGuideTPInfoAttributeValue_ != _value);
         tBTGuideTPInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTGuideTPInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTGuideTPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setTBTGuideTPInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTGuideTPInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTGuideTPInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTGuideTPInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTGuideTPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTGuideTPInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTGuideTPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetTBTGuideTPInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getTBTDestTPInfoAttribute() {
     return tBTDestTPInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getTBTDestTPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTDestTPInfoAttribute();
 }

 void McuManagerStubDefault::setTBTDestTPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDestTPInfoAttribute(true);
         const bool valueChanged = (tBTDestTPInfoAttributeValue_ != _value);
         if (valueChanged) {
             tBTDestTPInfoAttributeValue_ = std::move(_value);
             fireTBTDestTPInfoAttributeChanged(tBTDestTPInfoAttributeValue_);
         }
         stubAdapter->lockTBTDestTPInfoAttribute(false);
     } else {
         const bool valueChanged = trySetTBTDestTPInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTDestTPInfoAttributeChanged(tBTDestTPInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTDestTPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateTBTDestTPInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTDestTPInfoAttribute(true);
         valueChanged = (tBTDestTPInfoAttributeValue_ != _value);
         tBTDestTPInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTDestTPInfoAttribute(false);
     } else {
         valueChanged = (tBTDestTPInfoAttributeValue_ != _value);
         tBTDestTPInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTDestTPInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTDestTPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setTBTDestTPInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTDestTPInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTDestTPInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTDestTPInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDestTPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTDestTPInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTDestTPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetTBTDestTPInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getTBTViaPoint1TPInfoAttribute() {
     return tBTViaPoint1TPInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getTBTViaPoint1TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTViaPoint1TPInfoAttribute();
 }

 void McuManagerStubDefault::setTBTViaPoint1TPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTViaPoint1TPInfoAttribute(true);
         const bool valueChanged = (tBTViaPoint1TPInfoAttributeValue_ != _value);
         if (valueChanged) {
             tBTViaPoint1TPInfoAttributeValue_ = std::move(_value);
             fireTBTViaPoint1TPInfoAttributeChanged(tBTViaPoint1TPInfoAttributeValue_);
         }
         stubAdapter->lockTBTViaPoint1TPInfoAttribute(false);
     } else {
         const bool valueChanged = trySetTBTViaPoint1TPInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTViaPoint1TPInfoAttributeChanged(tBTViaPoint1TPInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTViaPoint1TPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateTBTViaPoint1TPInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTViaPoint1TPInfoAttribute(true);
         valueChanged = (tBTViaPoint1TPInfoAttributeValue_ != _value);
         tBTViaPoint1TPInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTViaPoint1TPInfoAttribute(false);
     } else {
         valueChanged = (tBTViaPoint1TPInfoAttributeValue_ != _value);
         tBTViaPoint1TPInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTViaPoint1TPInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTViaPoint1TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setTBTViaPoint1TPInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTViaPoint1TPInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTViaPoint1TPInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTViaPoint1TPInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTViaPoint1TPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTViaPoint1TPInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTViaPoint1TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetTBTViaPoint1TPInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getTBTViaPoint2TPInfoAttribute() {
     return tBTViaPoint2TPInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getTBTViaPoint2TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTViaPoint2TPInfoAttribute();
 }

 void McuManagerStubDefault::setTBTViaPoint2TPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTViaPoint2TPInfoAttribute(true);
         const bool valueChanged = (tBTViaPoint2TPInfoAttributeValue_ != _value);
         if (valueChanged) {
             tBTViaPoint2TPInfoAttributeValue_ = std::move(_value);
             fireTBTViaPoint2TPInfoAttributeChanged(tBTViaPoint2TPInfoAttributeValue_);
         }
         stubAdapter->lockTBTViaPoint2TPInfoAttribute(false);
     } else {
         const bool valueChanged = trySetTBTViaPoint2TPInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTViaPoint2TPInfoAttributeChanged(tBTViaPoint2TPInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTViaPoint2TPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateTBTViaPoint2TPInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTViaPoint2TPInfoAttribute(true);
         valueChanged = (tBTViaPoint2TPInfoAttributeValue_ != _value);
         tBTViaPoint2TPInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTViaPoint2TPInfoAttribute(false);
     } else {
         valueChanged = (tBTViaPoint2TPInfoAttributeValue_ != _value);
         tBTViaPoint2TPInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTViaPoint2TPInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTViaPoint2TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setTBTViaPoint2TPInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTViaPoint2TPInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTViaPoint2TPInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTViaPoint2TPInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTViaPoint2TPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTViaPoint2TPInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTViaPoint2TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetTBTViaPoint2TPInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getTBTViaPoint3TPInfoAttribute() {
     return tBTViaPoint3TPInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getTBTViaPoint3TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTViaPoint3TPInfoAttribute();
 }

 void McuManagerStubDefault::setTBTViaPoint3TPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTViaPoint3TPInfoAttribute(true);
         const bool valueChanged = (tBTViaPoint3TPInfoAttributeValue_ != _value);
         if (valueChanged) {
             tBTViaPoint3TPInfoAttributeValue_ = std::move(_value);
             fireTBTViaPoint3TPInfoAttributeChanged(tBTViaPoint3TPInfoAttributeValue_);
         }
         stubAdapter->lockTBTViaPoint3TPInfoAttribute(false);
     } else {
         const bool valueChanged = trySetTBTViaPoint3TPInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTViaPoint3TPInfoAttributeChanged(tBTViaPoint3TPInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTViaPoint3TPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateTBTViaPoint3TPInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTViaPoint3TPInfoAttribute(true);
         valueChanged = (tBTViaPoint3TPInfoAttributeValue_ != _value);
         tBTViaPoint3TPInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTViaPoint3TPInfoAttribute(false);
     } else {
         valueChanged = (tBTViaPoint3TPInfoAttributeValue_ != _value);
         tBTViaPoint3TPInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTViaPoint3TPInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTViaPoint3TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setTBTViaPoint3TPInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTViaPoint3TPInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTViaPoint3TPInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTViaPoint3TPInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTViaPoint3TPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTViaPoint3TPInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTViaPoint3TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetTBTViaPoint3TPInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getTBTViaPoint4TPInfoAttribute() {
     return tBTViaPoint4TPInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getTBTViaPoint4TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBTViaPoint4TPInfoAttribute();
 }

 void McuManagerStubDefault::setTBTViaPoint4TPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTViaPoint4TPInfoAttribute(true);
         const bool valueChanged = (tBTViaPoint4TPInfoAttributeValue_ != _value);
         if (valueChanged) {
             tBTViaPoint4TPInfoAttributeValue_ = std::move(_value);
             fireTBTViaPoint4TPInfoAttributeChanged(tBTViaPoint4TPInfoAttributeValue_);
         }
         stubAdapter->lockTBTViaPoint4TPInfoAttribute(false);
     } else {
         const bool valueChanged = trySetTBTViaPoint4TPInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireTBTViaPoint4TPInfoAttributeChanged(tBTViaPoint4TPInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetTBTViaPoint4TPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateTBTViaPoint4TPInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBTViaPoint4TPInfoAttribute(true);
         valueChanged = (tBTViaPoint4TPInfoAttributeValue_ != _value);
         tBTViaPoint4TPInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockTBTViaPoint4TPInfoAttribute(false);
     } else {
         valueChanged = (tBTViaPoint4TPInfoAttributeValue_ != _value);
         tBTViaPoint4TPInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateTBTViaPoint4TPInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setTBTViaPoint4TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setTBTViaPoint4TPInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteTBTViaPoint4TPInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteTBTViaPoint4TPInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteTBTViaPoint4TPInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTViaPoint4TPInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetTBTViaPoint4TPInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetTBTViaPoint4TPInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetTBTViaPoint4TPInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoTTC& McuManagerStubDefault::getDriveAssistCruiseControlTTCAttribute() {
     return driveAssistCruiseControlTTCAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoTTC& McuManagerStubDefault::getDriveAssistCruiseControlTTCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getDriveAssistCruiseControlTTCAttribute();
 }

 void McuManagerStubDefault::setDriveAssistCruiseControlTTCAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoTTC _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistCruiseControlTTCAttribute(true);
         const bool valueChanged = (driveAssistCruiseControlTTCAttributeValue_ != _value);
         if (valueChanged) {
             driveAssistCruiseControlTTCAttributeValue_ = std::move(_value);
             fireDriveAssistCruiseControlTTCAttributeChanged(driveAssistCruiseControlTTCAttributeValue_);
         }
         stubAdapter->lockDriveAssistCruiseControlTTCAttribute(false);
     } else {
         const bool valueChanged = trySetDriveAssistCruiseControlTTCAttribute(std::move(_value));
         if (valueChanged) {
             fireDriveAssistCruiseControlTTCAttributeChanged(driveAssistCruiseControlTTCAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetDriveAssistCruiseControlTTCAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoTTC _value) {
     if (!validateDriveAssistCruiseControlTTCAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistCruiseControlTTCAttribute(true);
         valueChanged = (driveAssistCruiseControlTTCAttributeValue_ != _value);
         driveAssistCruiseControlTTCAttributeValue_ = std::move(_value);
         stubAdapter->lockDriveAssistCruiseControlTTCAttribute(false);
     } else {
         valueChanged = (driveAssistCruiseControlTTCAttributeValue_ != _value);
         driveAssistCruiseControlTTCAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateDriveAssistCruiseControlTTCAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoTTC &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setDriveAssistCruiseControlTTCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoTTC _value) {
     (void)_client;
     setDriveAssistCruiseControlTTCAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteDriveAssistCruiseControlTTCAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteDriveAssistCruiseControlTTCAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteDriveAssistCruiseControlTTCAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistCruiseControlTTCAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoTTC _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetDriveAssistCruiseControlTTCAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistCruiseControlTTCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoTTC _value) {
     (void)_client;
     return onRemoteSetDriveAssistCruiseControlTTCAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoReal& McuManagerStubDefault::getDriveAssistCruiseControlRealAttribute() {
     return driveAssistCruiseControlRealAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoReal& McuManagerStubDefault::getDriveAssistCruiseControlRealAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getDriveAssistCruiseControlRealAttribute();
 }

 void McuManagerStubDefault::setDriveAssistCruiseControlRealAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoReal _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistCruiseControlRealAttribute(true);
         const bool valueChanged = (driveAssistCruiseControlRealAttributeValue_ != _value);
         if (valueChanged) {
             driveAssistCruiseControlRealAttributeValue_ = std::move(_value);
             fireDriveAssistCruiseControlRealAttributeChanged(driveAssistCruiseControlRealAttributeValue_);
         }
         stubAdapter->lockDriveAssistCruiseControlRealAttribute(false);
     } else {
         const bool valueChanged = trySetDriveAssistCruiseControlRealAttribute(std::move(_value));
         if (valueChanged) {
             fireDriveAssistCruiseControlRealAttributeChanged(driveAssistCruiseControlRealAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetDriveAssistCruiseControlRealAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoReal _value) {
     if (!validateDriveAssistCruiseControlRealAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistCruiseControlRealAttribute(true);
         valueChanged = (driveAssistCruiseControlRealAttributeValue_ != _value);
         driveAssistCruiseControlRealAttributeValue_ = std::move(_value);
         stubAdapter->lockDriveAssistCruiseControlRealAttribute(false);
     } else {
         valueChanged = (driveAssistCruiseControlRealAttributeValue_ != _value);
         driveAssistCruiseControlRealAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateDriveAssistCruiseControlRealAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoReal &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setDriveAssistCruiseControlRealAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoReal _value) {
     (void)_client;
     setDriveAssistCruiseControlRealAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteDriveAssistCruiseControlRealAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteDriveAssistCruiseControlRealAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteDriveAssistCruiseControlRealAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistCruiseControlRealAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoReal _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetDriveAssistCruiseControlRealAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistCruiseControlRealAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistCCInfoReal _value) {
     (void)_client;
     return onRemoteSetDriveAssistCruiseControlRealAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistLaneInfo& McuManagerStubDefault::getDriveAssistLaneAttribute() {
     return driveAssistLaneAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistLaneInfo& McuManagerStubDefault::getDriveAssistLaneAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getDriveAssistLaneAttribute();
 }

 void McuManagerStubDefault::setDriveAssistLaneAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistLaneInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistLaneAttribute(true);
         const bool valueChanged = (driveAssistLaneAttributeValue_ != _value);
         if (valueChanged) {
             driveAssistLaneAttributeValue_ = std::move(_value);
             fireDriveAssistLaneAttributeChanged(driveAssistLaneAttributeValue_);
         }
         stubAdapter->lockDriveAssistLaneAttribute(false);
     } else {
         const bool valueChanged = trySetDriveAssistLaneAttribute(std::move(_value));
         if (valueChanged) {
             fireDriveAssistLaneAttributeChanged(driveAssistLaneAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetDriveAssistLaneAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistLaneInfo _value) {
     if (!validateDriveAssistLaneAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistLaneAttribute(true);
         valueChanged = (driveAssistLaneAttributeValue_ != _value);
         driveAssistLaneAttributeValue_ = std::move(_value);
         stubAdapter->lockDriveAssistLaneAttribute(false);
     } else {
         valueChanged = (driveAssistLaneAttributeValue_ != _value);
         driveAssistLaneAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateDriveAssistLaneAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistLaneInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setDriveAssistLaneAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistLaneInfo _value) {
     (void)_client;
     setDriveAssistLaneAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteDriveAssistLaneAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteDriveAssistLaneAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteDriveAssistLaneAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistLaneAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistLaneInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetDriveAssistLaneAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistLaneAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistLaneInfo _value) {
     (void)_client;
     return onRemoteSetDriveAssistLaneAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistDAWInfo& McuManagerStubDefault::getDriveAssistDAWAttribute() {
     return driveAssistDAWAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistDAWInfo& McuManagerStubDefault::getDriveAssistDAWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getDriveAssistDAWAttribute();
 }

 void McuManagerStubDefault::setDriveAssistDAWAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistDAWInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistDAWAttribute(true);
         const bool valueChanged = (driveAssistDAWAttributeValue_ != _value);
         if (valueChanged) {
             driveAssistDAWAttributeValue_ = std::move(_value);
             fireDriveAssistDAWAttributeChanged(driveAssistDAWAttributeValue_);
         }
         stubAdapter->lockDriveAssistDAWAttribute(false);
     } else {
         const bool valueChanged = trySetDriveAssistDAWAttribute(std::move(_value));
         if (valueChanged) {
             fireDriveAssistDAWAttributeChanged(driveAssistDAWAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetDriveAssistDAWAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistDAWInfo _value) {
     if (!validateDriveAssistDAWAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistDAWAttribute(true);
         valueChanged = (driveAssistDAWAttributeValue_ != _value);
         driveAssistDAWAttributeValue_ = std::move(_value);
         stubAdapter->lockDriveAssistDAWAttribute(false);
     } else {
         valueChanged = (driveAssistDAWAttributeValue_ != _value);
         driveAssistDAWAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateDriveAssistDAWAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistDAWInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setDriveAssistDAWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistDAWInfo _value) {
     (void)_client;
     setDriveAssistDAWAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteDriveAssistDAWAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteDriveAssistDAWAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteDriveAssistDAWAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistDAWAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistDAWInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetDriveAssistDAWAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistDAWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistDAWInfo _value) {
     (void)_client;
     return onRemoteSetDriveAssistDAWAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistISLWInfo& McuManagerStubDefault::getDriveAssistISLWAttribute() {
     return driveAssistISLWAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistISLWInfo& McuManagerStubDefault::getDriveAssistISLWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getDriveAssistISLWAttribute();
 }

 void McuManagerStubDefault::setDriveAssistISLWAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistISLWInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistISLWAttribute(true);
         const bool valueChanged = (driveAssistISLWAttributeValue_ != _value);
         if (valueChanged) {
             driveAssistISLWAttributeValue_ = std::move(_value);
             fireDriveAssistISLWAttributeChanged(driveAssistISLWAttributeValue_);
         }
         stubAdapter->lockDriveAssistISLWAttribute(false);
     } else {
         const bool valueChanged = trySetDriveAssistISLWAttribute(std::move(_value));
         if (valueChanged) {
             fireDriveAssistISLWAttributeChanged(driveAssistISLWAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetDriveAssistISLWAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistISLWInfo _value) {
     if (!validateDriveAssistISLWAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistISLWAttribute(true);
         valueChanged = (driveAssistISLWAttributeValue_ != _value);
         driveAssistISLWAttributeValue_ = std::move(_value);
         stubAdapter->lockDriveAssistISLWAttribute(false);
     } else {
         valueChanged = (driveAssistISLWAttributeValue_ != _value);
         driveAssistISLWAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateDriveAssistISLWAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistISLWInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setDriveAssistISLWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistISLWInfo _value) {
     (void)_client;
     setDriveAssistISLWAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteDriveAssistISLWAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteDriveAssistISLWAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteDriveAssistISLWAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistISLWAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistISLWInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetDriveAssistISLWAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistISLWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistISLWInfo _value) {
     (void)_client;
     return onRemoteSetDriveAssistISLWAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistAWDInfo& McuManagerStubDefault::getDriveAssistAWDAttribute() {
     return driveAssistAWDAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistAWDInfo& McuManagerStubDefault::getDriveAssistAWDAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getDriveAssistAWDAttribute();
 }

 void McuManagerStubDefault::setDriveAssistAWDAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistAWDInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistAWDAttribute(true);
         const bool valueChanged = (driveAssistAWDAttributeValue_ != _value);
         if (valueChanged) {
             driveAssistAWDAttributeValue_ = std::move(_value);
             fireDriveAssistAWDAttributeChanged(driveAssistAWDAttributeValue_);
         }
         stubAdapter->lockDriveAssistAWDAttribute(false);
     } else {
         const bool valueChanged = trySetDriveAssistAWDAttribute(std::move(_value));
         if (valueChanged) {
             fireDriveAssistAWDAttributeChanged(driveAssistAWDAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetDriveAssistAWDAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistAWDInfo _value) {
     if (!validateDriveAssistAWDAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistAWDAttribute(true);
         valueChanged = (driveAssistAWDAttributeValue_ != _value);
         driveAssistAWDAttributeValue_ = std::move(_value);
         stubAdapter->lockDriveAssistAWDAttribute(false);
     } else {
         valueChanged = (driveAssistAWDAttributeValue_ != _value);
         driveAssistAWDAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateDriveAssistAWDAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistAWDInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setDriveAssistAWDAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistAWDInfo _value) {
     (void)_client;
     setDriveAssistAWDAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteDriveAssistAWDAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteDriveAssistAWDAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteDriveAssistAWDAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistAWDAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistAWDInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetDriveAssistAWDAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistAWDAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistAWDInfo _value) {
     (void)_client;
     return onRemoteSetDriveAssistAWDAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistTPMSInfo& McuManagerStubDefault::getDriveAssistTPMSAttribute() {
     return driveAssistTPMSAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistTPMSInfo& McuManagerStubDefault::getDriveAssistTPMSAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getDriveAssistTPMSAttribute();
 }

 void McuManagerStubDefault::setDriveAssistTPMSAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistTPMSInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistTPMSAttribute(true);
         const bool valueChanged = (driveAssistTPMSAttributeValue_ != _value);
         if (valueChanged) {
             driveAssistTPMSAttributeValue_ = std::move(_value);
             fireDriveAssistTPMSAttributeChanged(driveAssistTPMSAttributeValue_);
         }
         stubAdapter->lockDriveAssistTPMSAttribute(false);
     } else {
         const bool valueChanged = trySetDriveAssistTPMSAttribute(std::move(_value));
         if (valueChanged) {
             fireDriveAssistTPMSAttributeChanged(driveAssistTPMSAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetDriveAssistTPMSAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistTPMSInfo _value) {
     if (!validateDriveAssistTPMSAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDriveAssistTPMSAttribute(true);
         valueChanged = (driveAssistTPMSAttributeValue_ != _value);
         driveAssistTPMSAttributeValue_ = std::move(_value);
         stubAdapter->lockDriveAssistTPMSAttribute(false);
     } else {
         valueChanged = (driveAssistTPMSAttributeValue_ != _value);
         driveAssistTPMSAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateDriveAssistTPMSAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistTPMSInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setDriveAssistTPMSAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistTPMSInfo _value) {
     (void)_client;
     setDriveAssistTPMSAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteDriveAssistTPMSAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteDriveAssistTPMSAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteDriveAssistTPMSAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistTPMSAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistTPMSInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetDriveAssistTPMSAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDriveAssistTPMSAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StDriveAssistTPMSInfo _value) {
     (void)_client;
     return onRemoteSetDriveAssistTPMSAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StAdasInfo& McuManagerStubDefault::getAdasInfoAttribute() {
     return adasInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StAdasInfo& McuManagerStubDefault::getAdasInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAdasInfoAttribute();
 }

 void McuManagerStubDefault::setAdasInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StAdasInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAdasInfoAttribute(true);
         const bool valueChanged = (adasInfoAttributeValue_ != _value);
         if (valueChanged) {
             adasInfoAttributeValue_ = std::move(_value);
             fireAdasInfoAttributeChanged(adasInfoAttributeValue_);
         }
         stubAdapter->lockAdasInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAdasInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAdasInfoAttributeChanged(adasInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAdasInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StAdasInfo _value) {
     if (!validateAdasInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAdasInfoAttribute(true);
         valueChanged = (adasInfoAttributeValue_ != _value);
         adasInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAdasInfoAttribute(false);
     } else {
         valueChanged = (adasInfoAttributeValue_ != _value);
         adasInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAdasInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StAdasInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAdasInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StAdasInfo _value) {
     (void)_client;
     setAdasInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAdasInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAdasInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAdasInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAdasInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StAdasInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAdasInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAdasInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StAdasInfo _value) {
     (void)_client;
     return onRemoteSetAdasInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo& McuManagerStubDefault::getContentsGearAttribute() {
     return contentsGearAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo& McuManagerStubDefault::getContentsGearAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getContentsGearAttribute();
 }

 void McuManagerStubDefault::setContentsGearAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsGearAttribute(true);
         const bool valueChanged = (contentsGearAttributeValue_ != _value);
         if (valueChanged) {
             contentsGearAttributeValue_ = std::move(_value);
             fireContentsGearAttributeChanged(contentsGearAttributeValue_);
         }
         stubAdapter->lockContentsGearAttribute(false);
     } else {
         const bool valueChanged = trySetContentsGearAttribute(std::move(_value));
         if (valueChanged) {
             fireContentsGearAttributeChanged(contentsGearAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetContentsGearAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo _value) {
     if (!validateContentsGearAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsGearAttribute(true);
         valueChanged = (contentsGearAttributeValue_ != _value);
         contentsGearAttributeValue_ = std::move(_value);
         stubAdapter->lockContentsGearAttribute(false);
     } else {
         valueChanged = (contentsGearAttributeValue_ != _value);
         contentsGearAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateContentsGearAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setContentsGearAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo _value) {
     (void)_client;
     setContentsGearAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteContentsGearAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteContentsGearAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteContentsGearAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsGearAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetContentsGearAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsGearAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo _value) {
     (void)_client;
     return onRemoteSetContentsGearAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCCInfo& McuManagerStubDefault::getContentsCCAttribute() {
     return contentsCCAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCCInfo& McuManagerStubDefault::getContentsCCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getContentsCCAttribute();
 }

 void McuManagerStubDefault::setContentsCCAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCCInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsCCAttribute(true);
         const bool valueChanged = (contentsCCAttributeValue_ != _value);
         if (valueChanged) {
             contentsCCAttributeValue_ = std::move(_value);
             fireContentsCCAttributeChanged(contentsCCAttributeValue_);
         }
         stubAdapter->lockContentsCCAttribute(false);
     } else {
         const bool valueChanged = trySetContentsCCAttribute(std::move(_value));
         if (valueChanged) {
             fireContentsCCAttributeChanged(contentsCCAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetContentsCCAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCCInfo _value) {
     if (!validateContentsCCAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsCCAttribute(true);
         valueChanged = (contentsCCAttributeValue_ != _value);
         contentsCCAttributeValue_ = std::move(_value);
         stubAdapter->lockContentsCCAttribute(false);
     } else {
         valueChanged = (contentsCCAttributeValue_ != _value);
         contentsCCAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateContentsCCAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCCInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setContentsCCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCCInfo _value) {
     (void)_client;
     setContentsCCAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteContentsCCAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteContentsCCAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteContentsCCAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsCCAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCCInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetContentsCCAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsCCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCCInfo _value) {
     (void)_client;
     return onRemoteSetContentsCCAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSCCInfo& McuManagerStubDefault::getContentsSCCAttribute() {
     return contentsSCCAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSCCInfo& McuManagerStubDefault::getContentsSCCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getContentsSCCAttribute();
 }

 void McuManagerStubDefault::setContentsSCCAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSCCInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsSCCAttribute(true);
         const bool valueChanged = (contentsSCCAttributeValue_ != _value);
         if (valueChanged) {
             contentsSCCAttributeValue_ = std::move(_value);
             fireContentsSCCAttributeChanged(contentsSCCAttributeValue_);
         }
         stubAdapter->lockContentsSCCAttribute(false);
     } else {
         const bool valueChanged = trySetContentsSCCAttribute(std::move(_value));
         if (valueChanged) {
             fireContentsSCCAttributeChanged(contentsSCCAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetContentsSCCAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSCCInfo _value) {
     if (!validateContentsSCCAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsSCCAttribute(true);
         valueChanged = (contentsSCCAttributeValue_ != _value);
         contentsSCCAttributeValue_ = std::move(_value);
         stubAdapter->lockContentsSCCAttribute(false);
     } else {
         valueChanged = (contentsSCCAttributeValue_ != _value);
         contentsSCCAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateContentsSCCAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSCCInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setContentsSCCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSCCInfo _value) {
     (void)_client;
     setContentsSCCAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteContentsSCCAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteContentsSCCAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteContentsSCCAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsSCCAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSCCInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetContentsSCCAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsSCCAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSCCInfo _value) {
     (void)_client;
     return onRemoteSetContentsSCCAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCoasting& McuManagerStubDefault::getContentsCoastingAttribute() {
     return contentsCoastingAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCoasting& McuManagerStubDefault::getContentsCoastingAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getContentsCoastingAttribute();
 }

 void McuManagerStubDefault::setContentsCoastingAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCoasting _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsCoastingAttribute(true);
         const bool valueChanged = (contentsCoastingAttributeValue_ != _value);
         if (valueChanged) {
             contentsCoastingAttributeValue_ = std::move(_value);
             fireContentsCoastingAttributeChanged(contentsCoastingAttributeValue_);
         }
         stubAdapter->lockContentsCoastingAttribute(false);
     } else {
         const bool valueChanged = trySetContentsCoastingAttribute(std::move(_value));
         if (valueChanged) {
             fireContentsCoastingAttributeChanged(contentsCoastingAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetContentsCoastingAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCoasting _value) {
     if (!validateContentsCoastingAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsCoastingAttribute(true);
         valueChanged = (contentsCoastingAttributeValue_ != _value);
         contentsCoastingAttributeValue_ = std::move(_value);
         stubAdapter->lockContentsCoastingAttribute(false);
     } else {
         valueChanged = (contentsCoastingAttributeValue_ != _value);
         contentsCoastingAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateContentsCoastingAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCoasting &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setContentsCoastingAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCoasting _value) {
     (void)_client;
     setContentsCoastingAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteContentsCoastingAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteContentsCoastingAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteContentsCoastingAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsCoastingAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCoasting _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetContentsCoastingAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsCoastingAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsCoasting _value) {
     (void)_client;
     return onRemoteSetContentsCoastingAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDISInfo& McuManagerStubDefault::getContentsDISAttribute() {
     return contentsDISAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDISInfo& McuManagerStubDefault::getContentsDISAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getContentsDISAttribute();
 }

 void McuManagerStubDefault::setContentsDISAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDISInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsDISAttribute(true);
         const bool valueChanged = (contentsDISAttributeValue_ != _value);
         if (valueChanged) {
             contentsDISAttributeValue_ = std::move(_value);
             fireContentsDISAttributeChanged(contentsDISAttributeValue_);
         }
         stubAdapter->lockContentsDISAttribute(false);
     } else {
         const bool valueChanged = trySetContentsDISAttribute(std::move(_value));
         if (valueChanged) {
             fireContentsDISAttributeChanged(contentsDISAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetContentsDISAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDISInfo _value) {
     if (!validateContentsDISAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsDISAttribute(true);
         valueChanged = (contentsDISAttributeValue_ != _value);
         contentsDISAttributeValue_ = std::move(_value);
         stubAdapter->lockContentsDISAttribute(false);
     } else {
         valueChanged = (contentsDISAttributeValue_ != _value);
         contentsDISAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateContentsDISAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDISInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setContentsDISAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDISInfo _value) {
     (void)_client;
     setContentsDISAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteContentsDISAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteContentsDISAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteContentsDISAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsDISAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDISInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetContentsDISAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsDISAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDISInfo _value) {
     (void)_client;
     return onRemoteSetContentsDISAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDTE& McuManagerStubDefault::getContentsDTEInfoAttribute() {
     return contentsDTEInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDTE& McuManagerStubDefault::getContentsDTEInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getContentsDTEInfoAttribute();
 }

 void McuManagerStubDefault::setContentsDTEInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDTE _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsDTEInfoAttribute(true);
         const bool valueChanged = (contentsDTEInfoAttributeValue_ != _value);
         if (valueChanged) {
             contentsDTEInfoAttributeValue_ = std::move(_value);
             fireContentsDTEInfoAttributeChanged(contentsDTEInfoAttributeValue_);
         }
         stubAdapter->lockContentsDTEInfoAttribute(false);
     } else {
         const bool valueChanged = trySetContentsDTEInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireContentsDTEInfoAttributeChanged(contentsDTEInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetContentsDTEInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDTE _value) {
     if (!validateContentsDTEInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsDTEInfoAttribute(true);
         valueChanged = (contentsDTEInfoAttributeValue_ != _value);
         contentsDTEInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockContentsDTEInfoAttribute(false);
     } else {
         valueChanged = (contentsDTEInfoAttributeValue_ != _value);
         contentsDTEInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateContentsDTEInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDTE &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setContentsDTEInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDTE _value) {
     (void)_client;
     setContentsDTEInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteContentsDTEInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteContentsDTEInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteContentsDTEInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsDTEInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDTE _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetContentsDTEInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsDTEInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsDTE _value) {
     (void)_client;
     return onRemoteSetContentsDTEInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsISLWInfo& McuManagerStubDefault::getContentsISLWAttribute() {
     return contentsISLWAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsISLWInfo& McuManagerStubDefault::getContentsISLWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getContentsISLWAttribute();
 }

 void McuManagerStubDefault::setContentsISLWAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsISLWInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsISLWAttribute(true);
         const bool valueChanged = (contentsISLWAttributeValue_ != _value);
         if (valueChanged) {
             contentsISLWAttributeValue_ = std::move(_value);
             fireContentsISLWAttributeChanged(contentsISLWAttributeValue_);
         }
         stubAdapter->lockContentsISLWAttribute(false);
     } else {
         const bool valueChanged = trySetContentsISLWAttribute(std::move(_value));
         if (valueChanged) {
             fireContentsISLWAttributeChanged(contentsISLWAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetContentsISLWAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsISLWInfo _value) {
     if (!validateContentsISLWAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsISLWAttribute(true);
         valueChanged = (contentsISLWAttributeValue_ != _value);
         contentsISLWAttributeValue_ = std::move(_value);
         stubAdapter->lockContentsISLWAttribute(false);
     } else {
         valueChanged = (contentsISLWAttributeValue_ != _value);
         contentsISLWAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateContentsISLWAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsISLWInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setContentsISLWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsISLWInfo _value) {
     (void)_client;
     setContentsISLWAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteContentsISLWAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteContentsISLWAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteContentsISLWAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsISLWAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsISLWInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetContentsISLWAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsISLWAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsISLWInfo _value) {
     (void)_client;
     return onRemoteSetContentsISLWAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsOAT& McuManagerStubDefault::getContentsOATAttribute() {
     return contentsOATAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsOAT& McuManagerStubDefault::getContentsOATAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getContentsOATAttribute();
 }

 void McuManagerStubDefault::setContentsOATAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsOAT _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsOATAttribute(true);
         const bool valueChanged = (contentsOATAttributeValue_ != _value);
         if (valueChanged) {
             contentsOATAttributeValue_ = std::move(_value);
             fireContentsOATAttributeChanged(contentsOATAttributeValue_);
         }
         stubAdapter->lockContentsOATAttribute(false);
     } else {
         const bool valueChanged = trySetContentsOATAttribute(std::move(_value));
         if (valueChanged) {
             fireContentsOATAttributeChanged(contentsOATAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetContentsOATAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsOAT _value) {
     if (!validateContentsOATAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsOATAttribute(true);
         valueChanged = (contentsOATAttributeValue_ != _value);
         contentsOATAttributeValue_ = std::move(_value);
         stubAdapter->lockContentsOATAttribute(false);
     } else {
         valueChanged = (contentsOATAttributeValue_ != _value);
         contentsOATAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateContentsOATAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsOAT &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setContentsOATAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsOAT _value) {
     (void)_client;
     setContentsOATAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteContentsOATAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteContentsOATAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteContentsOATAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsOATAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsOAT _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetContentsOATAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsOATAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsOAT _value) {
     (void)_client;
     return onRemoteSetContentsOATAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsODO& McuManagerStubDefault::getContentsODOMeterAttribute() {
     return contentsODOMeterAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsODO& McuManagerStubDefault::getContentsODOMeterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getContentsODOMeterAttribute();
 }

 void McuManagerStubDefault::setContentsODOMeterAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsODO _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsODOMeterAttribute(true);
         const bool valueChanged = (contentsODOMeterAttributeValue_ != _value);
         if (valueChanged) {
             contentsODOMeterAttributeValue_ = std::move(_value);
             fireContentsODOMeterAttributeChanged(contentsODOMeterAttributeValue_);
         }
         stubAdapter->lockContentsODOMeterAttribute(false);
     } else {
         const bool valueChanged = trySetContentsODOMeterAttribute(std::move(_value));
         if (valueChanged) {
             fireContentsODOMeterAttributeChanged(contentsODOMeterAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetContentsODOMeterAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsODO _value) {
     if (!validateContentsODOMeterAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsODOMeterAttribute(true);
         valueChanged = (contentsODOMeterAttributeValue_ != _value);
         contentsODOMeterAttributeValue_ = std::move(_value);
         stubAdapter->lockContentsODOMeterAttribute(false);
     } else {
         valueChanged = (contentsODOMeterAttributeValue_ != _value);
         contentsODOMeterAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateContentsODOMeterAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsODO &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setContentsODOMeterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsODO _value) {
     (void)_client;
     setContentsODOMeterAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteContentsODOMeterAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteContentsODOMeterAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteContentsODOMeterAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsODOMeterAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsODO _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetContentsODOMeterAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsODOMeterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsODO _value) {
     (void)_client;
     return onRemoteSetContentsODOMeterAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState& McuManagerStubDefault::getEcoPowerDisplayInfoAttribute() {
     return ecoPowerDisplayInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState& McuManagerStubDefault::getEcoPowerDisplayInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getEcoPowerDisplayInfoAttribute();
 }

 void McuManagerStubDefault::setEcoPowerDisplayInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockEcoPowerDisplayInfoAttribute(true);
         const bool valueChanged = (ecoPowerDisplayInfoAttributeValue_ != _value);
         if (valueChanged) {
             ecoPowerDisplayInfoAttributeValue_ = std::move(_value);
             fireEcoPowerDisplayInfoAttributeChanged(ecoPowerDisplayInfoAttributeValue_);
         }
         stubAdapter->lockEcoPowerDisplayInfoAttribute(false);
     } else {
         const bool valueChanged = trySetEcoPowerDisplayInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireEcoPowerDisplayInfoAttributeChanged(ecoPowerDisplayInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetEcoPowerDisplayInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState _value) {
     if (!validateEcoPowerDisplayInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockEcoPowerDisplayInfoAttribute(true);
         valueChanged = (ecoPowerDisplayInfoAttributeValue_ != _value);
         ecoPowerDisplayInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockEcoPowerDisplayInfoAttribute(false);
     } else {
         valueChanged = (ecoPowerDisplayInfoAttributeValue_ != _value);
         ecoPowerDisplayInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateEcoPowerDisplayInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState &_value) {
     (void)_value;
     return _value.validate();
 }

 void McuManagerStubDefault::setEcoPowerDisplayInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState _value) {
     (void)_client;
     setEcoPowerDisplayInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteEcoPowerDisplayInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteEcoPowerDisplayInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteEcoPowerDisplayInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetEcoPowerDisplayInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetEcoPowerDisplayInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetEcoPowerDisplayInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumEcoPwrDispState _value) {
     (void)_client;
     return onRemoteSetEcoPowerDisplayInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsRSBRInfo& McuManagerStubDefault::getContentsRSBRAttribute() {
     return contentsRSBRAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsRSBRInfo& McuManagerStubDefault::getContentsRSBRAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getContentsRSBRAttribute();
 }

 void McuManagerStubDefault::setContentsRSBRAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsRSBRInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsRSBRAttribute(true);
         const bool valueChanged = (contentsRSBRAttributeValue_ != _value);
         if (valueChanged) {
             contentsRSBRAttributeValue_ = std::move(_value);
             fireContentsRSBRAttributeChanged(contentsRSBRAttributeValue_);
         }
         stubAdapter->lockContentsRSBRAttribute(false);
     } else {
         const bool valueChanged = trySetContentsRSBRAttribute(std::move(_value));
         if (valueChanged) {
             fireContentsRSBRAttributeChanged(contentsRSBRAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetContentsRSBRAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsRSBRInfo _value) {
     if (!validateContentsRSBRAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsRSBRAttribute(true);
         valueChanged = (contentsRSBRAttributeValue_ != _value);
         contentsRSBRAttributeValue_ = std::move(_value);
         stubAdapter->lockContentsRSBRAttribute(false);
     } else {
         valueChanged = (contentsRSBRAttributeValue_ != _value);
         contentsRSBRAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateContentsRSBRAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsRSBRInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setContentsRSBRAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsRSBRInfo _value) {
     (void)_client;
     setContentsRSBRAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteContentsRSBRAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteContentsRSBRAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteContentsRSBRAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsRSBRAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsRSBRInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetContentsRSBRAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsRSBRAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsRSBRInfo _value) {
     (void)_client;
     return onRemoteSetContentsRSBRAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSpdLimitInfo& McuManagerStubDefault::getContentsSpeedLimitAttribute() {
     return contentsSpeedLimitAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSpdLimitInfo& McuManagerStubDefault::getContentsSpeedLimitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getContentsSpeedLimitAttribute();
 }

 void McuManagerStubDefault::setContentsSpeedLimitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSpdLimitInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsSpeedLimitAttribute(true);
         const bool valueChanged = (contentsSpeedLimitAttributeValue_ != _value);
         if (valueChanged) {
             contentsSpeedLimitAttributeValue_ = std::move(_value);
             fireContentsSpeedLimitAttributeChanged(contentsSpeedLimitAttributeValue_);
         }
         stubAdapter->lockContentsSpeedLimitAttribute(false);
     } else {
         const bool valueChanged = trySetContentsSpeedLimitAttribute(std::move(_value));
         if (valueChanged) {
             fireContentsSpeedLimitAttributeChanged(contentsSpeedLimitAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetContentsSpeedLimitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSpdLimitInfo _value) {
     if (!validateContentsSpeedLimitAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockContentsSpeedLimitAttribute(true);
         valueChanged = (contentsSpeedLimitAttributeValue_ != _value);
         contentsSpeedLimitAttributeValue_ = std::move(_value);
         stubAdapter->lockContentsSpeedLimitAttribute(false);
     } else {
         valueChanged = (contentsSpeedLimitAttributeValue_ != _value);
         contentsSpeedLimitAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateContentsSpeedLimitAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSpdLimitInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setContentsSpeedLimitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSpdLimitInfo _value) {
     (void)_client;
     setContentsSpeedLimitAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteContentsSpeedLimitAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteContentsSpeedLimitAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteContentsSpeedLimitAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsSpeedLimitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSpdLimitInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetContentsSpeedLimitAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetContentsSpeedLimitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsSpdLimitInfo _value) {
     (void)_client;
     return onRemoteSetContentsSpeedLimitAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd& McuManagerStubDefault::getMasterWarnCmdAttribute() {
     return masterWarnCmdAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd& McuManagerStubDefault::getMasterWarnCmdAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getMasterWarnCmdAttribute();
 }

 void McuManagerStubDefault::setMasterWarnCmdAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockMasterWarnCmdAttribute(true);
         const bool valueChanged = (masterWarnCmdAttributeValue_ != _value);
         if (valueChanged) {
             masterWarnCmdAttributeValue_ = std::move(_value);
             fireMasterWarnCmdAttributeChanged(masterWarnCmdAttributeValue_);
         }
         stubAdapter->lockMasterWarnCmdAttribute(false);
     } else {
         const bool valueChanged = trySetMasterWarnCmdAttribute(std::move(_value));
         if (valueChanged) {
             fireMasterWarnCmdAttributeChanged(masterWarnCmdAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetMasterWarnCmdAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd _value) {
     if (!validateMasterWarnCmdAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockMasterWarnCmdAttribute(true);
         valueChanged = (masterWarnCmdAttributeValue_ != _value);
         masterWarnCmdAttributeValue_ = std::move(_value);
         stubAdapter->lockMasterWarnCmdAttribute(false);
     } else {
         valueChanged = (masterWarnCmdAttributeValue_ != _value);
         masterWarnCmdAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateMasterWarnCmdAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd &_value) {
     (void)_value;
     return _value.validate();
 }

 void McuManagerStubDefault::setMasterWarnCmdAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd _value) {
     (void)_client;
     setMasterWarnCmdAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteMasterWarnCmdAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteMasterWarnCmdAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteMasterWarnCmdAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetMasterWarnCmdAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetMasterWarnCmdAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetMasterWarnCmdAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd _value) {
     (void)_client;
     return onRemoteSetMasterWarnCmdAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpAMFMInfoAttribute() {
     return avTpAMFMInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpAMFMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAvTpAMFMInfoAttribute();
 }

 void McuManagerStubDefault::setAvTpAMFMInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpAMFMInfoAttribute(true);
         const bool valueChanged = (avTpAMFMInfoAttributeValue_ != _value);
         if (valueChanged) {
             avTpAMFMInfoAttributeValue_ = std::move(_value);
             fireAvTpAMFMInfoAttributeChanged(avTpAMFMInfoAttributeValue_);
         }
         stubAdapter->lockAvTpAMFMInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAvTpAMFMInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAvTpAMFMInfoAttributeChanged(avTpAMFMInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAvTpAMFMInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateAvTpAMFMInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpAMFMInfoAttribute(true);
         valueChanged = (avTpAMFMInfoAttributeValue_ != _value);
         avTpAMFMInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAvTpAMFMInfoAttribute(false);
     } else {
         valueChanged = (avTpAMFMInfoAttributeValue_ != _value);
         avTpAMFMInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAvTpAMFMInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAvTpAMFMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setAvTpAMFMInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAvTpAMFMInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAvTpAMFMInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAvTpAMFMInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpAMFMInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAvTpAMFMInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpAMFMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetAvTpAMFMInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpXMInfoAttribute() {
     return avTpXMInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpXMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAvTpXMInfoAttribute();
 }

 void McuManagerStubDefault::setAvTpXMInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpXMInfoAttribute(true);
         const bool valueChanged = (avTpXMInfoAttributeValue_ != _value);
         if (valueChanged) {
             avTpXMInfoAttributeValue_ = std::move(_value);
             fireAvTpXMInfoAttributeChanged(avTpXMInfoAttributeValue_);
         }
         stubAdapter->lockAvTpXMInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAvTpXMInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAvTpXMInfoAttributeChanged(avTpXMInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAvTpXMInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateAvTpXMInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpXMInfoAttribute(true);
         valueChanged = (avTpXMInfoAttributeValue_ != _value);
         avTpXMInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAvTpXMInfoAttribute(false);
     } else {
         valueChanged = (avTpXMInfoAttributeValue_ != _value);
         avTpXMInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAvTpXMInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAvTpXMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setAvTpXMInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAvTpXMInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAvTpXMInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAvTpXMInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpXMInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAvTpXMInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpXMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetAvTpXMInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpDABInfoAttribute() {
     return avTpDABInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpDABInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAvTpDABInfoAttribute();
 }

 void McuManagerStubDefault::setAvTpDABInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpDABInfoAttribute(true);
         const bool valueChanged = (avTpDABInfoAttributeValue_ != _value);
         if (valueChanged) {
             avTpDABInfoAttributeValue_ = std::move(_value);
             fireAvTpDABInfoAttributeChanged(avTpDABInfoAttributeValue_);
         }
         stubAdapter->lockAvTpDABInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAvTpDABInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAvTpDABInfoAttributeChanged(avTpDABInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAvTpDABInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateAvTpDABInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpDABInfoAttribute(true);
         valueChanged = (avTpDABInfoAttributeValue_ != _value);
         avTpDABInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAvTpDABInfoAttribute(false);
     } else {
         valueChanged = (avTpDABInfoAttributeValue_ != _value);
         avTpDABInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAvTpDABInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAvTpDABInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setAvTpDABInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAvTpDABInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAvTpDABInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAvTpDABInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpDABInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAvTpDABInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpDABInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetAvTpDABInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpDMBInfoAttribute() {
     return avTpDMBInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpDMBInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAvTpDMBInfoAttribute();
 }

 void McuManagerStubDefault::setAvTpDMBInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpDMBInfoAttribute(true);
         const bool valueChanged = (avTpDMBInfoAttributeValue_ != _value);
         if (valueChanged) {
             avTpDMBInfoAttributeValue_ = std::move(_value);
             fireAvTpDMBInfoAttributeChanged(avTpDMBInfoAttributeValue_);
         }
         stubAdapter->lockAvTpDMBInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAvTpDMBInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAvTpDMBInfoAttributeChanged(avTpDMBInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAvTpDMBInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateAvTpDMBInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpDMBInfoAttribute(true);
         valueChanged = (avTpDMBInfoAttributeValue_ != _value);
         avTpDMBInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAvTpDMBInfoAttribute(false);
     } else {
         valueChanged = (avTpDMBInfoAttributeValue_ != _value);
         avTpDMBInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAvTpDMBInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAvTpDMBInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setAvTpDMBInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAvTpDMBInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAvTpDMBInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAvTpDMBInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpDMBInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAvTpDMBInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpDMBInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetAvTpDMBInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpJukeBoxInfoAttribute() {
     return avTpJukeBoxInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpJukeBoxInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAvTpJukeBoxInfoAttribute();
 }

 void McuManagerStubDefault::setAvTpJukeBoxInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpJukeBoxInfoAttribute(true);
         const bool valueChanged = (avTpJukeBoxInfoAttributeValue_ != _value);
         if (valueChanged) {
             avTpJukeBoxInfoAttributeValue_ = std::move(_value);
             fireAvTpJukeBoxInfoAttributeChanged(avTpJukeBoxInfoAttributeValue_);
         }
         stubAdapter->lockAvTpJukeBoxInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAvTpJukeBoxInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAvTpJukeBoxInfoAttributeChanged(avTpJukeBoxInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAvTpJukeBoxInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateAvTpJukeBoxInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpJukeBoxInfoAttribute(true);
         valueChanged = (avTpJukeBoxInfoAttributeValue_ != _value);
         avTpJukeBoxInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAvTpJukeBoxInfoAttribute(false);
     } else {
         valueChanged = (avTpJukeBoxInfoAttributeValue_ != _value);
         avTpJukeBoxInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAvTpJukeBoxInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAvTpJukeBoxInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setAvTpJukeBoxInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAvTpJukeBoxInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAvTpJukeBoxInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAvTpJukeBoxInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpJukeBoxInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAvTpJukeBoxInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpJukeBoxInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetAvTpJukeBoxInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpIpodInfoAttribute() {
     return avTpIpodInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpIpodInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAvTpIpodInfoAttribute();
 }

 void McuManagerStubDefault::setAvTpIpodInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpIpodInfoAttribute(true);
         const bool valueChanged = (avTpIpodInfoAttributeValue_ != _value);
         if (valueChanged) {
             avTpIpodInfoAttributeValue_ = std::move(_value);
             fireAvTpIpodInfoAttributeChanged(avTpIpodInfoAttributeValue_);
         }
         stubAdapter->lockAvTpIpodInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAvTpIpodInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAvTpIpodInfoAttributeChanged(avTpIpodInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAvTpIpodInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateAvTpIpodInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpIpodInfoAttribute(true);
         valueChanged = (avTpIpodInfoAttributeValue_ != _value);
         avTpIpodInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAvTpIpodInfoAttribute(false);
     } else {
         valueChanged = (avTpIpodInfoAttributeValue_ != _value);
         avTpIpodInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAvTpIpodInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAvTpIpodInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setAvTpIpodInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAvTpIpodInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAvTpIpodInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAvTpIpodInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpIpodInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAvTpIpodInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpIpodInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetAvTpIpodInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpUSBInfoAttribute() {
     return avTpUSBInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpUSBInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAvTpUSBInfoAttribute();
 }

 void McuManagerStubDefault::setAvTpUSBInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpUSBInfoAttribute(true);
         const bool valueChanged = (avTpUSBInfoAttributeValue_ != _value);
         if (valueChanged) {
             avTpUSBInfoAttributeValue_ = std::move(_value);
             fireAvTpUSBInfoAttributeChanged(avTpUSBInfoAttributeValue_);
         }
         stubAdapter->lockAvTpUSBInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAvTpUSBInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAvTpUSBInfoAttributeChanged(avTpUSBInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAvTpUSBInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateAvTpUSBInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpUSBInfoAttribute(true);
         valueChanged = (avTpUSBInfoAttributeValue_ != _value);
         avTpUSBInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAvTpUSBInfoAttribute(false);
     } else {
         valueChanged = (avTpUSBInfoAttributeValue_ != _value);
         avTpUSBInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAvTpUSBInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAvTpUSBInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setAvTpUSBInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAvTpUSBInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAvTpUSBInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAvTpUSBInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpUSBInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAvTpUSBInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpUSBInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetAvTpUSBInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpBlueToothInfoAttribute() {
     return avTpBlueToothInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpBlueToothInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAvTpBlueToothInfoAttribute();
 }

 void McuManagerStubDefault::setAvTpBlueToothInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpBlueToothInfoAttribute(true);
         const bool valueChanged = (avTpBlueToothInfoAttributeValue_ != _value);
         if (valueChanged) {
             avTpBlueToothInfoAttributeValue_ = std::move(_value);
             fireAvTpBlueToothInfoAttributeChanged(avTpBlueToothInfoAttributeValue_);
         }
         stubAdapter->lockAvTpBlueToothInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAvTpBlueToothInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAvTpBlueToothInfoAttributeChanged(avTpBlueToothInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAvTpBlueToothInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateAvTpBlueToothInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpBlueToothInfoAttribute(true);
         valueChanged = (avTpBlueToothInfoAttributeValue_ != _value);
         avTpBlueToothInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAvTpBlueToothInfoAttribute(false);
     } else {
         valueChanged = (avTpBlueToothInfoAttributeValue_ != _value);
         avTpBlueToothInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAvTpBlueToothInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAvTpBlueToothInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setAvTpBlueToothInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAvTpBlueToothInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAvTpBlueToothInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAvTpBlueToothInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpBlueToothInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAvTpBlueToothInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpBlueToothInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetAvTpBlueToothInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpAppleCarPlayInfoAttribute() {
     return avTpAppleCarPlayInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpAppleCarPlayInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAvTpAppleCarPlayInfoAttribute();
 }

 void McuManagerStubDefault::setAvTpAppleCarPlayInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpAppleCarPlayInfoAttribute(true);
         const bool valueChanged = (avTpAppleCarPlayInfoAttributeValue_ != _value);
         if (valueChanged) {
             avTpAppleCarPlayInfoAttributeValue_ = std::move(_value);
             fireAvTpAppleCarPlayInfoAttributeChanged(avTpAppleCarPlayInfoAttributeValue_);
         }
         stubAdapter->lockAvTpAppleCarPlayInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAvTpAppleCarPlayInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAvTpAppleCarPlayInfoAttributeChanged(avTpAppleCarPlayInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAvTpAppleCarPlayInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateAvTpAppleCarPlayInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpAppleCarPlayInfoAttribute(true);
         valueChanged = (avTpAppleCarPlayInfoAttributeValue_ != _value);
         avTpAppleCarPlayInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAvTpAppleCarPlayInfoAttribute(false);
     } else {
         valueChanged = (avTpAppleCarPlayInfoAttributeValue_ != _value);
         avTpAppleCarPlayInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAvTpAppleCarPlayInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAvTpAppleCarPlayInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setAvTpAppleCarPlayInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAvTpAppleCarPlayInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAvTpAppleCarPlayInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAvTpAppleCarPlayInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpAppleCarPlayInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAvTpAppleCarPlayInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpAppleCarPlayInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetAvTpAppleCarPlayInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpAndroidAutoInfoAttribute() {
     return avTpAndroidAutoInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpAndroidAutoInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAvTpAndroidAutoInfoAttribute();
 }

 void McuManagerStubDefault::setAvTpAndroidAutoInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpAndroidAutoInfoAttribute(true);
         const bool valueChanged = (avTpAndroidAutoInfoAttributeValue_ != _value);
         if (valueChanged) {
             avTpAndroidAutoInfoAttributeValue_ = std::move(_value);
             fireAvTpAndroidAutoInfoAttributeChanged(avTpAndroidAutoInfoAttributeValue_);
         }
         stubAdapter->lockAvTpAndroidAutoInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAvTpAndroidAutoInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAvTpAndroidAutoInfoAttributeChanged(avTpAndroidAutoInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAvTpAndroidAutoInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateAvTpAndroidAutoInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpAndroidAutoInfoAttribute(true);
         valueChanged = (avTpAndroidAutoInfoAttributeValue_ != _value);
         avTpAndroidAutoInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAvTpAndroidAutoInfoAttribute(false);
     } else {
         valueChanged = (avTpAndroidAutoInfoAttributeValue_ != _value);
         avTpAndroidAutoInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAvTpAndroidAutoInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAvTpAndroidAutoInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setAvTpAndroidAutoInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAvTpAndroidAutoInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAvTpAndroidAutoInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAvTpAndroidAutoInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpAndroidAutoInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAvTpAndroidAutoInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpAndroidAutoInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetAvTpAndroidAutoInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpIboxInfoAttribute() {
     return avTpIboxInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpIboxInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAvTpIboxInfoAttribute();
 }

 void McuManagerStubDefault::setAvTpIboxInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpIboxInfoAttribute(true);
         const bool valueChanged = (avTpIboxInfoAttributeValue_ != _value);
         if (valueChanged) {
             avTpIboxInfoAttributeValue_ = std::move(_value);
             fireAvTpIboxInfoAttributeChanged(avTpIboxInfoAttributeValue_);
         }
         stubAdapter->lockAvTpIboxInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAvTpIboxInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAvTpIboxInfoAttributeChanged(avTpIboxInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAvTpIboxInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateAvTpIboxInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpIboxInfoAttribute(true);
         valueChanged = (avTpIboxInfoAttributeValue_ != _value);
         avTpIboxInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAvTpIboxInfoAttribute(false);
     } else {
         valueChanged = (avTpIboxInfoAttributeValue_ != _value);
         avTpIboxInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAvTpIboxInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAvTpIboxInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setAvTpIboxInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAvTpIboxInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAvTpIboxInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAvTpIboxInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpIboxInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAvTpIboxInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpIboxInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetAvTpIboxInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpCDInfoAttribute() {
     return avTpCDInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpCDInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAvTpCDInfoAttribute();
 }

 void McuManagerStubDefault::setAvTpCDInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpCDInfoAttribute(true);
         const bool valueChanged = (avTpCDInfoAttributeValue_ != _value);
         if (valueChanged) {
             avTpCDInfoAttributeValue_ = std::move(_value);
             fireAvTpCDInfoAttributeChanged(avTpCDInfoAttributeValue_);
         }
         stubAdapter->lockAvTpCDInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAvTpCDInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAvTpCDInfoAttributeChanged(avTpCDInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAvTpCDInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateAvTpCDInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpCDInfoAttribute(true);
         valueChanged = (avTpCDInfoAttributeValue_ != _value);
         avTpCDInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAvTpCDInfoAttribute(false);
     } else {
         valueChanged = (avTpCDInfoAttributeValue_ != _value);
         avTpCDInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAvTpCDInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAvTpCDInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setAvTpCDInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAvTpCDInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAvTpCDInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAvTpCDInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpCDInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAvTpCDInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpCDInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetAvTpCDInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpBaiduMInfoAttribute() {
     return avTpBaiduMInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData& McuManagerStubDefault::getAvTpBaiduMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAvTpBaiduMInfoAttribute();
 }

 void McuManagerStubDefault::setAvTpBaiduMInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpBaiduMInfoAttribute(true);
         const bool valueChanged = (avTpBaiduMInfoAttributeValue_ != _value);
         if (valueChanged) {
             avTpBaiduMInfoAttributeValue_ = std::move(_value);
             fireAvTpBaiduMInfoAttributeChanged(avTpBaiduMInfoAttributeValue_);
         }
         stubAdapter->lockAvTpBaiduMInfoAttribute(false);
     } else {
         const bool valueChanged = trySetAvTpBaiduMInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireAvTpBaiduMInfoAttributeChanged(avTpBaiduMInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetAvTpBaiduMInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     if (!validateAvTpBaiduMInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAvTpBaiduMInfoAttribute(true);
         valueChanged = (avTpBaiduMInfoAttributeValue_ != _value);
         avTpBaiduMInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockAvTpBaiduMInfoAttribute(false);
     } else {
         valueChanged = (avTpBaiduMInfoAttributeValue_ != _value);
         avTpBaiduMInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateAvTpBaiduMInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setAvTpBaiduMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     setAvTpBaiduMInfoAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteAvTpBaiduMInfoAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteAvTpBaiduMInfoAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAvTpBaiduMInfoAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpBaiduMInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAvTpBaiduMInfoAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetAvTpBaiduMInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::TPData _value) {
     (void)_client;
     return onRemoteSetAvTpBaiduMInfoAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo& McuManagerStubDefault::getEventContentsFullAttribute() {
     return eventContentsFullAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo& McuManagerStubDefault::getEventContentsFullAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getEventContentsFullAttribute();
 }

 void McuManagerStubDefault::setEventContentsFullAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockEventContentsFullAttribute(true);
         const bool valueChanged = (eventContentsFullAttributeValue_ != _value);
         if (valueChanged) {
             eventContentsFullAttributeValue_ = std::move(_value);
             fireEventContentsFullAttributeChanged(eventContentsFullAttributeValue_);
         }
         stubAdapter->lockEventContentsFullAttribute(false);
     } else {
         const bool valueChanged = trySetEventContentsFullAttribute(std::move(_value));
         if (valueChanged) {
             fireEventContentsFullAttributeChanged(eventContentsFullAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetEventContentsFullAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) {
     if (!validateEventContentsFullAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockEventContentsFullAttribute(true);
         valueChanged = (eventContentsFullAttributeValue_ != _value);
         eventContentsFullAttributeValue_ = std::move(_value);
         stubAdapter->lockEventContentsFullAttribute(false);
     } else {
         valueChanged = (eventContentsFullAttributeValue_ != _value);
         eventContentsFullAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateEventContentsFullAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setEventContentsFullAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) {
     (void)_client;
     setEventContentsFullAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteEventContentsFullAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteEventContentsFullAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteEventContentsFullAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetEventContentsFullAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetEventContentsFullAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetEventContentsFullAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) {
     (void)_client;
     return onRemoteSetEventContentsFullAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo& McuManagerStubDefault::getEventContentsMiniAttribute() {
     return eventContentsMiniAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo& McuManagerStubDefault::getEventContentsMiniAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getEventContentsMiniAttribute();
 }

 void McuManagerStubDefault::setEventContentsMiniAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockEventContentsMiniAttribute(true);
         const bool valueChanged = (eventContentsMiniAttributeValue_ != _value);
         if (valueChanged) {
             eventContentsMiniAttributeValue_ = std::move(_value);
             fireEventContentsMiniAttributeChanged(eventContentsMiniAttributeValue_);
         }
         stubAdapter->lockEventContentsMiniAttribute(false);
     } else {
         const bool valueChanged = trySetEventContentsMiniAttribute(std::move(_value));
         if (valueChanged) {
             fireEventContentsMiniAttributeChanged(eventContentsMiniAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetEventContentsMiniAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) {
     if (!validateEventContentsMiniAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockEventContentsMiniAttribute(true);
         valueChanged = (eventContentsMiniAttributeValue_ != _value);
         eventContentsMiniAttributeValue_ = std::move(_value);
         stubAdapter->lockEventContentsMiniAttribute(false);
     } else {
         valueChanged = (eventContentsMiniAttributeValue_ != _value);
         eventContentsMiniAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateEventContentsMiniAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setEventContentsMiniAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) {
     (void)_client;
     setEventContentsMiniAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteEventContentsMiniAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteEventContentsMiniAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteEventContentsMiniAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetEventContentsMiniAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetEventContentsMiniAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetEventContentsMiniAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo _value) {
     (void)_client;
     return onRemoteSetEventContentsMiniAttribute(_value);
 }

 const bool& McuManagerStubDefault::getEventAccessoryAttribute() {
     return eventAccessoryAttributeValue_;
 }

 const bool& McuManagerStubDefault::getEventAccessoryAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getEventAccessoryAttribute();
 }

 void McuManagerStubDefault::setEventAccessoryAttribute(bool _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockEventAccessoryAttribute(true);
         const bool valueChanged = (eventAccessoryAttributeValue_ != _value);
         if (valueChanged) {
             eventAccessoryAttributeValue_ = std::move(_value);
             fireEventAccessoryAttributeChanged(eventAccessoryAttributeValue_);
         }
         stubAdapter->lockEventAccessoryAttribute(false);
     } else {
         const bool valueChanged = trySetEventAccessoryAttribute(std::move(_value));
         if (valueChanged) {
             fireEventAccessoryAttributeChanged(eventAccessoryAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetEventAccessoryAttribute(bool _value) {
     if (!validateEventAccessoryAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockEventAccessoryAttribute(true);
         valueChanged = (eventAccessoryAttributeValue_ != _value);
         eventAccessoryAttributeValue_ = std::move(_value);
         stubAdapter->lockEventAccessoryAttribute(false);
     } else {
         valueChanged = (eventAccessoryAttributeValue_ != _value);
         eventAccessoryAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateEventAccessoryAttributeRequestedValue(const bool &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setEventAccessoryAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
     (void)_client;
     setEventAccessoryAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteEventAccessoryAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteEventAccessoryAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteEventAccessoryAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetEventAccessoryAttribute(bool _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetEventAccessoryAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetEventAccessoryAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
     (void)_client;
     return onRemoteSetEventAccessoryAttribute(_value);
 }

 const bool& McuManagerStubDefault::getPowerTailGateWarnStateAttribute() {
     return powerTailGateWarnStateAttributeValue_;
 }

 const bool& McuManagerStubDefault::getPowerTailGateWarnStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getPowerTailGateWarnStateAttribute();
 }

 void McuManagerStubDefault::setPowerTailGateWarnStateAttribute(bool _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockPowerTailGateWarnStateAttribute(true);
         const bool valueChanged = (powerTailGateWarnStateAttributeValue_ != _value);
         if (valueChanged) {
             powerTailGateWarnStateAttributeValue_ = std::move(_value);
             firePowerTailGateWarnStateAttributeChanged(powerTailGateWarnStateAttributeValue_);
         }
         stubAdapter->lockPowerTailGateWarnStateAttribute(false);
     } else {
         const bool valueChanged = trySetPowerTailGateWarnStateAttribute(std::move(_value));
         if (valueChanged) {
             firePowerTailGateWarnStateAttributeChanged(powerTailGateWarnStateAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetPowerTailGateWarnStateAttribute(bool _value) {
     if (!validatePowerTailGateWarnStateAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockPowerTailGateWarnStateAttribute(true);
         valueChanged = (powerTailGateWarnStateAttributeValue_ != _value);
         powerTailGateWarnStateAttributeValue_ = std::move(_value);
         stubAdapter->lockPowerTailGateWarnStateAttribute(false);
     } else {
         valueChanged = (powerTailGateWarnStateAttributeValue_ != _value);
         powerTailGateWarnStateAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validatePowerTailGateWarnStateAttributeRequestedValue(const bool &_value) {
     (void)_value;
     return true;
 }

 void McuManagerStubDefault::setPowerTailGateWarnStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
     (void)_client;
     setPowerTailGateWarnStateAttribute(_value);
 }

 void McuManagerStubDefault::onRemotePowerTailGateWarnStateAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemotePowerTailGateWarnStateAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemotePowerTailGateWarnStateAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetPowerTailGateWarnStateAttribute(bool _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetPowerTailGateWarnStateAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetPowerTailGateWarnStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
     (void)_client;
     return onRemoteSetPowerTailGateWarnStateAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE& McuManagerStubDefault::getDisplayLanguageAttribute() {
     return displayLanguageAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE& McuManagerStubDefault::getDisplayLanguageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getDisplayLanguageAttribute();
 }

 void McuManagerStubDefault::setDisplayLanguageAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDisplayLanguageAttribute(true);
         const bool valueChanged = (displayLanguageAttributeValue_ != _value);
         if (valueChanged) {
             displayLanguageAttributeValue_ = std::move(_value);
             fireDisplayLanguageAttributeChanged(displayLanguageAttributeValue_);
         }
         stubAdapter->lockDisplayLanguageAttribute(false);
     } else {
         const bool valueChanged = trySetDisplayLanguageAttribute(std::move(_value));
         if (valueChanged) {
             fireDisplayLanguageAttributeChanged(displayLanguageAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetDisplayLanguageAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE _value) {
     if (!validateDisplayLanguageAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDisplayLanguageAttribute(true);
         valueChanged = (displayLanguageAttributeValue_ != _value);
         displayLanguageAttributeValue_ = std::move(_value);
         stubAdapter->lockDisplayLanguageAttribute(false);
     } else {
         valueChanged = (displayLanguageAttributeValue_ != _value);
         displayLanguageAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateDisplayLanguageAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE &_value) {
     (void)_value;
     return _value.validate();
 }

 void McuManagerStubDefault::setDisplayLanguageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE _value) {
     (void)_client;
     setDisplayLanguageAttribute(_value);
 }

 void McuManagerStubDefault::onRemoteDisplayLanguageAttributeChanged() {
     // No operation in default
 }

 void McuManagerStubDefault::RemoteEventHandler::onRemoteDisplayLanguageAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteDisplayLanguageAttributeChanged();
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDisplayLanguageAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetDisplayLanguageAttribute(std::move(_value));
 }

 bool McuManagerStubDefault::RemoteEventHandler::onRemoteSetDisplayLanguageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::dcluster::McuManager::McuManagerTypes::USM_LANGUAGE_VALUE _value) {
     (void)_client;
     return onRemoteSetDisplayLanguageAttribute(_value);
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_SccReactionAttribute() {
     return usmDriverAssist_SccReactionAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_SccReactionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_SccReactionAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_SccReactionAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_SccReactionAttribute(true);
         const bool valueChanged = (usmDriverAssist_SccReactionAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_SccReactionAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_SccReactionAttributeChanged(usmDriverAssist_SccReactionAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_SccReactionAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_SccReactionAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_SccReactionAttributeChanged(usmDriverAssist_SccReactionAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_SccReactionAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_SccReactionAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_SccReactionAttribute(true);
         valueChanged = (usmDriverAssist_SccReactionAttributeValue_ != _value);
         usmDriverAssist_SccReactionAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_SccReactionAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_SccReactionAttributeValue_ != _value);
         usmDriverAssist_SccReactionAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_SccReactionAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute() {
     return usmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute(true);
         const bool valueChanged = (usmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeChanged(usmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeChanged(usmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute(true);
         valueChanged = (usmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeValue_ != _value);
         usmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeValue_ != _value);
         usmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_DrivingAssist_LeadingVehicleDepartureAlertAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute() {
     return usmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute(true);
         const bool valueChanged = (usmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeChanged(usmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeChanged(usmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute(true);
         valueChanged = (usmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeValue_ != _value);
         usmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeValue_ != _value);
         usmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_DrivingAssist_LaneFollowingAssistAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute() {
     return usmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute(true);
         const bool valueChanged = (usmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeChanged(usmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeChanged(usmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute(true);
         valueChanged = (usmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeValue_ != _value);
         usmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeValue_ != _value);
         usmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_DrivingAssist_HighwayDrivingAssistAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute() {
     return usmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute(true);
         const bool valueChanged = (usmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeChanged(usmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeChanged(usmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute(true);
         valueChanged = (usmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeValue_ != _value);
         usmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeValue_ != _value);
         usmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_DrivingAssist_HighwayAutoSpeedZoneSlowDownAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute() {
     return usmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute(true);
         const bool valueChanged = (usmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeChanged(usmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeChanged(usmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute(true);
         valueChanged = (usmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeValue_ != _value);
         usmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeValue_ != _value);
         usmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_DrivingAssist_HighwayAutoCurveSlowDownAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute() {
     return usmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute(true);
         const bool valueChanged = (usmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeChanged(usmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeChanged(usmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute(true);
         valueChanged = (usmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeValue_ != _value);
         usmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeValue_ != _value);
         usmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_DrivingAssist_SpeedLimitWarningAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DriverAttentionWarningAttribute() {
     return usmDriverAssist_DriverAttentionWarningAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_DriverAttentionWarningAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_DriverAttentionWarningAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_DriverAttentionWarningAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DriverAttentionWarningAttribute(true);
         const bool valueChanged = (usmDriverAssist_DriverAttentionWarningAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_DriverAttentionWarningAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_DriverAttentionWarningAttributeChanged(usmDriverAssist_DriverAttentionWarningAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_DriverAttentionWarningAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_DriverAttentionWarningAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_DriverAttentionWarningAttributeChanged(usmDriverAssist_DriverAttentionWarningAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_DriverAttentionWarningAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_DriverAttentionWarningAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_DriverAttentionWarningAttribute(true);
         valueChanged = (usmDriverAssist_DriverAttentionWarningAttributeValue_ != _value);
         usmDriverAssist_DriverAttentionWarningAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_DriverAttentionWarningAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_DriverAttentionWarningAttributeValue_ != _value);
         usmDriverAssist_DriverAttentionWarningAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_DriverAttentionWarningAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_WarningTimingAttribute() {
     return usmDriverAssist_WarningTimingAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_WarningTimingAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_WarningTimingAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_WarningTimingAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_WarningTimingAttribute(true);
         const bool valueChanged = (usmDriverAssist_WarningTimingAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_WarningTimingAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_WarningTimingAttributeChanged(usmDriverAssist_WarningTimingAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_WarningTimingAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_WarningTimingAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_WarningTimingAttributeChanged(usmDriverAssist_WarningTimingAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_WarningTimingAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_WarningTimingAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_WarningTimingAttribute(true);
         valueChanged = (usmDriverAssist_WarningTimingAttributeValue_ != _value);
         usmDriverAssist_WarningTimingAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_WarningTimingAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_WarningTimingAttributeValue_ != _value);
         usmDriverAssist_WarningTimingAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_WarningTimingAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_WarningVolumeAttribute() {
     return usmDriverAssist_WarningVolumeAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_WarningVolumeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_WarningVolumeAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_WarningVolumeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_WarningVolumeAttribute(true);
         const bool valueChanged = (usmDriverAssist_WarningVolumeAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_WarningVolumeAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_WarningVolumeAttributeChanged(usmDriverAssist_WarningVolumeAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_WarningVolumeAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_WarningVolumeAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_WarningVolumeAttributeChanged(usmDriverAssist_WarningVolumeAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_WarningVolumeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_WarningVolumeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_WarningVolumeAttribute(true);
         valueChanged = (usmDriverAssist_WarningVolumeAttributeValue_ != _value);
         usmDriverAssist_WarningVolumeAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_WarningVolumeAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_WarningVolumeAttributeValue_ != _value);
         usmDriverAssist_WarningVolumeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_WarningVolumeAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_LaneSafetyAttribute() {
     return usmDriverAssist_LaneSafetyAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_LaneSafetyAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_LaneSafetyAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_LaneSafetyAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_LaneSafetyAttribute(true);
         const bool valueChanged = (usmDriverAssist_LaneSafetyAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_LaneSafetyAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_LaneSafetyAttributeChanged(usmDriverAssist_LaneSafetyAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_LaneSafetyAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_LaneSafetyAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_LaneSafetyAttributeChanged(usmDriverAssist_LaneSafetyAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_LaneSafetyAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_LaneSafetyAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_LaneSafetyAttribute(true);
         valueChanged = (usmDriverAssist_LaneSafetyAttributeValue_ != _value);
         usmDriverAssist_LaneSafetyAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_LaneSafetyAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_LaneSafetyAttributeValue_ != _value);
         usmDriverAssist_LaneSafetyAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_LaneSafetyAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_LaneSafety_ModeAttribute() {
     return usmDriverAssist_LaneSafety_ModeAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_LaneSafety_ModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_LaneSafety_ModeAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_LaneSafety_ModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_LaneSafety_ModeAttribute(true);
         const bool valueChanged = (usmDriverAssist_LaneSafety_ModeAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_LaneSafety_ModeAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_LaneSafety_ModeAttributeChanged(usmDriverAssist_LaneSafety_ModeAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_LaneSafety_ModeAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_LaneSafety_ModeAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_LaneSafety_ModeAttributeChanged(usmDriverAssist_LaneSafety_ModeAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_LaneSafety_ModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_LaneSafety_ModeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_LaneSafety_ModeAttribute(true);
         valueChanged = (usmDriverAssist_LaneSafety_ModeAttributeValue_ != _value);
         usmDriverAssist_LaneSafety_ModeAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_LaneSafety_ModeAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_LaneSafety_ModeAttributeValue_ != _value);
         usmDriverAssist_LaneSafety_ModeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_LaneSafety_ModeAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_ForwardSafetyAttribute() {
     return usmDriverAssist_ForwardSafetyAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_ForwardSafetyAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_ForwardSafetyAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_ForwardSafetyAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_ForwardSafetyAttribute(true);
         const bool valueChanged = (usmDriverAssist_ForwardSafetyAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_ForwardSafetyAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_ForwardSafetyAttributeChanged(usmDriverAssist_ForwardSafetyAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_ForwardSafetyAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_ForwardSafetyAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_ForwardSafetyAttributeChanged(usmDriverAssist_ForwardSafetyAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_ForwardSafetyAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_ForwardSafetyAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_ForwardSafetyAttribute(true);
         valueChanged = (usmDriverAssist_ForwardSafetyAttributeValue_ != _value);
         usmDriverAssist_ForwardSafetyAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_ForwardSafetyAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_ForwardSafetyAttributeValue_ != _value);
         usmDriverAssist_ForwardSafetyAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_ForwardSafetyAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_BlindSpotSafety_SpotViewAttribute() {
     return usmDriverAssist_BlindSpotSafety_SpotViewAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_BlindSpotSafety_SpotViewAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_BlindSpotSafety_SpotViewAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_BlindSpotSafety_SpotViewAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_SpotViewAttribute(true);
         const bool valueChanged = (usmDriverAssist_BlindSpotSafety_SpotViewAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_BlindSpotSafety_SpotViewAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_BlindSpotSafety_SpotViewAttributeChanged(usmDriverAssist_BlindSpotSafety_SpotViewAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_SpotViewAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_BlindSpotSafety_SpotViewAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_BlindSpotSafety_SpotViewAttributeChanged(usmDriverAssist_BlindSpotSafety_SpotViewAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_BlindSpotSafety_SpotViewAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_BlindSpotSafety_SpotViewAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_SpotViewAttribute(true);
         valueChanged = (usmDriverAssist_BlindSpotSafety_SpotViewAttributeValue_ != _value);
         usmDriverAssist_BlindSpotSafety_SpotViewAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_SpotViewAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_BlindSpotSafety_SpotViewAttributeValue_ != _value);
         usmDriverAssist_BlindSpotSafety_SpotViewAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_BlindSpotSafety_SpotViewAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute() {
     return usmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute(true);
         const bool valueChanged = (usmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeChanged(usmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeChanged(usmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute(true);
         valueChanged = (usmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeValue_ != _value);
         usmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeValue_ != _value);
         usmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_BlindSpotSafety_SafetyExitAssistAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute() {
     return usmDriverAssist_BlindSpotSafety_WarningOnlyAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute(true);
         const bool valueChanged = (usmDriverAssist_BlindSpotSafety_WarningOnlyAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_BlindSpotSafety_WarningOnlyAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_BlindSpotSafety_WarningOnlyAttributeChanged(usmDriverAssist_BlindSpotSafety_WarningOnlyAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_BlindSpotSafety_WarningOnlyAttributeChanged(usmDriverAssist_BlindSpotSafety_WarningOnlyAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_BlindSpotSafety_WarningOnlyAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute(true);
         valueChanged = (usmDriverAssist_BlindSpotSafety_WarningOnlyAttributeValue_ != _value);
         usmDriverAssist_BlindSpotSafety_WarningOnlyAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_WarningOnlyAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_BlindSpotSafety_WarningOnlyAttributeValue_ != _value);
         usmDriverAssist_BlindSpotSafety_WarningOnlyAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_BlindSpotSafety_WarningOnlyAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute() {
     return usmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute();
 }

 void McuManagerStubDefault::setUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute(true);
         const bool valueChanged = (usmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeValue_ != _value);
         if (valueChanged) {
             usmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeValue_ = std::move(_value);
             fireUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeChanged(usmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeValue_);
         }
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeChanged(usmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute(true);
         valueChanged = (usmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeValue_ != _value);
         usmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttribute(false);
     } else {
         valueChanged = (usmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeValue_ != _value);
         usmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDriverAssist_BlindSpotSafety_RearCrossTrafficSafetyAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_AutoLockAttribute() {
     return usmDoor_AutoLockAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_AutoLockAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDoor_AutoLockAttribute();
 }

 void McuManagerStubDefault::setUsmDoor_AutoLockAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_AutoLockAttribute(true);
         const bool valueChanged = (usmDoor_AutoLockAttributeValue_ != _value);
         if (valueChanged) {
             usmDoor_AutoLockAttributeValue_ = std::move(_value);
             fireUsmDoor_AutoLockAttributeChanged(usmDoor_AutoLockAttributeValue_);
         }
         stubAdapter->lockUsmDoor_AutoLockAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDoor_AutoLockAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDoor_AutoLockAttributeChanged(usmDoor_AutoLockAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDoor_AutoLockAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDoor_AutoLockAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_AutoLockAttribute(true);
         valueChanged = (usmDoor_AutoLockAttributeValue_ != _value);
         usmDoor_AutoLockAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDoor_AutoLockAttribute(false);
     } else {
         valueChanged = (usmDoor_AutoLockAttributeValue_ != _value);
         usmDoor_AutoLockAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDoor_AutoLockAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_AutoUnlock_KeyOrPowerAttribute() {
     return usmDoor_AutoUnlock_KeyOrPowerAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_AutoUnlock_KeyOrPowerAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDoor_AutoUnlock_KeyOrPowerAttribute();
 }

 void McuManagerStubDefault::setUsmDoor_AutoUnlock_KeyOrPowerAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_AutoUnlock_KeyOrPowerAttribute(true);
         const bool valueChanged = (usmDoor_AutoUnlock_KeyOrPowerAttributeValue_ != _value);
         if (valueChanged) {
             usmDoor_AutoUnlock_KeyOrPowerAttributeValue_ = std::move(_value);
             fireUsmDoor_AutoUnlock_KeyOrPowerAttributeChanged(usmDoor_AutoUnlock_KeyOrPowerAttributeValue_);
         }
         stubAdapter->lockUsmDoor_AutoUnlock_KeyOrPowerAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDoor_AutoUnlock_KeyOrPowerAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDoor_AutoUnlock_KeyOrPowerAttributeChanged(usmDoor_AutoUnlock_KeyOrPowerAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDoor_AutoUnlock_KeyOrPowerAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDoor_AutoUnlock_KeyOrPowerAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_AutoUnlock_KeyOrPowerAttribute(true);
         valueChanged = (usmDoor_AutoUnlock_KeyOrPowerAttributeValue_ != _value);
         usmDoor_AutoUnlock_KeyOrPowerAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDoor_AutoUnlock_KeyOrPowerAttribute(false);
     } else {
         valueChanged = (usmDoor_AutoUnlock_KeyOrPowerAttributeValue_ != _value);
         usmDoor_AutoUnlock_KeyOrPowerAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDoor_AutoUnlock_KeyOrPowerAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_AutoUnlockAttribute() {
     return usmDoor_AutoUnlockAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_AutoUnlockAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDoor_AutoUnlockAttribute();
 }

 void McuManagerStubDefault::setUsmDoor_AutoUnlockAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_AutoUnlockAttribute(true);
         const bool valueChanged = (usmDoor_AutoUnlockAttributeValue_ != _value);
         if (valueChanged) {
             usmDoor_AutoUnlockAttributeValue_ = std::move(_value);
             fireUsmDoor_AutoUnlockAttributeChanged(usmDoor_AutoUnlockAttributeValue_);
         }
         stubAdapter->lockUsmDoor_AutoUnlockAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDoor_AutoUnlockAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDoor_AutoUnlockAttributeChanged(usmDoor_AutoUnlockAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDoor_AutoUnlockAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDoor_AutoUnlockAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_AutoUnlockAttribute(true);
         valueChanged = (usmDoor_AutoUnlockAttributeValue_ != _value);
         usmDoor_AutoUnlockAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDoor_AutoUnlockAttribute(false);
     } else {
         valueChanged = (usmDoor_AutoUnlockAttributeValue_ != _value);
         usmDoor_AutoUnlockAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDoor_AutoUnlockAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_HornFeedbackAttribute() {
     return usmDoor_HornFeedbackAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_HornFeedbackAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDoor_HornFeedbackAttribute();
 }

 void McuManagerStubDefault::setUsmDoor_HornFeedbackAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_HornFeedbackAttribute(true);
         const bool valueChanged = (usmDoor_HornFeedbackAttributeValue_ != _value);
         if (valueChanged) {
             usmDoor_HornFeedbackAttributeValue_ = std::move(_value);
             fireUsmDoor_HornFeedbackAttributeChanged(usmDoor_HornFeedbackAttributeValue_);
         }
         stubAdapter->lockUsmDoor_HornFeedbackAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDoor_HornFeedbackAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDoor_HornFeedbackAttributeChanged(usmDoor_HornFeedbackAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDoor_HornFeedbackAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDoor_HornFeedbackAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_HornFeedbackAttribute(true);
         valueChanged = (usmDoor_HornFeedbackAttributeValue_ != _value);
         usmDoor_HornFeedbackAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDoor_HornFeedbackAttribute(false);
     } else {
         valueChanged = (usmDoor_HornFeedbackAttributeValue_ != _value);
         usmDoor_HornFeedbackAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDoor_HornFeedbackAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_PowerTailgateAttribute() {
     return usmDoor_PowerTailgateAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_PowerTailgateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDoor_PowerTailgateAttribute();
 }

 void McuManagerStubDefault::setUsmDoor_PowerTailgateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_PowerTailgateAttribute(true);
         const bool valueChanged = (usmDoor_PowerTailgateAttributeValue_ != _value);
         if (valueChanged) {
             usmDoor_PowerTailgateAttributeValue_ = std::move(_value);
             fireUsmDoor_PowerTailgateAttributeChanged(usmDoor_PowerTailgateAttributeValue_);
         }
         stubAdapter->lockUsmDoor_PowerTailgateAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDoor_PowerTailgateAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDoor_PowerTailgateAttributeChanged(usmDoor_PowerTailgateAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDoor_PowerTailgateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDoor_PowerTailgateAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_PowerTailgateAttribute(true);
         valueChanged = (usmDoor_PowerTailgateAttributeValue_ != _value);
         usmDoor_PowerTailgateAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDoor_PowerTailgateAttribute(false);
     } else {
         valueChanged = (usmDoor_PowerTailgateAttributeValue_ != _value);
         usmDoor_PowerTailgateAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDoor_PowerTailgateAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_PowerTailgateSpeedAttribute() {
     return usmDoor_PowerTailgateSpeedAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_PowerTailgateSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDoor_PowerTailgateSpeedAttribute();
 }

 void McuManagerStubDefault::setUsmDoor_PowerTailgateSpeedAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_PowerTailgateSpeedAttribute(true);
         const bool valueChanged = (usmDoor_PowerTailgateSpeedAttributeValue_ != _value);
         if (valueChanged) {
             usmDoor_PowerTailgateSpeedAttributeValue_ = std::move(_value);
             fireUsmDoor_PowerTailgateSpeedAttributeChanged(usmDoor_PowerTailgateSpeedAttributeValue_);
         }
         stubAdapter->lockUsmDoor_PowerTailgateSpeedAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDoor_PowerTailgateSpeedAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDoor_PowerTailgateSpeedAttributeChanged(usmDoor_PowerTailgateSpeedAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDoor_PowerTailgateSpeedAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDoor_PowerTailgateSpeedAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_PowerTailgateSpeedAttribute(true);
         valueChanged = (usmDoor_PowerTailgateSpeedAttributeValue_ != _value);
         usmDoor_PowerTailgateSpeedAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDoor_PowerTailgateSpeedAttribute(false);
     } else {
         valueChanged = (usmDoor_PowerTailgateSpeedAttributeValue_ != _value);
         usmDoor_PowerTailgateSpeedAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDoor_PowerTailgateSpeedAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_SmartTailgateAttribute() {
     return usmDoor_SmartTailgateAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmDoor_SmartTailgateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmDoor_SmartTailgateAttribute();
 }

 void McuManagerStubDefault::setUsmDoor_SmartTailgateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_SmartTailgateAttribute(true);
         const bool valueChanged = (usmDoor_SmartTailgateAttributeValue_ != _value);
         if (valueChanged) {
             usmDoor_SmartTailgateAttributeValue_ = std::move(_value);
             fireUsmDoor_SmartTailgateAttributeChanged(usmDoor_SmartTailgateAttributeValue_);
         }
         stubAdapter->lockUsmDoor_SmartTailgateAttribute(false);
     } else {
         const bool valueChanged = trySetUsmDoor_SmartTailgateAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmDoor_SmartTailgateAttributeChanged(usmDoor_SmartTailgateAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmDoor_SmartTailgateAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmDoor_SmartTailgateAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmDoor_SmartTailgateAttribute(true);
         valueChanged = (usmDoor_SmartTailgateAttributeValue_ != _value);
         usmDoor_SmartTailgateAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmDoor_SmartTailgateAttribute(false);
     } else {
         valueChanged = (usmDoor_SmartTailgateAttributeValue_ != _value);
         usmDoor_SmartTailgateAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmDoor_SmartTailgateAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmLights_OneTouchTurnSignalAttribute() {
     return usmLights_OneTouchTurnSignalAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmLights_OneTouchTurnSignalAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmLights_OneTouchTurnSignalAttribute();
 }

 void McuManagerStubDefault::setUsmLights_OneTouchTurnSignalAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmLights_OneTouchTurnSignalAttribute(true);
         const bool valueChanged = (usmLights_OneTouchTurnSignalAttributeValue_ != _value);
         if (valueChanged) {
             usmLights_OneTouchTurnSignalAttributeValue_ = std::move(_value);
             fireUsmLights_OneTouchTurnSignalAttributeChanged(usmLights_OneTouchTurnSignalAttributeValue_);
         }
         stubAdapter->lockUsmLights_OneTouchTurnSignalAttribute(false);
     } else {
         const bool valueChanged = trySetUsmLights_OneTouchTurnSignalAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmLights_OneTouchTurnSignalAttributeChanged(usmLights_OneTouchTurnSignalAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmLights_OneTouchTurnSignalAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmLights_OneTouchTurnSignalAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmLights_OneTouchTurnSignalAttribute(true);
         valueChanged = (usmLights_OneTouchTurnSignalAttributeValue_ != _value);
         usmLights_OneTouchTurnSignalAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmLights_OneTouchTurnSignalAttribute(false);
     } else {
         valueChanged = (usmLights_OneTouchTurnSignalAttributeValue_ != _value);
         usmLights_OneTouchTurnSignalAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmLights_OneTouchTurnSignalAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmLights_AmbientLightAttribute() {
     return usmLights_AmbientLightAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmLights_AmbientLightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmLights_AmbientLightAttribute();
 }

 void McuManagerStubDefault::setUsmLights_AmbientLightAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmLights_AmbientLightAttribute(true);
         const bool valueChanged = (usmLights_AmbientLightAttributeValue_ != _value);
         if (valueChanged) {
             usmLights_AmbientLightAttributeValue_ = std::move(_value);
             fireUsmLights_AmbientLightAttributeChanged(usmLights_AmbientLightAttributeValue_);
         }
         stubAdapter->lockUsmLights_AmbientLightAttribute(false);
     } else {
         const bool valueChanged = trySetUsmLights_AmbientLightAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmLights_AmbientLightAttributeChanged(usmLights_AmbientLightAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmLights_AmbientLightAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmLights_AmbientLightAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmLights_AmbientLightAttribute(true);
         valueChanged = (usmLights_AmbientLightAttributeValue_ != _value);
         usmLights_AmbientLightAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmLights_AmbientLightAttribute(false);
     } else {
         valueChanged = (usmLights_AmbientLightAttributeValue_ != _value);
         usmLights_AmbientLightAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmLights_AmbientLightAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmLights_HeadlightDelayAttribute() {
     return usmLights_HeadlightDelayAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmLights_HeadlightDelayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmLights_HeadlightDelayAttribute();
 }

 void McuManagerStubDefault::setUsmLights_HeadlightDelayAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmLights_HeadlightDelayAttribute(true);
         const bool valueChanged = (usmLights_HeadlightDelayAttributeValue_ != _value);
         if (valueChanged) {
             usmLights_HeadlightDelayAttributeValue_ = std::move(_value);
             fireUsmLights_HeadlightDelayAttributeChanged(usmLights_HeadlightDelayAttributeValue_);
         }
         stubAdapter->lockUsmLights_HeadlightDelayAttribute(false);
     } else {
         const bool valueChanged = trySetUsmLights_HeadlightDelayAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmLights_HeadlightDelayAttributeChanged(usmLights_HeadlightDelayAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmLights_HeadlightDelayAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmLights_HeadlightDelayAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmLights_HeadlightDelayAttribute(true);
         valueChanged = (usmLights_HeadlightDelayAttributeValue_ != _value);
         usmLights_HeadlightDelayAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmLights_HeadlightDelayAttribute(false);
     } else {
         valueChanged = (usmLights_HeadlightDelayAttributeValue_ != _value);
         usmLights_HeadlightDelayAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmLights_HeadlightDelayAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmLights_HighBeamAssistAttribute() {
     return usmLights_HighBeamAssistAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmLights_HighBeamAssistAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmLights_HighBeamAssistAttribute();
 }

 void McuManagerStubDefault::setUsmLights_HighBeamAssistAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmLights_HighBeamAssistAttribute(true);
         const bool valueChanged = (usmLights_HighBeamAssistAttributeValue_ != _value);
         if (valueChanged) {
             usmLights_HighBeamAssistAttributeValue_ = std::move(_value);
             fireUsmLights_HighBeamAssistAttributeChanged(usmLights_HighBeamAssistAttributeValue_);
         }
         stubAdapter->lockUsmLights_HighBeamAssistAttribute(false);
     } else {
         const bool valueChanged = trySetUsmLights_HighBeamAssistAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmLights_HighBeamAssistAttributeChanged(usmLights_HighBeamAssistAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmLights_HighBeamAssistAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmLights_HighBeamAssistAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmLights_HighBeamAssistAttribute(true);
         valueChanged = (usmLights_HighBeamAssistAttributeValue_ != _value);
         usmLights_HighBeamAssistAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmLights_HighBeamAssistAttribute(false);
     } else {
         valueChanged = (usmLights_HighBeamAssistAttributeValue_ != _value);
         usmLights_HighBeamAssistAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmLights_HighBeamAssistAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmSound_ClusterVoiceGuidanceVolumeAttribute() {
     return usmSound_ClusterVoiceGuidanceVolumeAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmSound_ClusterVoiceGuidanceVolumeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmSound_ClusterVoiceGuidanceVolumeAttribute();
 }

 void McuManagerStubDefault::setUsmSound_ClusterVoiceGuidanceVolumeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmSound_ClusterVoiceGuidanceVolumeAttribute(true);
         const bool valueChanged = (usmSound_ClusterVoiceGuidanceVolumeAttributeValue_ != _value);
         if (valueChanged) {
             usmSound_ClusterVoiceGuidanceVolumeAttributeValue_ = std::move(_value);
             fireUsmSound_ClusterVoiceGuidanceVolumeAttributeChanged(usmSound_ClusterVoiceGuidanceVolumeAttributeValue_);
         }
         stubAdapter->lockUsmSound_ClusterVoiceGuidanceVolumeAttribute(false);
     } else {
         const bool valueChanged = trySetUsmSound_ClusterVoiceGuidanceVolumeAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmSound_ClusterVoiceGuidanceVolumeAttributeChanged(usmSound_ClusterVoiceGuidanceVolumeAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmSound_ClusterVoiceGuidanceVolumeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmSound_ClusterVoiceGuidanceVolumeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmSound_ClusterVoiceGuidanceVolumeAttribute(true);
         valueChanged = (usmSound_ClusterVoiceGuidanceVolumeAttributeValue_ != _value);
         usmSound_ClusterVoiceGuidanceVolumeAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmSound_ClusterVoiceGuidanceVolumeAttribute(false);
     } else {
         valueChanged = (usmSound_ClusterVoiceGuidanceVolumeAttributeValue_ != _value);
         usmSound_ClusterVoiceGuidanceVolumeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmSound_ClusterVoiceGuidanceVolumeAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmSound_ParkAssistVolumeAttribute() {
     return usmSound_ParkAssistVolumeAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmSound_ParkAssistVolumeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmSound_ParkAssistVolumeAttribute();
 }

 void McuManagerStubDefault::setUsmSound_ParkAssistVolumeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmSound_ParkAssistVolumeAttribute(true);
         const bool valueChanged = (usmSound_ParkAssistVolumeAttributeValue_ != _value);
         if (valueChanged) {
             usmSound_ParkAssistVolumeAttributeValue_ = std::move(_value);
             fireUsmSound_ParkAssistVolumeAttributeChanged(usmSound_ParkAssistVolumeAttributeValue_);
         }
         stubAdapter->lockUsmSound_ParkAssistVolumeAttribute(false);
     } else {
         const bool valueChanged = trySetUsmSound_ParkAssistVolumeAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmSound_ParkAssistVolumeAttributeChanged(usmSound_ParkAssistVolumeAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmSound_ParkAssistVolumeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmSound_ParkAssistVolumeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmSound_ParkAssistVolumeAttribute(true);
         valueChanged = (usmSound_ParkAssistVolumeAttributeValue_ != _value);
         usmSound_ParkAssistVolumeAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmSound_ParkAssistVolumeAttribute(false);
     } else {
         valueChanged = (usmSound_ParkAssistVolumeAttributeValue_ != _value);
         usmSound_ParkAssistVolumeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmSound_ParkAssistVolumeAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmSound_WelcomeSoundAttribute() {
     return usmSound_WelcomeSoundAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmSound_WelcomeSoundAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmSound_WelcomeSoundAttribute();
 }

 void McuManagerStubDefault::setUsmSound_WelcomeSoundAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmSound_WelcomeSoundAttribute(true);
         const bool valueChanged = (usmSound_WelcomeSoundAttributeValue_ != _value);
         if (valueChanged) {
             usmSound_WelcomeSoundAttributeValue_ = std::move(_value);
             fireUsmSound_WelcomeSoundAttributeChanged(usmSound_WelcomeSoundAttributeValue_);
         }
         stubAdapter->lockUsmSound_WelcomeSoundAttribute(false);
     } else {
         const bool valueChanged = trySetUsmSound_WelcomeSoundAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmSound_WelcomeSoundAttributeChanged(usmSound_WelcomeSoundAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmSound_WelcomeSoundAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmSound_WelcomeSoundAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmSound_WelcomeSoundAttribute(true);
         valueChanged = (usmSound_WelcomeSoundAttributeValue_ != _value);
         usmSound_WelcomeSoundAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmSound_WelcomeSoundAttribute(false);
     } else {
         valueChanged = (usmSound_WelcomeSoundAttributeValue_ != _value);
         usmSound_WelcomeSoundAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmSound_WelcomeSoundAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_SeatEasyAccessAttribute() {
     return usmConvenience_SeatEasyAccessAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_SeatEasyAccessAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmConvenience_SeatEasyAccessAttribute();
 }

 void McuManagerStubDefault::setUsmConvenience_SeatEasyAccessAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_SeatEasyAccessAttribute(true);
         const bool valueChanged = (usmConvenience_SeatEasyAccessAttributeValue_ != _value);
         if (valueChanged) {
             usmConvenience_SeatEasyAccessAttributeValue_ = std::move(_value);
             fireUsmConvenience_SeatEasyAccessAttributeChanged(usmConvenience_SeatEasyAccessAttributeValue_);
         }
         stubAdapter->lockUsmConvenience_SeatEasyAccessAttribute(false);
     } else {
         const bool valueChanged = trySetUsmConvenience_SeatEasyAccessAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmConvenience_SeatEasyAccessAttributeChanged(usmConvenience_SeatEasyAccessAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmConvenience_SeatEasyAccessAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmConvenience_SeatEasyAccessAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_SeatEasyAccessAttribute(true);
         valueChanged = (usmConvenience_SeatEasyAccessAttributeValue_ != _value);
         usmConvenience_SeatEasyAccessAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmConvenience_SeatEasyAccessAttribute(false);
     } else {
         valueChanged = (usmConvenience_SeatEasyAccessAttributeValue_ != _value);
         usmConvenience_SeatEasyAccessAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmConvenience_SeatEasyAccessAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_WelcomeMirrorLight_TitleAttribute() {
     return usmConvenience_WelcomeMirrorLight_TitleAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_WelcomeMirrorLight_TitleAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmConvenience_WelcomeMirrorLight_TitleAttribute();
 }

 void McuManagerStubDefault::setUsmConvenience_WelcomeMirrorLight_TitleAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_WelcomeMirrorLight_TitleAttribute(true);
         const bool valueChanged = (usmConvenience_WelcomeMirrorLight_TitleAttributeValue_ != _value);
         if (valueChanged) {
             usmConvenience_WelcomeMirrorLight_TitleAttributeValue_ = std::move(_value);
             fireUsmConvenience_WelcomeMirrorLight_TitleAttributeChanged(usmConvenience_WelcomeMirrorLight_TitleAttributeValue_);
         }
         stubAdapter->lockUsmConvenience_WelcomeMirrorLight_TitleAttribute(false);
     } else {
         const bool valueChanged = trySetUsmConvenience_WelcomeMirrorLight_TitleAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmConvenience_WelcomeMirrorLight_TitleAttributeChanged(usmConvenience_WelcomeMirrorLight_TitleAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmConvenience_WelcomeMirrorLight_TitleAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmConvenience_WelcomeMirrorLight_TitleAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_WelcomeMirrorLight_TitleAttribute(true);
         valueChanged = (usmConvenience_WelcomeMirrorLight_TitleAttributeValue_ != _value);
         usmConvenience_WelcomeMirrorLight_TitleAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmConvenience_WelcomeMirrorLight_TitleAttribute(false);
     } else {
         valueChanged = (usmConvenience_WelcomeMirrorLight_TitleAttributeValue_ != _value);
         usmConvenience_WelcomeMirrorLight_TitleAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmConvenience_WelcomeMirrorLight_TitleAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute() {
     return usmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute();
 }

 void McuManagerStubDefault::setUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute(true);
         const bool valueChanged = (usmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeValue_ != _value);
         if (valueChanged) {
             usmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeValue_ = std::move(_value);
             fireUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeChanged(usmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeValue_);
         }
         stubAdapter->lockUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute(false);
     } else {
         const bool valueChanged = trySetUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeChanged(usmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute(true);
         valueChanged = (usmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeValue_ != _value);
         usmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttribute(false);
     } else {
         valueChanged = (usmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeValue_ != _value);
         usmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmConvenience_WelcomeMirrorLight_OnDoorUnlockAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute() {
     return usmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute();
 }

 void McuManagerStubDefault::setUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute(true);
         const bool valueChanged = (usmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeValue_ != _value);
         if (valueChanged) {
             usmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeValue_ = std::move(_value);
             fireUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeChanged(usmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeValue_);
         }
         stubAdapter->lockUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute(false);
     } else {
         const bool valueChanged = trySetUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeChanged(usmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute(true);
         valueChanged = (usmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeValue_ != _value);
         usmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttribute(false);
     } else {
         valueChanged = (usmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeValue_ != _value);
         usmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmConvenience_WelcomeMirrorLight_OnDriverApproachAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_MirrorAutoFoldingAttribute() {
     return usmConvenience_MirrorAutoFoldingAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_MirrorAutoFoldingAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmConvenience_MirrorAutoFoldingAttribute();
 }

 void McuManagerStubDefault::setUsmConvenience_MirrorAutoFoldingAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_MirrorAutoFoldingAttribute(true);
         const bool valueChanged = (usmConvenience_MirrorAutoFoldingAttributeValue_ != _value);
         if (valueChanged) {
             usmConvenience_MirrorAutoFoldingAttributeValue_ = std::move(_value);
             fireUsmConvenience_MirrorAutoFoldingAttributeChanged(usmConvenience_MirrorAutoFoldingAttributeValue_);
         }
         stubAdapter->lockUsmConvenience_MirrorAutoFoldingAttribute(false);
     } else {
         const bool valueChanged = trySetUsmConvenience_MirrorAutoFoldingAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmConvenience_MirrorAutoFoldingAttributeChanged(usmConvenience_MirrorAutoFoldingAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmConvenience_MirrorAutoFoldingAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmConvenience_MirrorAutoFoldingAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_MirrorAutoFoldingAttribute(true);
         valueChanged = (usmConvenience_MirrorAutoFoldingAttributeValue_ != _value);
         usmConvenience_MirrorAutoFoldingAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmConvenience_MirrorAutoFoldingAttribute(false);
     } else {
         valueChanged = (usmConvenience_MirrorAutoFoldingAttributeValue_ != _value);
         usmConvenience_MirrorAutoFoldingAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmConvenience_MirrorAutoFoldingAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_WirelessChargingSystemAttribute() {
     return usmConvenience_WirelessChargingSystemAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_WirelessChargingSystemAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmConvenience_WirelessChargingSystemAttribute();
 }

 void McuManagerStubDefault::setUsmConvenience_WirelessChargingSystemAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_WirelessChargingSystemAttribute(true);
         const bool valueChanged = (usmConvenience_WirelessChargingSystemAttributeValue_ != _value);
         if (valueChanged) {
             usmConvenience_WirelessChargingSystemAttributeValue_ = std::move(_value);
             fireUsmConvenience_WirelessChargingSystemAttributeChanged(usmConvenience_WirelessChargingSystemAttributeValue_);
         }
         stubAdapter->lockUsmConvenience_WirelessChargingSystemAttribute(false);
     } else {
         const bool valueChanged = trySetUsmConvenience_WirelessChargingSystemAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmConvenience_WirelessChargingSystemAttributeChanged(usmConvenience_WirelessChargingSystemAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmConvenience_WirelessChargingSystemAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmConvenience_WirelessChargingSystemAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_WirelessChargingSystemAttribute(true);
         valueChanged = (usmConvenience_WirelessChargingSystemAttributeValue_ != _value);
         usmConvenience_WirelessChargingSystemAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmConvenience_WirelessChargingSystemAttribute(false);
     } else {
         valueChanged = (usmConvenience_WirelessChargingSystemAttributeValue_ != _value);
         usmConvenience_WirelessChargingSystemAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmConvenience_WirelessChargingSystemAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_TrafficInformationAttribute() {
     return usmConvenience_TrafficInformationAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_TrafficInformationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmConvenience_TrafficInformationAttribute();
 }

 void McuManagerStubDefault::setUsmConvenience_TrafficInformationAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_TrafficInformationAttribute(true);
         const bool valueChanged = (usmConvenience_TrafficInformationAttributeValue_ != _value);
         if (valueChanged) {
             usmConvenience_TrafficInformationAttributeValue_ = std::move(_value);
             fireUsmConvenience_TrafficInformationAttributeChanged(usmConvenience_TrafficInformationAttributeValue_);
         }
         stubAdapter->lockUsmConvenience_TrafficInformationAttribute(false);
     } else {
         const bool valueChanged = trySetUsmConvenience_TrafficInformationAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmConvenience_TrafficInformationAttributeChanged(usmConvenience_TrafficInformationAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmConvenience_TrafficInformationAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmConvenience_TrafficInformationAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_TrafficInformationAttribute(true);
         valueChanged = (usmConvenience_TrafficInformationAttributeValue_ != _value);
         usmConvenience_TrafficInformationAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmConvenience_TrafficInformationAttribute(false);
     } else {
         valueChanged = (usmConvenience_TrafficInformationAttributeValue_ != _value);
         usmConvenience_TrafficInformationAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmConvenience_TrafficInformationAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_WipreLightsDisplayAttribute() {
     return usmConvenience_WipreLightsDisplayAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_WipreLightsDisplayAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmConvenience_WipreLightsDisplayAttribute();
 }

 void McuManagerStubDefault::setUsmConvenience_WipreLightsDisplayAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_WipreLightsDisplayAttribute(true);
         const bool valueChanged = (usmConvenience_WipreLightsDisplayAttributeValue_ != _value);
         if (valueChanged) {
             usmConvenience_WipreLightsDisplayAttributeValue_ = std::move(_value);
             fireUsmConvenience_WipreLightsDisplayAttributeChanged(usmConvenience_WipreLightsDisplayAttributeValue_);
         }
         stubAdapter->lockUsmConvenience_WipreLightsDisplayAttribute(false);
     } else {
         const bool valueChanged = trySetUsmConvenience_WipreLightsDisplayAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmConvenience_WipreLightsDisplayAttributeChanged(usmConvenience_WipreLightsDisplayAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmConvenience_WipreLightsDisplayAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmConvenience_WipreLightsDisplayAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_WipreLightsDisplayAttribute(true);
         valueChanged = (usmConvenience_WipreLightsDisplayAttributeValue_ != _value);
         usmConvenience_WipreLightsDisplayAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmConvenience_WipreLightsDisplayAttribute(false);
     } else {
         valueChanged = (usmConvenience_WipreLightsDisplayAttributeValue_ != _value);
         usmConvenience_WipreLightsDisplayAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmConvenience_WipreLightsDisplayAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_AutoRearWiperInRAttribute() {
     return usmConvenience_AutoRearWiperInRAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_AutoRearWiperInRAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmConvenience_AutoRearWiperInRAttribute();
 }

 void McuManagerStubDefault::setUsmConvenience_AutoRearWiperInRAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_AutoRearWiperInRAttribute(true);
         const bool valueChanged = (usmConvenience_AutoRearWiperInRAttributeValue_ != _value);
         if (valueChanged) {
             usmConvenience_AutoRearWiperInRAttributeValue_ = std::move(_value);
             fireUsmConvenience_AutoRearWiperInRAttributeChanged(usmConvenience_AutoRearWiperInRAttributeValue_);
         }
         stubAdapter->lockUsmConvenience_AutoRearWiperInRAttribute(false);
     } else {
         const bool valueChanged = trySetUsmConvenience_AutoRearWiperInRAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmConvenience_AutoRearWiperInRAttributeChanged(usmConvenience_AutoRearWiperInRAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmConvenience_AutoRearWiperInRAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmConvenience_AutoRearWiperInRAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_AutoRearWiperInRAttribute(true);
         valueChanged = (usmConvenience_AutoRearWiperInRAttributeValue_ != _value);
         usmConvenience_AutoRearWiperInRAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmConvenience_AutoRearWiperInRAttribute(false);
     } else {
         valueChanged = (usmConvenience_AutoRearWiperInRAttributeValue_ != _value);
         usmConvenience_AutoRearWiperInRAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmConvenience_AutoRearWiperInRAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_GearPositionPopupAttribute() {
     return usmConvenience_GearPositionPopupAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_GearPositionPopupAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmConvenience_GearPositionPopupAttribute();
 }

 void McuManagerStubDefault::setUsmConvenience_GearPositionPopupAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_GearPositionPopupAttribute(true);
         const bool valueChanged = (usmConvenience_GearPositionPopupAttributeValue_ != _value);
         if (valueChanged) {
             usmConvenience_GearPositionPopupAttributeValue_ = std::move(_value);
             fireUsmConvenience_GearPositionPopupAttributeChanged(usmConvenience_GearPositionPopupAttributeValue_);
         }
         stubAdapter->lockUsmConvenience_GearPositionPopupAttribute(false);
     } else {
         const bool valueChanged = trySetUsmConvenience_GearPositionPopupAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmConvenience_GearPositionPopupAttributeChanged(usmConvenience_GearPositionPopupAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmConvenience_GearPositionPopupAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmConvenience_GearPositionPopupAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_GearPositionPopupAttribute(true);
         valueChanged = (usmConvenience_GearPositionPopupAttributeValue_ != _value);
         usmConvenience_GearPositionPopupAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmConvenience_GearPositionPopupAttribute(false);
     } else {
         valueChanged = (usmConvenience_GearPositionPopupAttributeValue_ != _value);
         usmConvenience_GearPositionPopupAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmConvenience_GearPositionPopupAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_IcyRoadWarningAttribute() {
     return usmConvenience_IcyRoadWarningAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmConvenience_IcyRoadWarningAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmConvenience_IcyRoadWarningAttribute();
 }

 void McuManagerStubDefault::setUsmConvenience_IcyRoadWarningAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_IcyRoadWarningAttribute(true);
         const bool valueChanged = (usmConvenience_IcyRoadWarningAttributeValue_ != _value);
         if (valueChanged) {
             usmConvenience_IcyRoadWarningAttributeValue_ = std::move(_value);
             fireUsmConvenience_IcyRoadWarningAttributeChanged(usmConvenience_IcyRoadWarningAttributeValue_);
         }
         stubAdapter->lockUsmConvenience_IcyRoadWarningAttribute(false);
     } else {
         const bool valueChanged = trySetUsmConvenience_IcyRoadWarningAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmConvenience_IcyRoadWarningAttributeChanged(usmConvenience_IcyRoadWarningAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmConvenience_IcyRoadWarningAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmConvenience_IcyRoadWarningAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmConvenience_IcyRoadWarningAttribute(true);
         valueChanged = (usmConvenience_IcyRoadWarningAttributeValue_ != _value);
         usmConvenience_IcyRoadWarningAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmConvenience_IcyRoadWarningAttribute(false);
     } else {
         valueChanged = (usmConvenience_IcyRoadWarningAttributeValue_ != _value);
         usmConvenience_IcyRoadWarningAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmConvenience_IcyRoadWarningAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmServiceInterval_ModeAttribute() {
     return usmServiceInterval_ModeAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmServiceInterval_ModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmServiceInterval_ModeAttribute();
 }

 void McuManagerStubDefault::setUsmServiceInterval_ModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmServiceInterval_ModeAttribute(true);
         const bool valueChanged = (usmServiceInterval_ModeAttributeValue_ != _value);
         if (valueChanged) {
             usmServiceInterval_ModeAttributeValue_ = std::move(_value);
             fireUsmServiceInterval_ModeAttributeChanged(usmServiceInterval_ModeAttributeValue_);
         }
         stubAdapter->lockUsmServiceInterval_ModeAttribute(false);
     } else {
         const bool valueChanged = trySetUsmServiceInterval_ModeAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmServiceInterval_ModeAttributeChanged(usmServiceInterval_ModeAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmServiceInterval_ModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmServiceInterval_ModeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmServiceInterval_ModeAttribute(true);
         valueChanged = (usmServiceInterval_ModeAttributeValue_ != _value);
         usmServiceInterval_ModeAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmServiceInterval_ModeAttribute(false);
     } else {
         valueChanged = (usmServiceInterval_ModeAttributeValue_ != _value);
         usmServiceInterval_ModeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmServiceInterval_ModeAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmServiceInterval_EnableServiceIntervalAttribute() {
     return usmServiceInterval_EnableServiceIntervalAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmServiceInterval_EnableServiceIntervalAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmServiceInterval_EnableServiceIntervalAttribute();
 }

 void McuManagerStubDefault::setUsmServiceInterval_EnableServiceIntervalAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmServiceInterval_EnableServiceIntervalAttribute(true);
         const bool valueChanged = (usmServiceInterval_EnableServiceIntervalAttributeValue_ != _value);
         if (valueChanged) {
             usmServiceInterval_EnableServiceIntervalAttributeValue_ = std::move(_value);
             fireUsmServiceInterval_EnableServiceIntervalAttributeChanged(usmServiceInterval_EnableServiceIntervalAttributeValue_);
         }
         stubAdapter->lockUsmServiceInterval_EnableServiceIntervalAttribute(false);
     } else {
         const bool valueChanged = trySetUsmServiceInterval_EnableServiceIntervalAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmServiceInterval_EnableServiceIntervalAttributeChanged(usmServiceInterval_EnableServiceIntervalAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmServiceInterval_EnableServiceIntervalAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmServiceInterval_EnableServiceIntervalAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmServiceInterval_EnableServiceIntervalAttribute(true);
         valueChanged = (usmServiceInterval_EnableServiceIntervalAttributeValue_ != _value);
         usmServiceInterval_EnableServiceIntervalAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmServiceInterval_EnableServiceIntervalAttribute(false);
     } else {
         valueChanged = (usmServiceInterval_EnableServiceIntervalAttributeValue_ != _value);
         usmServiceInterval_EnableServiceIntervalAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmServiceInterval_EnableServiceIntervalAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmServiceInterval_ResetAttribute() {
     return usmServiceInterval_ResetAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmServiceInterval_ResetAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmServiceInterval_ResetAttribute();
 }

 void McuManagerStubDefault::setUsmServiceInterval_ResetAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmServiceInterval_ResetAttribute(true);
         const bool valueChanged = (usmServiceInterval_ResetAttributeValue_ != _value);
         if (valueChanged) {
             usmServiceInterval_ResetAttributeValue_ = std::move(_value);
             fireUsmServiceInterval_ResetAttributeChanged(usmServiceInterval_ResetAttributeValue_);
         }
         stubAdapter->lockUsmServiceInterval_ResetAttribute(false);
     } else {
         const bool valueChanged = trySetUsmServiceInterval_ResetAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmServiceInterval_ResetAttributeChanged(usmServiceInterval_ResetAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmServiceInterval_ResetAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmServiceInterval_ResetAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmServiceInterval_ResetAttribute(true);
         valueChanged = (usmServiceInterval_ResetAttributeValue_ != _value);
         usmServiceInterval_ResetAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmServiceInterval_ResetAttribute(false);
     } else {
         valueChanged = (usmServiceInterval_ResetAttributeValue_ != _value);
         usmServiceInterval_ResetAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmServiceInterval_ResetAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_FuelEconomyResetAttribute() {
     return usmOther_FuelEconomyResetAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_FuelEconomyResetAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmOther_FuelEconomyResetAttribute();
 }

 void McuManagerStubDefault::setUsmOther_FuelEconomyResetAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_FuelEconomyResetAttribute(true);
         const bool valueChanged = (usmOther_FuelEconomyResetAttributeValue_ != _value);
         if (valueChanged) {
             usmOther_FuelEconomyResetAttributeValue_ = std::move(_value);
             fireUsmOther_FuelEconomyResetAttributeChanged(usmOther_FuelEconomyResetAttributeValue_);
         }
         stubAdapter->lockUsmOther_FuelEconomyResetAttribute(false);
     } else {
         const bool valueChanged = trySetUsmOther_FuelEconomyResetAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmOther_FuelEconomyResetAttributeChanged(usmOther_FuelEconomyResetAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmOther_FuelEconomyResetAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmOther_FuelEconomyResetAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_FuelEconomyResetAttribute(true);
         valueChanged = (usmOther_FuelEconomyResetAttributeValue_ != _value);
         usmOther_FuelEconomyResetAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmOther_FuelEconomyResetAttribute(false);
     } else {
         valueChanged = (usmOther_FuelEconomyResetAttributeValue_ != _value);
         usmOther_FuelEconomyResetAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmOther_FuelEconomyResetAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_FuelEconomyUnitAttribute() {
     return usmOther_FuelEconomyUnitAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_FuelEconomyUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmOther_FuelEconomyUnitAttribute();
 }

 void McuManagerStubDefault::setUsmOther_FuelEconomyUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_FuelEconomyUnitAttribute(true);
         const bool valueChanged = (usmOther_FuelEconomyUnitAttributeValue_ != _value);
         if (valueChanged) {
             usmOther_FuelEconomyUnitAttributeValue_ = std::move(_value);
             fireUsmOther_FuelEconomyUnitAttributeChanged(usmOther_FuelEconomyUnitAttributeValue_);
         }
         stubAdapter->lockUsmOther_FuelEconomyUnitAttribute(false);
     } else {
         const bool valueChanged = trySetUsmOther_FuelEconomyUnitAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmOther_FuelEconomyUnitAttributeChanged(usmOther_FuelEconomyUnitAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmOther_FuelEconomyUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmOther_FuelEconomyUnitAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_FuelEconomyUnitAttribute(true);
         valueChanged = (usmOther_FuelEconomyUnitAttributeValue_ != _value);
         usmOther_FuelEconomyUnitAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmOther_FuelEconomyUnitAttribute(false);
     } else {
         valueChanged = (usmOther_FuelEconomyUnitAttributeValue_ != _value);
         usmOther_FuelEconomyUnitAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmOther_FuelEconomyUnitAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_TemperatureUnitAttribute() {
     return usmOther_TemperatureUnitAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_TemperatureUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmOther_TemperatureUnitAttribute();
 }

 void McuManagerStubDefault::setUsmOther_TemperatureUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_TemperatureUnitAttribute(true);
         const bool valueChanged = (usmOther_TemperatureUnitAttributeValue_ != _value);
         if (valueChanged) {
             usmOther_TemperatureUnitAttributeValue_ = std::move(_value);
             fireUsmOther_TemperatureUnitAttributeChanged(usmOther_TemperatureUnitAttributeValue_);
         }
         stubAdapter->lockUsmOther_TemperatureUnitAttribute(false);
     } else {
         const bool valueChanged = trySetUsmOther_TemperatureUnitAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmOther_TemperatureUnitAttributeChanged(usmOther_TemperatureUnitAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmOther_TemperatureUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmOther_TemperatureUnitAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_TemperatureUnitAttribute(true);
         valueChanged = (usmOther_TemperatureUnitAttributeValue_ != _value);
         usmOther_TemperatureUnitAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmOther_TemperatureUnitAttribute(false);
     } else {
         valueChanged = (usmOther_TemperatureUnitAttributeValue_ != _value);
         usmOther_TemperatureUnitAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmOther_TemperatureUnitAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_TirePressureUnitAttribute() {
     return usmOther_TirePressureUnitAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_TirePressureUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmOther_TirePressureUnitAttribute();
 }

 void McuManagerStubDefault::setUsmOther_TirePressureUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_TirePressureUnitAttribute(true);
         const bool valueChanged = (usmOther_TirePressureUnitAttributeValue_ != _value);
         if (valueChanged) {
             usmOther_TirePressureUnitAttributeValue_ = std::move(_value);
             fireUsmOther_TirePressureUnitAttributeChanged(usmOther_TirePressureUnitAttributeValue_);
         }
         stubAdapter->lockUsmOther_TirePressureUnitAttribute(false);
     } else {
         const bool valueChanged = trySetUsmOther_TirePressureUnitAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmOther_TirePressureUnitAttributeChanged(usmOther_TirePressureUnitAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmOther_TirePressureUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmOther_TirePressureUnitAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_TirePressureUnitAttribute(true);
         valueChanged = (usmOther_TirePressureUnitAttributeValue_ != _value);
         usmOther_TirePressureUnitAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmOther_TirePressureUnitAttribute(false);
     } else {
         valueChanged = (usmOther_TirePressureUnitAttributeValue_ != _value);
         usmOther_TirePressureUnitAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmOther_TirePressureUnitAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_SpeedUnitAttribute() {
     return usmOther_SpeedUnitAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_SpeedUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmOther_SpeedUnitAttribute();
 }

 void McuManagerStubDefault::setUsmOther_SpeedUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_SpeedUnitAttribute(true);
         const bool valueChanged = (usmOther_SpeedUnitAttributeValue_ != _value);
         if (valueChanged) {
             usmOther_SpeedUnitAttributeValue_ = std::move(_value);
             fireUsmOther_SpeedUnitAttributeChanged(usmOther_SpeedUnitAttributeValue_);
         }
         stubAdapter->lockUsmOther_SpeedUnitAttribute(false);
     } else {
         const bool valueChanged = trySetUsmOther_SpeedUnitAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmOther_SpeedUnitAttributeChanged(usmOther_SpeedUnitAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmOther_SpeedUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmOther_SpeedUnitAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_SpeedUnitAttribute(true);
         valueChanged = (usmOther_SpeedUnitAttributeValue_ != _value);
         usmOther_SpeedUnitAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmOther_SpeedUnitAttribute(false);
     } else {
         valueChanged = (usmOther_SpeedUnitAttributeValue_ != _value);
         usmOther_SpeedUnitAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmOther_SpeedUnitAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_TorqueUnitAttribute() {
     return usmOther_TorqueUnitAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_TorqueUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmOther_TorqueUnitAttribute();
 }

 void McuManagerStubDefault::setUsmOther_TorqueUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_TorqueUnitAttribute(true);
         const bool valueChanged = (usmOther_TorqueUnitAttributeValue_ != _value);
         if (valueChanged) {
             usmOther_TorqueUnitAttributeValue_ = std::move(_value);
             fireUsmOther_TorqueUnitAttributeChanged(usmOther_TorqueUnitAttributeValue_);
         }
         stubAdapter->lockUsmOther_TorqueUnitAttribute(false);
     } else {
         const bool valueChanged = trySetUsmOther_TorqueUnitAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmOther_TorqueUnitAttributeChanged(usmOther_TorqueUnitAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmOther_TorqueUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmOther_TorqueUnitAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_TorqueUnitAttribute(true);
         valueChanged = (usmOther_TorqueUnitAttributeValue_ != _value);
         usmOther_TorqueUnitAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmOther_TorqueUnitAttribute(false);
     } else {
         valueChanged = (usmOther_TorqueUnitAttributeValue_ != _value);
         usmOther_TorqueUnitAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmOther_TorqueUnitAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_TurboBoostPressureUnitAttribute() {
     return usmOther_TurboBoostPressureUnitAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmOther_TurboBoostPressureUnitAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmOther_TurboBoostPressureUnitAttribute();
 }

 void McuManagerStubDefault::setUsmOther_TurboBoostPressureUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_TurboBoostPressureUnitAttribute(true);
         const bool valueChanged = (usmOther_TurboBoostPressureUnitAttributeValue_ != _value);
         if (valueChanged) {
             usmOther_TurboBoostPressureUnitAttributeValue_ = std::move(_value);
             fireUsmOther_TurboBoostPressureUnitAttributeChanged(usmOther_TurboBoostPressureUnitAttributeValue_);
         }
         stubAdapter->lockUsmOther_TurboBoostPressureUnitAttribute(false);
     } else {
         const bool valueChanged = trySetUsmOther_TurboBoostPressureUnitAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmOther_TurboBoostPressureUnitAttributeChanged(usmOther_TurboBoostPressureUnitAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmOther_TurboBoostPressureUnitAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmOther_TurboBoostPressureUnitAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmOther_TurboBoostPressureUnitAttribute(true);
         valueChanged = (usmOther_TurboBoostPressureUnitAttributeValue_ != _value);
         usmOther_TurboBoostPressureUnitAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmOther_TurboBoostPressureUnitAttribute(false);
     } else {
         valueChanged = (usmOther_TurboBoostPressureUnitAttributeValue_ != _value);
         usmOther_TurboBoostPressureUnitAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmOther_TurboBoostPressureUnitAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_GreenZoneEVDriveAttribute() {
     return usmEcoVehicle_GreenZoneEVDriveAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_GreenZoneEVDriveAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmEcoVehicle_GreenZoneEVDriveAttribute();
 }

 void McuManagerStubDefault::setUsmEcoVehicle_GreenZoneEVDriveAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_GreenZoneEVDriveAttribute(true);
         const bool valueChanged = (usmEcoVehicle_GreenZoneEVDriveAttributeValue_ != _value);
         if (valueChanged) {
             usmEcoVehicle_GreenZoneEVDriveAttributeValue_ = std::move(_value);
             fireUsmEcoVehicle_GreenZoneEVDriveAttributeChanged(usmEcoVehicle_GreenZoneEVDriveAttributeValue_);
         }
         stubAdapter->lockUsmEcoVehicle_GreenZoneEVDriveAttribute(false);
     } else {
         const bool valueChanged = trySetUsmEcoVehicle_GreenZoneEVDriveAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmEcoVehicle_GreenZoneEVDriveAttributeChanged(usmEcoVehicle_GreenZoneEVDriveAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmEcoVehicle_GreenZoneEVDriveAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmEcoVehicle_GreenZoneEVDriveAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_GreenZoneEVDriveAttribute(true);
         valueChanged = (usmEcoVehicle_GreenZoneEVDriveAttributeValue_ != _value);
         usmEcoVehicle_GreenZoneEVDriveAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmEcoVehicle_GreenZoneEVDriveAttribute(false);
     } else {
         valueChanged = (usmEcoVehicle_GreenZoneEVDriveAttributeValue_ != _value);
         usmEcoVehicle_GreenZoneEVDriveAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmEcoVehicle_GreenZoneEVDriveAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_CoastingGuideEnableAttribute() {
     return usmEcoVehicle_CoastingGuideEnableAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_CoastingGuideEnableAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmEcoVehicle_CoastingGuideEnableAttribute();
 }

 void McuManagerStubDefault::setUsmEcoVehicle_CoastingGuideEnableAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_CoastingGuideEnableAttribute(true);
         const bool valueChanged = (usmEcoVehicle_CoastingGuideEnableAttributeValue_ != _value);
         if (valueChanged) {
             usmEcoVehicle_CoastingGuideEnableAttributeValue_ = std::move(_value);
             fireUsmEcoVehicle_CoastingGuideEnableAttributeChanged(usmEcoVehicle_CoastingGuideEnableAttributeValue_);
         }
         stubAdapter->lockUsmEcoVehicle_CoastingGuideEnableAttribute(false);
     } else {
         const bool valueChanged = trySetUsmEcoVehicle_CoastingGuideEnableAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmEcoVehicle_CoastingGuideEnableAttributeChanged(usmEcoVehicle_CoastingGuideEnableAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmEcoVehicle_CoastingGuideEnableAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmEcoVehicle_CoastingGuideEnableAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_CoastingGuideEnableAttribute(true);
         valueChanged = (usmEcoVehicle_CoastingGuideEnableAttributeValue_ != _value);
         usmEcoVehicle_CoastingGuideEnableAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmEcoVehicle_CoastingGuideEnableAttribute(false);
     } else {
         valueChanged = (usmEcoVehicle_CoastingGuideEnableAttributeValue_ != _value);
         usmEcoVehicle_CoastingGuideEnableAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmEcoVehicle_CoastingGuideEnableAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_CoastingGuideSoundAttribute() {
     return usmEcoVehicle_CoastingGuideSoundAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_CoastingGuideSoundAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmEcoVehicle_CoastingGuideSoundAttribute();
 }

 void McuManagerStubDefault::setUsmEcoVehicle_CoastingGuideSoundAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_CoastingGuideSoundAttribute(true);
         const bool valueChanged = (usmEcoVehicle_CoastingGuideSoundAttributeValue_ != _value);
         if (valueChanged) {
             usmEcoVehicle_CoastingGuideSoundAttributeValue_ = std::move(_value);
             fireUsmEcoVehicle_CoastingGuideSoundAttributeChanged(usmEcoVehicle_CoastingGuideSoundAttributeValue_);
         }
         stubAdapter->lockUsmEcoVehicle_CoastingGuideSoundAttribute(false);
     } else {
         const bool valueChanged = trySetUsmEcoVehicle_CoastingGuideSoundAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmEcoVehicle_CoastingGuideSoundAttributeChanged(usmEcoVehicle_CoastingGuideSoundAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmEcoVehicle_CoastingGuideSoundAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmEcoVehicle_CoastingGuideSoundAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_CoastingGuideSoundAttribute(true);
         valueChanged = (usmEcoVehicle_CoastingGuideSoundAttributeValue_ != _value);
         usmEcoVehicle_CoastingGuideSoundAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmEcoVehicle_CoastingGuideSoundAttribute(false);
     } else {
         valueChanged = (usmEcoVehicle_CoastingGuideSoundAttributeValue_ != _value);
         usmEcoVehicle_CoastingGuideSoundAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmEcoVehicle_CoastingGuideSoundAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_StartCoastingAttribute() {
     return usmEcoVehicle_StartCoastingAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_StartCoastingAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmEcoVehicle_StartCoastingAttribute();
 }

 void McuManagerStubDefault::setUsmEcoVehicle_StartCoastingAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_StartCoastingAttribute(true);
         const bool valueChanged = (usmEcoVehicle_StartCoastingAttributeValue_ != _value);
         if (valueChanged) {
             usmEcoVehicle_StartCoastingAttributeValue_ = std::move(_value);
             fireUsmEcoVehicle_StartCoastingAttributeChanged(usmEcoVehicle_StartCoastingAttributeValue_);
         }
         stubAdapter->lockUsmEcoVehicle_StartCoastingAttribute(false);
     } else {
         const bool valueChanged = trySetUsmEcoVehicle_StartCoastingAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmEcoVehicle_StartCoastingAttributeChanged(usmEcoVehicle_StartCoastingAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmEcoVehicle_StartCoastingAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmEcoVehicle_StartCoastingAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_StartCoastingAttribute(true);
         valueChanged = (usmEcoVehicle_StartCoastingAttributeValue_ != _value);
         usmEcoVehicle_StartCoastingAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmEcoVehicle_StartCoastingAttribute(false);
     } else {
         valueChanged = (usmEcoVehicle_StartCoastingAttributeValue_ != _value);
         usmEcoVehicle_StartCoastingAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmEcoVehicle_StartCoastingAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_ChargingConnectorLockingModeAttribute() {
     return usmEcoVehicle_ChargingConnectorLockingModeAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_ChargingConnectorLockingModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmEcoVehicle_ChargingConnectorLockingModeAttribute();
 }

 void McuManagerStubDefault::setUsmEcoVehicle_ChargingConnectorLockingModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_ChargingConnectorLockingModeAttribute(true);
         const bool valueChanged = (usmEcoVehicle_ChargingConnectorLockingModeAttributeValue_ != _value);
         if (valueChanged) {
             usmEcoVehicle_ChargingConnectorLockingModeAttributeValue_ = std::move(_value);
             fireUsmEcoVehicle_ChargingConnectorLockingModeAttributeChanged(usmEcoVehicle_ChargingConnectorLockingModeAttributeValue_);
         }
         stubAdapter->lockUsmEcoVehicle_ChargingConnectorLockingModeAttribute(false);
     } else {
         const bool valueChanged = trySetUsmEcoVehicle_ChargingConnectorLockingModeAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmEcoVehicle_ChargingConnectorLockingModeAttributeChanged(usmEcoVehicle_ChargingConnectorLockingModeAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmEcoVehicle_ChargingConnectorLockingModeAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmEcoVehicle_ChargingConnectorLockingModeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_ChargingConnectorLockingModeAttribute(true);
         valueChanged = (usmEcoVehicle_ChargingConnectorLockingModeAttributeValue_ != _value);
         usmEcoVehicle_ChargingConnectorLockingModeAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmEcoVehicle_ChargingConnectorLockingModeAttribute(false);
     } else {
         valueChanged = (usmEcoVehicle_ChargingConnectorLockingModeAttributeValue_ != _value);
         usmEcoVehicle_ChargingConnectorLockingModeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmEcoVehicle_ChargingConnectorLockingModeAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_ChargingConnectorConditionAttribute() {
     return usmEcoVehicle_ChargingConnectorConditionAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_ChargingConnectorConditionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmEcoVehicle_ChargingConnectorConditionAttribute();
 }

 void McuManagerStubDefault::setUsmEcoVehicle_ChargingConnectorConditionAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_ChargingConnectorConditionAttribute(true);
         const bool valueChanged = (usmEcoVehicle_ChargingConnectorConditionAttributeValue_ != _value);
         if (valueChanged) {
             usmEcoVehicle_ChargingConnectorConditionAttributeValue_ = std::move(_value);
             fireUsmEcoVehicle_ChargingConnectorConditionAttributeChanged(usmEcoVehicle_ChargingConnectorConditionAttributeValue_);
         }
         stubAdapter->lockUsmEcoVehicle_ChargingConnectorConditionAttribute(false);
     } else {
         const bool valueChanged = trySetUsmEcoVehicle_ChargingConnectorConditionAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmEcoVehicle_ChargingConnectorConditionAttributeChanged(usmEcoVehicle_ChargingConnectorConditionAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmEcoVehicle_ChargingConnectorConditionAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmEcoVehicle_ChargingConnectorConditionAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_ChargingConnectorConditionAttribute(true);
         valueChanged = (usmEcoVehicle_ChargingConnectorConditionAttributeValue_ != _value);
         usmEcoVehicle_ChargingConnectorConditionAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmEcoVehicle_ChargingConnectorConditionAttribute(false);
     } else {
         valueChanged = (usmEcoVehicle_ChargingConnectorConditionAttributeValue_ != _value);
         usmEcoVehicle_ChargingConnectorConditionAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmEcoVehicle_ChargingConnectorConditionAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute() {
     return usmEcoVehicle_AuxiliaryBatterySaverPlusAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute();
 }

 void McuManagerStubDefault::setUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute(true);
         const bool valueChanged = (usmEcoVehicle_AuxiliaryBatterySaverPlusAttributeValue_ != _value);
         if (valueChanged) {
             usmEcoVehicle_AuxiliaryBatterySaverPlusAttributeValue_ = std::move(_value);
             fireUsmEcoVehicle_AuxiliaryBatterySaverPlusAttributeChanged(usmEcoVehicle_AuxiliaryBatterySaverPlusAttributeValue_);
         }
         stubAdapter->lockUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute(false);
     } else {
         const bool valueChanged = trySetUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmEcoVehicle_AuxiliaryBatterySaverPlusAttributeChanged(usmEcoVehicle_AuxiliaryBatterySaverPlusAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmEcoVehicle_AuxiliaryBatterySaverPlusAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute(true);
         valueChanged = (usmEcoVehicle_AuxiliaryBatterySaverPlusAttributeValue_ != _value);
         usmEcoVehicle_AuxiliaryBatterySaverPlusAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmEcoVehicle_AuxiliaryBatterySaverPlusAttribute(false);
     } else {
         valueChanged = (usmEcoVehicle_AuxiliaryBatterySaverPlusAttributeValue_ != _value);
         usmEcoVehicle_AuxiliaryBatterySaverPlusAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmEcoVehicle_AuxiliaryBatterySaverPlusAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmLanguageAttribute() {
     return usmLanguageAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmLanguageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmLanguageAttribute();
 }

 void McuManagerStubDefault::setUsmLanguageAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmLanguageAttribute(true);
         const bool valueChanged = (usmLanguageAttributeValue_ != _value);
         if (valueChanged) {
             usmLanguageAttributeValue_ = std::move(_value);
             fireUsmLanguageAttributeChanged(usmLanguageAttributeValue_);
         }
         stubAdapter->lockUsmLanguageAttribute(false);
     } else {
         const bool valueChanged = trySetUsmLanguageAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmLanguageAttributeChanged(usmLanguageAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmLanguageAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmLanguageAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmLanguageAttribute(true);
         valueChanged = (usmLanguageAttributeValue_ != _value);
         usmLanguageAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmLanguageAttribute(false);
     } else {
         valueChanged = (usmLanguageAttributeValue_ != _value);
         usmLanguageAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmLanguageAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMServiceReminder& McuManagerStubDefault::getUsmService_ReminderAttribute() {
     return usmService_ReminderAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMServiceReminder& McuManagerStubDefault::getUsmService_ReminderAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmService_ReminderAttribute();
 }

 void McuManagerStubDefault::setUsmService_ReminderAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMServiceReminder _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmService_ReminderAttribute(true);
         const bool valueChanged = (usmService_ReminderAttributeValue_ != _value);
         if (valueChanged) {
             usmService_ReminderAttributeValue_ = std::move(_value);
             fireUsmService_ReminderAttributeChanged(usmService_ReminderAttributeValue_);
         }
         stubAdapter->lockUsmService_ReminderAttribute(false);
     } else {
         const bool valueChanged = trySetUsmService_ReminderAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmService_ReminderAttributeChanged(usmService_ReminderAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmService_ReminderAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMServiceReminder _value) {
     if (!validateUsmService_ReminderAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmService_ReminderAttribute(true);
         valueChanged = (usmService_ReminderAttributeValue_ != _value);
         usmService_ReminderAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmService_ReminderAttribute(false);
     } else {
         valueChanged = (usmService_ReminderAttributeValue_ != _value);
         usmService_ReminderAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmService_ReminderAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMServiceReminder &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_VolumeControlFunctionForVESSAttribute() {
     return usmEcoVehicle_VolumeControlFunctionForVESSAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32& McuManagerStubDefault::getUsmEcoVehicle_VolumeControlFunctionForVESSAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getUsmEcoVehicle_VolumeControlFunctionForVESSAttribute();
 }

 void McuManagerStubDefault::setUsmEcoVehicle_VolumeControlFunctionForVESSAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_VolumeControlFunctionForVESSAttribute(true);
         const bool valueChanged = (usmEcoVehicle_VolumeControlFunctionForVESSAttributeValue_ != _value);
         if (valueChanged) {
             usmEcoVehicle_VolumeControlFunctionForVESSAttributeValue_ = std::move(_value);
             fireUsmEcoVehicle_VolumeControlFunctionForVESSAttributeChanged(usmEcoVehicle_VolumeControlFunctionForVESSAttributeValue_);
         }
         stubAdapter->lockUsmEcoVehicle_VolumeControlFunctionForVESSAttribute(false);
     } else {
         const bool valueChanged = trySetUsmEcoVehicle_VolumeControlFunctionForVESSAttribute(std::move(_value));
         if (valueChanged) {
             fireUsmEcoVehicle_VolumeControlFunctionForVESSAttributeChanged(usmEcoVehicle_VolumeControlFunctionForVESSAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetUsmEcoVehicle_VolumeControlFunctionForVESSAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 _value) {
     if (!validateUsmEcoVehicle_VolumeControlFunctionForVESSAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockUsmEcoVehicle_VolumeControlFunctionForVESSAttribute(true);
         valueChanged = (usmEcoVehicle_VolumeControlFunctionForVESSAttributeValue_ != _value);
         usmEcoVehicle_VolumeControlFunctionForVESSAttributeValue_ = std::move(_value);
         stubAdapter->lockUsmEcoVehicle_VolumeControlFunctionForVESSAttribute(false);
     } else {
         valueChanged = (usmEcoVehicle_VolumeControlFunctionForVESSAttributeValue_ != _value);
         usmEcoVehicle_VolumeControlFunctionForVESSAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateUsmEcoVehicle_VolumeControlFunctionForVESSAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::USMItem32 &_value) {
     (void)_value;
     return true;
 }


 const ::v1::proj::dcluster::McuManager::McuManagerTypes::GroupTabInfo& McuManagerStubDefault::getLastTabInfoAttribute() {
     return lastTabInfoAttributeValue_;
 }

 const ::v1::proj::dcluster::McuManager::McuManagerTypes::GroupTabInfo& McuManagerStubDefault::getLastTabInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getLastTabInfoAttribute();
 }

 void McuManagerStubDefault::setLastTabInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::GroupTabInfo _value) {
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter,
     McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockLastTabInfoAttribute(true);
         const bool valueChanged = (lastTabInfoAttributeValue_ != _value);
         if (valueChanged) {
             lastTabInfoAttributeValue_ = std::move(_value);
             fireLastTabInfoAttributeChanged(lastTabInfoAttributeValue_);
         }
         stubAdapter->lockLastTabInfoAttribute(false);
     } else {
         const bool valueChanged = trySetLastTabInfoAttribute(std::move(_value));
         if (valueChanged) {
             fireLastTabInfoAttributeChanged(lastTabInfoAttributeValue_);
         }
     }
}

 bool McuManagerStubDefault::trySetLastTabInfoAttribute(::v1::proj::dcluster::McuManager::McuManagerTypes::GroupTabInfo _value) {
     if (!validateLastTabInfoAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<McuManagerStubAdapter> stubAdapter = CommonAPI::Stub<McuManagerStubAdapter, McuManagerStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockLastTabInfoAttribute(true);
         valueChanged = (lastTabInfoAttributeValue_ != _value);
         lastTabInfoAttributeValue_ = std::move(_value);
         stubAdapter->lockLastTabInfoAttribute(false);
     } else {
         valueChanged = (lastTabInfoAttributeValue_ != _value);
         lastTabInfoAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool McuManagerStubDefault::validateLastTabInfoAttributeRequestedValue(const ::v1::proj::dcluster::McuManager::McuManagerTypes::GroupTabInfo &_value) {
     (void)_value;
     return true;
 }



void McuManagerStubDefault::Command(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _id, ::v1::proj::dcluster::McuManager::McuManagerTypes::CmdData _data, CommandReply_t _reply) {
    (void)_client;
    (void)_id;
    (void)_data;
    bool result = false;
    _reply(result);
}


void McuManagerStubDefault::fireNotifySteerWheelKeyEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumStreerWheelKey &_sw_key) {
    if (!_sw_key.validate()) {
        return;
    }
    McuManagerStub::fireNotifySteerWheelKeyEvent(_sw_key);
}
void McuManagerStubDefault::fireNotifyIGNStateEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumIGNState &_ign_state) {
    if (!_ign_state.validate()) {
        return;
    }
    McuManagerStub::fireNotifyIGNStateEvent(_ign_state);
}
void McuManagerStubDefault::fireNotifyContentsGearStateEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StContentsGearInfo &_gear_info) {
    McuManagerStub::fireNotifyContentsGearStateEvent(_gear_info);
}
void McuManagerStubDefault::fireNotifyEventContentsEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StEventContentsInfo &_event_info) {
    McuManagerStub::fireNotifyEventContentsEvent(_event_info);
}
void McuManagerStubDefault::fireNotifyMasterWarnInfoEvent() {
    McuManagerStub::fireNotifyMasterWarnInfoEvent();
}
void McuManagerStubDefault::fireNotifyMasterWarnCmdEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::EnumMasterWarnCmd &_cmd) {
    if (!_cmd.validate()) {
        return;
    }
    McuManagerStub::fireNotifyMasterWarnCmdEvent(_cmd);
}
void McuManagerStubDefault::fireNotifySoundEvent(const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo &_channel_1, const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo &_channel_2, const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo &_channel_3, const ::v1::proj::dcluster::McuManager::McuManagerTypes::StSoundInfo &_channel_4) {
    McuManagerStub::fireNotifySoundEvent(_channel_1, _channel_2, _channel_3, _channel_4);
}


McuManagerStubDefault::RemoteEventHandler::RemoteEventHandler(McuManagerStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace McuManager
} // namespace dcluster
} // namespace proj
} // namespace v1
