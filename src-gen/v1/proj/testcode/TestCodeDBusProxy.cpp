/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201907221221.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/proj/testcode/TestCodeDBusProxy.hpp>

namespace v1 {
namespace proj {
namespace testcode {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createTestCodeDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
    return std::make_shared< TestCodeDBusProxy>(_address, _connection);
}

void initializeTestCodeDBusProxy() {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
        TestCode::getInterface(),
        &createTestCodeDBusProxy);
}

INITIALIZER(registerTestCodeDBusProxy) {
    CommonAPI::DBus::Factory::get()->registerInterface(initializeTestCodeDBusProxy);
}

TestCodeDBusProxy::TestCodeDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
    :   CommonAPI::DBus::DBusProxy(_address, _connection)
,        speedType_(*this, "onSpeedTypeAttributeChanged", "i", "getSpeedTypeAttribute", static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
        speedValue_(*this, "onSpeedValueAttributeChanged", "i", "getSpeedValueAttribute", static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr))
{
}

      TestCodeDBusProxy::SpeedTypeAttribute& TestCodeDBusProxy::getSpeedTypeAttribute() {
          return speedType_;
      }
      TestCodeDBusProxy::SpeedValueAttribute& TestCodeDBusProxy::getSpeedValueAttribute() {
          return speedValue_;
      }


    void TestCodeDBusProxy::setSpeedType(const TestCode::SpeedType &_type, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< TestCode::SpeedType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< TestCode::SpeedType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
            >::callMethodWithReply(
        *this,
        "setSpeedType",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_type,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> TestCodeDBusProxy::setSpeedTypeAsync(const TestCode::SpeedType &_type, SetSpeedTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< TestCode::SpeedType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< TestCode::SpeedType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
            >::callMethodAsync(
        *this,
        "setSpeedType",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_type,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
            if (_callback)
                _callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void TestCodeDBusProxy::getSpeedType(CommonAPI::CallStatus &_internalCallStatus, TestCode::SpeedType &_show, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< TestCode::SpeedType, CommonAPI::EmptyDeployment> deploy_show(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< TestCode::SpeedType,CommonAPI::EmptyDeployment>
            >
            >::callMethodWithReply(
        *this,
        "getSpeedType",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_show);
_show = deploy_show.getValue();
}
    std::future<CommonAPI::CallStatus> TestCodeDBusProxy::getSpeedTypeAsync(GetSpeedTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< TestCode::SpeedType, CommonAPI::EmptyDeployment> deploy_show(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< TestCode::SpeedType,CommonAPI::EmptyDeployment>
            >
            >::callMethodAsync(
        *this,
        "getSpeedType",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< TestCode::SpeedType, CommonAPI::EmptyDeployment > _show) {
            if (_callback)
                _callback(_internalCallStatus, _show.getValue());
        },
        std::make_tuple(deploy_show));
    }
    void TestCodeDBusProxy::setSpeedValue(const int32_t &_show, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_show(_show, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
            >::callMethodWithReply(
        *this,
        "setSpeedValue",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_show,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> TestCodeDBusProxy::setSpeedValueAsync(const int32_t &_show, SetSpeedValueAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_show(_show, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
            >::callMethodAsync(
        *this,
        "setSpeedValue",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_show,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
            if (_callback)
                _callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void TestCodeDBusProxy::getSpeedValue(CommonAPI::CallStatus &_internalCallStatus, int32_t &_show, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_show(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodWithReply(
        *this,
        "getSpeedValue",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_show);
_show = deploy_show.getValue();
}
    std::future<CommonAPI::CallStatus> TestCodeDBusProxy::getSpeedValueAsync(GetSpeedValueAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_show(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodAsync(
        *this,
        "getSpeedValue",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment > _show) {
            if (_callback)
                _callback(_internalCallStatus, _show.getValue());
        },
        std::make_tuple(deploy_show));
    }


void TestCodeDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace testcode
      } // namespace proj
      } // namespace v1
