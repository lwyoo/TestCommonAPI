/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201907221221.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_PROJ_TESTCODE_Test_Code_DBUS_PROXY_HPP_
#define V1_PROJ_TESTCODE_Test_Code_DBUS_PROXY_HPP_

#include <v1/proj/testcode/TestCodeProxyBase.hpp>
#include "v1/proj/testcode/TestCodeDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace proj {
namespace testcode {

class TestCodeDBusProxy
    : virtual public TestCodeProxyBase,
      virtual public CommonAPI::DBus::DBusProxy {
public:
    TestCodeDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~TestCodeDBusProxy() { }

    virtual SpeedTypeAttribute& getSpeedTypeAttribute();
    virtual SpeedValueAttribute& getSpeedValueAttribute();


    virtual void setSpeedType(const TestCode::SpeedType &_type, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setSpeedTypeAsync(const TestCode::SpeedType &_type, SetSpeedTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getSpeedType(CommonAPI::CallStatus &_internalCallStatus, TestCode::SpeedType &_show, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSpeedTypeAsync(GetSpeedTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setSpeedValue(const int32_t &_show, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setSpeedValueAsync(const int32_t &_show, SetSpeedValueAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getSpeedValue(CommonAPI::CallStatus &_internalCallStatus, int32_t &_show, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSpeedValueAsync(GetSpeedValueAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:

    class DBusspeedType_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SpeedTypeAttribute>> {
    public:
    template <typename... _A>
        DBusspeedType_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SpeedTypeAttribute>>(
                _proxy, arguments...) {}
    };
    DBusspeedType_Attribute speedType_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SpeedValueAttribute, CommonAPI::DBus::IntegerDeployment>> speedValue_;


};

} // namespace testcode
} // namespace proj
} // namespace v1

#endif // V1_PROJ_TESTCODE_Test_Code_DBUS_PROXY_HPP_

